"""A utility to create argument files.

Most tools in bazel support the @file notation in arguments, where
<file> contains one argument per line. This is also useful when the value
of the arguments is not know at analysis time, but is generated by other rules.

This tool allows to generate a list of arguments while injecting content in them
coming from other files.

For example, Let's say we have a file (a.txt) that contains the value (let's say value_a) of a flag called --a
and similarly with --b. And we want to invoke a tool with the arguments --a=__value_a__ --b=__value_b__, we would
like to generate an argument file with the lines:
--a=__value_a__
--b=__value_b__

With arg_maker this is done by:
arg_maker --prefix --a=__ --data=a.txt --suffix=__ --prefix --b=__ --data=b.txt --suffix=__
"""
import argparse
import sys


def make_args(output, lines):
  with open(output, "w") as out:
    for pre, data, post in lines:
      out.write(pre)
      with open(data, "r") as file:
        out.write(file.read().strip())
      out.write(post + "\n")


if __name__ == "__main__":
  parser = argparse.ArgumentParser()
  parser.add_argument(
      "--prefix",
      dest="prefix",
      action="append",
      help="Each argument line prefix")
  parser.add_argument(
      "--data",
      dest="data",
      action="append",
      help="The file to read and add in the argument line")
  parser.add_argument(
      "--suffix",
      dest="suffix",
      action="append",
      help="The end of each line")
  parser.add_argument(
      "--output",
      dest="output",
      required=True,
      help="Where to save the result")
  args = parser.parse_args()
  if not (len(args.prefix) == len(args.data) == len(args.suffix)):
    print("The number of prefix, data and suffix arguments should be the same.")
    sys.exit(1)

  make_args(args.output, zip(args.prefix, args.data, args.suffix))
