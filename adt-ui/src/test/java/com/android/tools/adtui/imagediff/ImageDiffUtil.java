/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.tools.adtui.imagediff;

import com.android.tools.idea.rendering.RenderTestBase;
import com.intellij.util.ui.UIUtil;
import org.jetbrains.annotations.NotNull;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

/**
 * Utility methods to be used by the tests of {@link com.android.tools.adtui.imagediff} package.
 */
public final class ImageDiffUtil {

  public static final Dimension TEST_IMAGE_DIMENSION = new Dimension(640, 480);

  private static final String IMG_DIFF_DIR = System.getProperty("java.io.tmpdir") + File.separator + "imagediff";

  private static final String TEST_DATA_DIR = "testData" + File.separator + "imagediff";

  static {
    // Create tmpDir in case it doesn't exist
    new File(IMG_DIFF_DIR).mkdirs();
  }

  /**
   * Threshold to be used when comparing two images.
   * If the calculated difference between the images is greater than this value (in %), the test should fail.
   * TODO: current value is 0.5%. This can be revisited later in case it happens not to be a good value.
   */
  private static final float IMAGE_DIFF_PERCENT_THRESHOLD = 0.5f;

  private ImageDiffUtil() {
  }

  /**
   * Converts a swing component (generated by a test) to an image and compares it to a target image.
   * If the images differ by more than a determined percentage ({@link #IMAGE_DIFF_PERCENT_THRESHOLD}),
   * an image containing the expected, actual and diff images is generated and the test that calls this method fails.
   *
   * @param expectedImageFilename filename of the target image
   * @param generatedComponent swing component generated by a test
   */
  public static void assertImagesSimilar(String expectedImageFilename, Component generatedComponent) {
    File expectedImgFile = new File(TEST_DATA_DIR, expectedImageFilename);
    BufferedImage actualImage;
    BufferedImage expectedImage;

    try {
      actualImage = convertToARGB(ImageIO.read(expectedImgFile));
      expectedImage = convertToARGB(ImageIO.read(getImageFileFromComponent(generatedComponent)));

      RenderTestBase.assertImageSimilar(expectedImageFilename, actualImage, expectedImage, IMAGE_DIFF_PERCENT_THRESHOLD);
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  /**
   * Creates an image file based on a Swing component.
   */
  private static File getImageFileFromComponent(Component component) {
    component.setSize(component.getPreferredSize());
    // Call doLayout in the content pane and its children
    doLayoutComponentTree(component);

    BufferedImage image = UIUtil.createImage(component.getWidth(), component.getHeight(), BufferedImage.TYPE_INT_ARGB);
    Graphics2D g = image.createGraphics();
    component.printAll(g);
    g.dispose();
    File outputImg = new File(IMG_DIFF_DIR, "test" + System.nanoTime() + ".png");
    try {
      ImageIO.write(image, "PNG", outputImg);
    }
    catch (IOException e) {
      e.printStackTrace();
    }
    return outputImg;
  }

  /**
   * Call doLayout in {@param component} and in its children, recursively.
   */
  private static void doLayoutComponentTree(Component component) {
    synchronized (component.getTreeLock()) {
      component.doLayout();
      // If component is a container, call doLayout in its children
      if (component instanceof Container) {
        for (Component child : ((Container) component).getComponents()) {
          doLayoutComponentTree(child);
        }
      }
    }
  }

  /**
   * Converts a BufferedImage type to {@link BufferedImage.TYPE_INT_ARGB},
   * which is the only type accepted by {@link RenderTestBase#assertImageSimilar}.
   */
  private static BufferedImage convertToARGB(@NotNull BufferedImage inputImg) {
    if (inputImg.getType() == BufferedImage.TYPE_INT_ARGB) {
      return inputImg; // Early return in case the image has already the correct type
    }
    BufferedImage outputImg = UIUtil.createImage(inputImg.getWidth(), inputImg.getHeight(), BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2d = outputImg.createGraphics();
    g2d.drawImage(inputImg, 0, 0, null);
    g2d.dispose();
    return outputImg;
  }
}
