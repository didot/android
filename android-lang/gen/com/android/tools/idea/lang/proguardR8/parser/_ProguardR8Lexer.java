/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.android.tools.idea.lang.proguardR8.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.android.tools.idea.lang.proguardR8.psi.ProguardR8PsiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_ProguardR8Lexer.flex</tt>
 */
public class _ProguardR8Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_JAVA_SECTION_HEADER = 2;
  public static final int STATE_JAVA_SECTION_BODY = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 24104 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\1\1\21\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\1\35\1\36\2\37\1\40\7\37\1\41\1\42\1\43\1\37\1\44\1\45\2\37\31\1\1\46\121"+
    "\1\1\47\4\1\1\50\1\1\1\51\1\52\1\53\1\54\1\55\1\56\53\1\1\57\41\37\1\1\1\60"+
    "\1\61\1\1\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\1\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\3\37\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\37\1\112\1\37\1\113\1\114\2\37\3\1\1\115\1\116\1\117\12\37\4\1\1\120\17"+
    "\37\2\1\1\121\41\37\2\1\1\122\1\123\3\37\1\124\27\1\1\125\2\1\1\126\45\37"+
    "\1\127\1\130\1\131\11\37\1\132\24\37\1\133\1\134\1\37\1\135\1\136\1\137\1"+
    "\140\2\37\1\141\5\37\1\142\7\37\1\143\1\144\4\37\1\145\2\37\1\146\16\37\246"+
    "\1\1\147\20\1\1\150\1\151\25\1\1\152\34\153\1\154\14\37\2\1\1\155\u0b05\37"+
    "\1\156\1\157\u02fe\37");

  /* The ZZ_CMAP_Y table has 7168 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\5\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\0\1\27\6\0\1\30\1\31\1\32\1\33\1"+
    "\3\1\34\1\32\1\3\5\14\1\35\7\14\1\35\162\14\1\36\1\37\2\14\1\36\3\3\1\14\1"+
    "\40\1\3\1\41\4\3\34\10\1\14\1\42\1\37\1\43\1\3\1\32\1\35\1\42\4\14\1\43\24"+
    "\14\1\43\42\14\1\44\1\10\1\45\51\14\1\46\10\14\1\35\1\34\1\3\1\46\11\14\1"+
    "\3\1\47\1\50\12\10\1\51\1\52\1\51\2\3\6\14\1\35\1\3\1\35\3\3\1\0\1\53\1\47"+
    "\1\3\2\10\1\54\1\55\12\14\1\56\7\10\1\57\1\37\1\60\30\14\1\61\1\10\1\62\1"+
    "\10\1\63\1\64\1\65\2\10\1\65\1\66\3\3\1\67\1\70\7\14\6\10\1\54\1\46\25\14"+
    "\1\71\2\10\1\72\3\3\2\10\1\65\7\14\1\56\2\10\1\36\1\32\1\3\5\14\1\71\1\73"+
    "\2\10\2\74\1\57\4\3\6\14\1\74\1\3\2\75\1\76\15\3\5\14\1\42\1\14\1\36\5\3\3"+
    "\10\1\77\10\10\15\14\1\71\1\100\4\10\1\74\1\10\2\14\1\71\1\101\2\10\1\46\3"+
    "\14\1\74\1\46\1\14\2\66\5\14\1\42\1\14\1\41\1\37\1\36\1\100\1\10\2\102\1\103"+
    "\1\3\1\104\1\3\1\43\1\71\1\101\2\10\1\105\1\3\1\47\1\106\1\50\1\46\1\35\1"+
    "\107\1\66\5\14\1\42\1\14\1\42\1\110\1\36\1\64\1\54\1\104\1\102\1\57\1\111"+
    "\1\3\1\46\1\41\1\3\1\101\2\10\1\65\1\112\2\3\1\50\1\46\1\14\2\43\5\14\1\42"+
    "\1\14\1\42\1\46\1\36\1\100\1\10\2\51\1\57\1\40\3\3\1\71\1\101\2\10\1\113\1"+
    "\3\1\114\1\0\1\50\1\46\1\14\2\66\5\14\1\42\1\14\1\42\1\46\1\36\1\100\1\10"+
    "\2\102\1\57\1\3\1\101\1\3\1\43\1\71\1\101\2\10\1\34\3\3\1\115\1\46\1\35\1"+
    "\37\1\42\1\36\1\110\1\42\1\107\1\40\1\35\1\37\2\14\1\36\1\101\1\54\1\101\1"+
    "\64\1\57\1\40\1\104\3\3\1\101\2\10\2\3\1\113\1\3\1\10\1\46\1\14\2\42\5\14"+
    "\1\42\3\14\1\36\1\61\1\10\2\64\1\57\1\3\1\52\1\35\1\3\1\71\1\101\2\10\4\3"+
    "\1\74\1\46\1\14\2\42\5\14\1\42\2\14\1\46\1\36\1\100\1\10\2\64\1\57\1\3\1\52"+
    "\1\3\1\32\1\71\1\101\2\10\1\110\3\3\1\116\1\46\1\14\2\42\11\14\1\117\1\120"+
    "\1\10\2\64\1\103\1\3\1\56\1\3\1\107\1\71\1\101\2\10\2\3\1\37\1\14\1\101\1"+
    "\46\3\14\1\35\1\37\5\14\1\43\2\14\1\34\1\14\1\35\1\121\1\104\1\10\1\122\2"+
    "\10\1\3\1\101\2\10\1\101\3\3\1\46\13\14\1\70\1\10\1\54\1\47\1\14\1\56\1\10"+
    "\1\54\2\10\1\57\11\3\1\110\1\66\1\41\1\34\1\3\1\14\1\46\1\14\1\46\1\123\1"+
    "\37\1\46\1\70\1\10\1\51\1\72\1\14\1\41\1\10\1\57\2\10\1\57\1\14\10\3\1\40"+
    "\5\3\1\57\1\3\2\10\1\57\2\3\1\124\1\111\1\101\2\14\1\46\10\14\1\40\1\50\4"+
    "\10\1\64\1\14\1\74\2\10\1\50\10\10\1\125\1\3\1\121\16\3\12\14\1\56\4\10\1"+
    "\126\2\10\1\57\1\3\1\14\1\71\1\65\1\71\1\100\1\63\1\10\1\65\1\74\1\60\2\14"+
    "\1\71\2\10\1\73\3\10\1\57\11\14\1\43\1\3\1\34\12\14\1\35\23\14\1\42\1\36\1"+
    "\14\1\35\1\42\1\36\12\14\1\42\1\36\10\14\1\42\1\36\1\14\1\35\1\42\1\36\3\14"+
    "\1\35\16\14\1\42\1\36\20\14\1\35\1\50\10\3\4\14\4\3\25\14\1\36\1\14\1\36\1"+
    "\46\132\14\1\66\4\14\1\127\5\14\1\35\1\3\22\14\1\35\1\37\2\14\1\40\1\3\3\14"+
    "\1\42\1\71\1\125\2\3\4\14\1\71\1\125\2\3\4\14\1\71\3\3\3\14\1\42\1\130\3\3"+
    "\15\14\10\10\1\107\1\47\1\112\2\10\1\57\7\3\1\104\1\131\2\10\1\57\1\3\26\14"+
    "\2\3\1\14\1\132\10\14\1\133\1\3\21\14\1\36\2\3\7\14\1\35\3\10\1\3\3\10\2\3"+
    "\1\101\2\10\7\14\1\36\1\14\1\40\2\3\13\14\1\3\6\14\1\36\1\3\2\10\1\57\11\3"+
    "\5\14\1\56\1\10\1\3\15\14\1\74\1\10\1\54\7\10\1\102\2\10\1\57\1\3\2\10\1\57"+
    "\2\3\1\107\2\3\3\10\1\134\20\3\1\10\1\60\13\14\4\10\1\60\1\14\1\3\2\10\1\57"+
    "\3\3\1\104\2\10\3\3\1\126\7\14\1\74\2\10\1\65\2\10\1\65\12\14\1\71\3\10\3"+
    "\3\11\14\5\10\2\3\2\10\1\57\1\46\2\10\1\65\10\14\1\36\2\14\1\40\21\3\1\54"+
    "\5\10\1\60\1\70\1\71\1\135\1\57\1\3\60\14\15\10\1\136\1\137\1\10\5\14\1\36"+
    "\1\14\1\36\11\14\1\36\1\14\1\36\2\14\2\123\7\14\1\36\15\14\1\42\1\14\1\41"+
    "\1\37\1\42\1\14\1\40\1\14\1\37\1\14\1\3\3\14\1\40\1\37\1\42\1\14\1\40\2\140"+
    "\1\141\1\0\6\3\1\142\1\143\3\3\1\107\1\40\4\3\1\40\1\3\1\144\1\0\1\145\2\0"+
    "\1\34\2\3\1\107\4\3\3\14\1\40\10\75\4\3\3\10\1\146\1\147\1\150\2\10\1\125"+
    "\3\3\1\32\1\107\1\37\2\14\1\34\1\46\1\36\1\3\1\41\1\42\1\43\2\14\1\36\1\14"+
    "\1\3\1\46\1\36\1\32\4\3\12\14\1\40\212\3\1\151\14\152\1\153\5\3\13\14\1\35"+
    "\13\14\1\35\41\14\1\40\1\107\1\56\1\65\3\3\11\14\1\43\1\3\1\34\16\14\1\3\1"+
    "\107\3\3\1\104\5\14\1\35\2\3\1\14\1\35\1\14\1\35\1\14\1\35\1\14\1\35\1\14"+
    "\1\35\1\14\1\35\1\14\1\35\1\14\1\35\10\10\13\3\1\107\64\3\1\154\1\46\6\3\1"+
    "\46\1\14\1\71\1\10\1\46\1\36\1\14\1\40\1\46\24\14\1\35\1\52\2\46\25\14\1\35"+
    "\1\14\1\3\1\46\11\14\1\155\1\46\26\14\1\35\4\3\6\14\1\35\15\3\61\14\1\36\22"+
    "\3\65\14\1\105\4\75\1\76\5\3\43\14\1\40\20\3\13\14\1\36\3\14\1\40\4\14\2\10"+
    "\1\65\5\3\13\14\1\56\1\156\2\10\1\157\7\14\1\71\24\14\1\57\10\3\1\107\2\14"+
    "\1\37\31\14\1\66\10\14\1\35\2\14\17\3\1\107\2\14\2\160\1\56\5\14\1\56\1\10"+
    "\4\3\1\106\1\3\15\14\3\3\1\65\14\14\4\10\1\57\2\3\2\10\1\57\1\3\4\10\1\65"+
    "\1\14\1\107\1\34\2\10\1\65\6\14\1\71\1\10\1\57\5\14\1\56\3\10\3\3\7\14\1\40"+
    "\1\10\13\14\1\56\3\10\1\125\2\3\1\107\2\10\1\57\1\3\1\14\1\70\2\14\2\10\1"+
    "\65\1\35\12\14\1\74\2\10\1\54\2\3\1\56\2\14\1\57\2\10\1\57\1\3\5\14\1\35\1"+
    "\161\1\65\14\14\1\100\1\63\1\60\1\71\1\133\5\3\1\107\1\36\2\14\1\56\1\10\1"+
    "\37\1\162\2\3\1\46\1\35\1\46\1\35\1\46\1\35\2\3\1\14\1\35\1\14\1\35\12\14"+
    "\1\35\2\14\1\36\2\3\34\14\1\56\1\10\1\54\1\57\2\10\1\57\1\3\51\14\3\3\5\14"+
    "\1\35\1\107\14\14\1\3\33\14\1\36\32\14\1\36\11\3\1\14\1\35\2\3\1\107\1\14"+
    "\1\3\1\163\2\14\1\42\2\14\1\35\1\14\1\41\1\43\1\42\32\14\1\36\7\3\1\107\32"+
    "\14\1\36\4\3\20\14\1\37\15\14\12\3\3\14\1\106\4\10\4\3\4\10\1\107\1\40\5\3"+
    "\1\46\6\3\1\113\1\3\1\14\1\42\41\14\1\164\1\3\1\106\2\3\2\10\1\57\1\3\1\46"+
    "\5\14\1\35\1\107\1\46\5\14\1\35\2\3\1\37\25\14\1\35\1\37\1\14\1\37\1\14\1"+
    "\37\1\14\1\37\1\40\1\31\1\165\4\3\1\166\1\3\3\14\1\46\5\14\1\35\4\14\1\35"+
    "\1\43\3\14\1\36\3\14\1\36\10\3\36\14\1\35\21\3\15\14\1\40\41\3\1\111\40\3"+
    "\7\14\1\40\14\14\1\40\3\3\1\125\7\3\10\14\3\3\1\167\6\14\1\35\1\3\11\14\1"+
    "\71\1\54\1\3\7\14\1\36\11\14\1\3\2\14\1\46\1\36\12\3\47\14\1\36\2\10\1\57"+
    "\1\3\11\14\1\3\11\14\1\3\12\14\2\3\15\14\47\3\15\14\1\35\2\3\5\14\1\36\2\3"+
    "\2\14\46\3\1\14\1\36\1\42\12\14\1\43\1\40\1\66\5\14\1\36\2\3\5\14\1\35\2\3"+
    "\7\14\1\35\20\3\4\14\1\35\1\36\2\3\5\14\1\36\2\3\6\14\1\36\21\3\16\14\1\3"+
    "\1\37\20\3\1\74\1\52\1\3\1\10\1\14\2\46\6\14\1\3\1\54\1\104\10\3\7\14\1\40"+
    "\7\14\1\40\10\3\2\14\1\46\6\14\1\162\6\3\15\14\1\36\2\3\5\14\1\36\2\3\4\14"+
    "\1\35\3\3\4\14\1\36\33\3\22\14\1\40\15\3\14\14\1\35\3\3\14\14\1\35\3\3\1\126"+
    "\15\14\3\10\1\54\7\3\1\101\2\10\3\3\1\104\1\126\13\14\2\10\1\54\1\33\4\3\6"+
    "\14\1\40\1\3\2\10\1\57\1\3\1\126\10\14\1\56\3\10\1\64\2\10\4\3\10\14\1\56"+
    "\1\32\2\3\1\126\13\14\1\56\3\10\1\60\1\40\1\101\1\125\2\10\1\103\1\40\10\3"+
    "\4\14\1\43\6\14\3\10\1\3\1\121\20\3\1\14\1\35\1\42\1\43\3\14\1\43\2\14\1\40"+
    "\1\3\13\14\1\56\2\10\1\54\1\3\2\10\1\57\1\3\1\10\1\46\1\14\2\66\5\14\1\42"+
    "\1\14\1\42\1\46\1\36\1\100\1\10\2\102\1\57\1\40\1\104\1\3\1\46\1\71\1\101"+
    "\1\10\1\125\1\10\1\125\42\3\15\14\1\74\3\10\1\126\1\35\1\3\2\10\1\57\11\3"+
    "\14\14\5\10\1\43\2\3\2\10\1\57\51\3\13\14\1\56\1\10\1\57\2\10\1\125\5\3\1"+
    "\14\1\57\10\3\14\14\4\10\1\125\1\40\2\3\2\10\1\57\11\3\12\14\1\56\3\10\2\3"+
    "\2\10\1\57\15\3\6\14\1\36\1\50\3\10\1\3\2\10\1\57\131\3\20\14\2\10\1\57\4"+
    "\3\1\107\1\170\1\0\1\171\11\75\1\172\1\0\1\173\1\174\1\3\1\67\2\3\1\170\2"+
    "\0\12\75\1\175\1\176\3\0\1\53\11\3\16\14\1\40\1\3\2\14\1\42\10\14\1\56\1\10"+
    "\1\54\2\10\1\40\3\3\2\10\1\57\5\3\1\37\7\14\1\101\5\10\1\50\2\10\1\54\22\3"+
    "\1\75\1\76\1\177\11\75\1\170\1\174\1\200\1\201\1\0\1\173\2\3\2\0\1\53\51\3"+
    "\46\14\1\36\31\3\33\14\1\35\4\3\61\14\57\3\13\14\1\35\64\3\21\14\1\35\56\3"+
    "\16\14\1\40\1\3\7\14\1\35\2\10\1\57\31\3\7\14\1\36\1\10\1\125\2\3\14\14\1"+
    "\10\1\54\2\3\1\14\3\3\2\10\1\57\1\3\1\107\5\14\1\3\1\46\4\14\34\3\21\14\1"+
    "\40\2\3\1\74\12\10\1\54\3\3\1\104\1\126\3\14\20\3\1\202\7\3\73\14\1\40\4\3"+
    "\74\14\1\35\3\3\1\105\106\75\1\76\24\3\143\75\1\3\32\14\1\35\1\3\3\14\1\40"+
    "\2\14\1\40\1\3\2\14\1\36\1\52\1\0\60\3\1\50\1\57\1\50\1\203\1\0\1\204\1\10"+
    "\1\54\1\50\1\10\7\3\1\101\1\57\44\3\1\101\1\125\56\3\25\14\1\42\21\14\1\42"+
    "\1\32\1\110\1\46\1\42\2\14\1\43\1\46\1\14\1\46\17\14\1\43\1\35\1\46\1\14\1"+
    "\42\1\14\1\42\6\14\1\43\1\35\1\14\1\41\1\37\1\14\1\42\124\14\1\36\6\14\1\42"+
    "\5\14\1\35\7\14\1\35\6\14\1\42\7\14\1\42\5\14\1\35\7\14\1\35\6\14\1\42\7\14"+
    "\1\42\5\14\1\35\2\14\1\101\31\10\1\54\1\104\14\10\1\125\1\3\1\111\3\3\1\125"+
    "\4\3\1\104\1\10\1\50\3\10\24\3\1\10\1\54\4\10\1\102\1\10\1\51\1\64\1\54\65"+
    "\3\61\14\1\40\2\3\1\10\1\54\12\3\21\14\1\10\1\54\1\3\2\10\1\57\51\3\1\14\1"+
    "\46\6\14\1\110\1\66\1\46\1\14\1\35\1\14\1\123\1\3\1\32\1\107\1\123\1\46\1"+
    "\110\1\66\2\123\1\110\1\66\1\35\1\14\1\35\1\14\1\46\1\41\2\14\1\43\4\14\1"+
    "\3\2\46\1\43\4\14\35\3\6\152\1\153\1\3\6\152\1\153\1\3\6\152\1\153\35\3\65"+
    "\14\1\35\12\3\15\14\1\40\2\3\67\14\1\36\140\14\1\36\3\3\214\75\1\106\7\3\7"+
    "\14\1\36\70\3\1\33\7\3\30\0\40\3\74\10\4\3");

  /* The ZZ_CMAP_A table has 532 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\14\1\1\1\11\2\1\1\11\2\14\4\0\1\1\1\21\1\7\1\10\1\12\1\60\1\0\1\5\1\24"+
    "\1\6\1\20\1\0\1\27\1\2\1\30\1\4\6\16\1\26\1\25\1\65\1\0\1\66\1\17\1\31\12"+
    "\13\1\61\1\0\1\62\1\0\1\13\1\0\1\46\1\55\1\34\1\37\1\40\1\56\1\52\1\50\1\32"+
    "\1\3\1\51\1\35\1\53\1\33\1\45\1\43\1\3\1\42\1\41\1\44\1\36\1\64\1\47\1\57"+
    "\1\63\1\54\1\22\1\0\1\23\1\0\2\14\1\15\2\14\1\1\1\0\4\12\4\0\1\13\2\0\1\14"+
    "\3\0\1\13\2\0\3\13\1\0\2\13\4\0\3\13\3\0\1\13\1\0\1\13\1\0\1\13\1\0\4\13\1"+
    "\0\3\13\1\0\1\16\2\4\2\13\1\0\3\13\3\0\1\12\1\0\5\16\1\0\1\16\1\0\2\16\1\0"+
    "\2\14\2\0\3\16\1\0\1\14\3\0\3\13\3\16\2\0\1\16\3\13\1\0\1\13\3\16\1\14\1\0"+
    "\2\16\2\13\2\16\1\0\4\16\3\13\2\0\1\13\3\0\1\14\1\13\1\16\4\13\3\16\1\13\2"+
    "\0\2\16\1\13\1\16\1\13\3\16\7\12\1\0\2\16\1\14\2\16\1\13\2\16\2\0\3\16\2\0"+
    "\3\16\1\13\4\0\1\16\2\13\3\12\6\0\1\13\1\0\2\13\2\0\1\16\2\0\1\13\1\16\3\0"+
    "\1\12\3\0\1\13\2\14\2\0\1\16\1\13\1\14\3\16\3\13\2\14\1\13\2\16\2\0\1\16\1"+
    "\0\1\16\1\0\1\16\2\0\1\13\1\0\1\13\1\0\1\16\1\0\2\16\3\0\3\16\1\13\1\1\4\13"+
    "\1\0\4\16\1\14\1\0\1\13\2\16\2\13\1\16\1\13\1\0\2\16\1\4\1\0\1\16\2\13\1\14"+
    "\2\16\4\14\1\0\1\16\7\1\1\14\2\1\5\14\1\1\3\0\1\1\1\14\1\0\2\14\1\16\4\4\1"+
    "\16\3\4\3\16\2\0\10\4\2\0\1\1\3\0\2\13\1\12\1\0\3\4\1\0\2\16\1\0\3\13\1\16"+
    "\1\13\2\0\1\13\1\16\1\13\2\16\2\0\1\13\1\16\2\13\2\0\1\14\1\0\2\12\2\0\3\14"+
    "\1\0\4\12\6\14\4\12\3\14\1\12\4\14\3\0\4\12\2\14\2\12\1\0\1\12\2\0\1\14\1"+
    "\0\2\14\1\0\1\14\1\13\1\12\2\0\3\16\4\14\1\16");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\6\3\1\1\1\22\1\23\1\10\1\24"+
    "\1\20\1\25\6\22\1\10\1\26\1\20\13\22\1\27"+
    "\1\1\1\22\1\1\1\30\1\4\1\6\7\3\1\31"+
    "\2\23\10\22\1\23\1\0\16\22\1\32\2\22\4\0"+
    "\10\3\10\22\1\33\1\34\1\35\22\22\4\0\3\3"+
    "\1\36\4\3\3\22\1\37\5\22\1\40\1\41\12\22"+
    "\1\42\1\22\1\43\2\22\4\0\2\3\1\44\3\3"+
    "\1\45\2\22\1\46\3\22\1\47\4\22\1\50\6\22"+
    "\1\51\2\22\4\0\2\3\1\52\3\3\3\22\1\53"+
    "\1\22\1\54\1\55\1\22\1\56\1\22\1\57\5\22"+
    "\1\60\1\61\3\0\6\3\2\22\1\62\3\22\1\63"+
    "\2\22\1\64\1\22\3\0\6\3\1\65\2\22\1\66"+
    "\1\67\3\22\1\70\1\71\1\0\1\72\2\3\1\73"+
    "\3\3\1\74\2\22\1\75\1\76\1\77\5\3\1\100"+
    "\1\22\1\101\4\3\1\22\4\3\1\102\5\3\1\103"+
    "\7\3\1\104\1\3\1\105\6\3\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\245\0\u01b8\0\u01ef\0\u014a\0\245\0\245\0\245\0\245"+
    "\0\245\0\245\0\245\0\u014a\0\245\0\u0226\0\u025d\0\u0294"+
    "\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\245"+
    "\0\245\0\245\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f"+
    "\0\u0596\0\245\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0"+
    "\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\245\0\u0861"+
    "\0\u0898\0\u08cf\0\u0113\0\245\0\245\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0370\0\u0415\0\u0a87\0\u0abe"+
    "\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e"+
    "\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\245"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\245\0\245"+
    "\0\u03a7\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea"+
    "\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a"+
    "\0\u1991\0\u19c8\0\u014a\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb"+
    "\0\u1b12\0\u1b49\0\u03a7\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c"+
    "\0\u03a7\0\u03a7\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u03a7\0\u1eb9\0\u03a7\0\u1ef0"+
    "\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u014a"+
    "\0\u20a8\0\u20df\0\u2116\0\u014a\0\u214d\0\u2184\0\u03a7\0\u21bb"+
    "\0\u21f2\0\u2229\0\u03a7\0\u2260\0\u2297\0\u22ce\0\u2305\0\u03a7"+
    "\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u03a7\0\u2486"+
    "\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u014a"+
    "\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u03a7\0\u2788"+
    "\0\u03a7\0\u03a7\0\u27bf\0\u03a7\0\u27f6\0\u03a7\0\u282d\0\u2864"+
    "\0\u289b\0\u28d2\0\u2909\0\u03a7\0\245\0\u2940\0\u2977\0\u29ae"+
    "\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66"+
    "\0\u03a7\0\u2b9d\0\u2bd4\0\u2c0b\0\u03a7\0\u2c42\0\u2c79\0\u03a7"+
    "\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31"+
    "\0\u2e68\0\u2e9f\0\u014a\0\u2ed6\0\u2f0d\0\u03a7\0\u03a7\0\u2f44"+
    "\0\u2f7b\0\u2fb2\0\u03a7\0\245\0\u2fe9\0\245\0\u3020\0\u3057"+
    "\0\u014a\0\u308e\0\u30c5\0\u30fc\0\u03a7\0\u3133\0\u316a\0\u03a7"+
    "\0\u03a7\0\245\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d\0\u03a7"+
    "\0\u32b4\0\u014a\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7\0\u33fe"+
    "\0\u3435\0\u346c\0\u34a3\0\u03a7\0\u34da\0\u3511\0\u3548\0\u357f"+
    "\0\u35b6\0\u014a\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9\0\u3700"+
    "\0\u3737\0\u014a\0\u376e\0\u014a\0\u37a5\0\u37dc\0\u3813\0\u384a"+
    "\0\u3881\0\u38b8\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13"+
    "\1\5\1\4\1\7\1\4\1\5\2\7\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\7\1\27\3\7\1\30\2\7\1\31\2\7"+
    "\1\32\7\7\1\33\1\7\3\4\4\7\1\4\1\5"+
    "\1\34\1\35\2\4\1\11\1\4\1\13\1\5\2\35"+
    "\1\4\1\5\1\4\1\36\1\37\1\15\1\16\1\40"+
    "\1\20\1\21\1\4\1\23\1\41\1\42\1\43\1\35"+
    "\1\44\3\35\1\45\2\35\1\46\2\35\1\47\7\35"+
    "\1\50\1\35\3\4\2\35\3\4\1\5\1\4\1\35"+
    "\2\4\1\11\1\4\1\13\1\5\2\35\1\4\1\5"+
    "\1\4\1\36\1\51\1\15\1\52\1\40\1\20\1\21"+
    "\1\4\1\23\1\53\1\42\1\54\1\55\1\56\1\57"+
    "\1\35\1\60\1\35\1\61\1\62\1\63\1\64\1\35"+
    "\1\47\6\35\1\65\1\66\1\35\1\67\1\70\1\4"+
    "\1\35\1\71\1\72\1\4\70\0\1\5\7\0\1\5"+
    "\3\0\1\5\53\0\1\7\1\73\1\7\6\0\1\7"+
    "\2\0\3\7\7\0\1\7\1\0\26\73\3\0\2\73"+
    "\2\7\2\0\3\7\6\0\1\7\2\0\3\7\7\0"+
    "\1\7\1\0\26\7\3\0\4\7\1\0\4\10\1\74"+
    "\1\10\2\0\1\10\1\0\1\10\1\0\4\10\3\0"+
    "\1\10\3\0\1\10\1\0\26\10\3\0\4\10\1\0"+
    "\4\12\1\0\1\12\1\75\1\0\1\12\1\0\1\12"+
    "\1\0\4\12\3\0\1\12\3\0\1\12\1\0\26\12"+
    "\3\0\4\12\11\13\1\0\55\13\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\1\7\1\76"+
    "\24\7\3\0\4\7\2\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\3\7\1\77\22\7\3\0"+
    "\4\7\2\0\3\7\6\0\1\7\2\0\3\7\7\0"+
    "\1\7\1\0\1\7\1\100\24\7\3\0\4\7\2\0"+
    "\3\7\6\0\1\7\2\0\3\7\7\0\1\7\1\0"+
    "\4\7\1\101\21\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\3\7\1\102"+
    "\17\7\1\103\2\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\1\104\25\7"+
    "\3\0\4\7\3\0\1\105\26\0\26\105\3\0\2\105"+
    "\5\0\1\35\6\0\5\35\1\36\1\106\11\0\26\35"+
    "\3\0\2\35\5\0\1\107\6\0\5\107\13\0\26\107"+
    "\3\0\2\107\5\0\1\107\6\0\5\107\1\0\1\36"+
    "\11\0\26\107\3\0\2\107\5\0\1\35\6\0\5\35"+
    "\1\36\1\106\11\0\1\35\1\110\17\35\1\111\4\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\3\35\1\112\22\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\1\35\1\113\23\35"+
    "\1\114\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\4\35\1\115\21\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\23\35\1\116"+
    "\2\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\1\117\25\35\3\0\2\35\5\0\1\107"+
    "\6\0\5\107\1\0\1\120\11\0\26\107\3\0\2\107"+
    "\32\0\1\121\41\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\1\35\1\122\24\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\14\35\1\123\11\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\16\35\1\124\7\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\13\35\1\125\12\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\13\35\1\126\12\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\12\35\1\127\3\35"+
    "\1\130\7\35\3\0\1\131\1\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\6\35\1\132\17\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\4\35\1\115\3\35\1\133\15\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\10\35\1\134"+
    "\15\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\13\35\1\135\12\35\3\0\1\136\1\35"+
    "\5\0\1\35\6\0\5\35\1\36\1\106\11\0\1\117"+
    "\2\35\1\137\22\35\3\0\2\35\64\0\1\140\7\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\13\35\1\141"+
    "\1\142\11\35\3\0\2\35\34\0\1\143\1\0\1\144"+
    "\16\0\1\145\2\0\1\146\12\0\3\7\6\0\1\7"+
    "\2\0\3\7\7\0\1\7\1\0\2\7\1\147\7\7"+
    "\1\150\13\7\3\0\4\7\2\0\3\7\6\0\1\7"+
    "\2\0\3\7\7\0\1\7\1\0\14\7\1\151\11\7"+
    "\3\0\4\7\2\0\3\7\6\0\1\7\2\0\3\7"+
    "\7\0\1\7\1\0\4\7\1\152\21\7\3\0\4\7"+
    "\2\0\3\7\6\0\1\7\2\0\3\7\7\0\1\7"+
    "\1\0\23\7\1\153\2\7\3\0\4\7\2\0\3\7"+
    "\6\0\1\7\2\0\3\7\7\0\1\7\1\0\3\7"+
    "\1\154\22\7\3\0\4\7\2\0\3\7\6\0\1\7"+
    "\2\0\3\7\7\0\1\7\1\0\7\7\1\155\16\7"+
    "\3\0\4\7\2\0\3\7\6\0\1\7\2\0\3\7"+
    "\7\0\1\7\1\0\1\7\1\156\24\7\3\0\4\7"+
    "\3\0\1\107\6\0\5\107\1\36\1\106\11\0\26\107"+
    "\3\0\2\107\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\12\35\1\157\13\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\11\35\1\160\14\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\14\35\1\161\11\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\4\35\1\162\21\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\12\35\1\163\13\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\23\35\1\164\2\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\7\35\1\165\16\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\1\35\1\166\24\35"+
    "\3\0\2\35\5\0\1\107\6\0\5\107\1\0\1\167"+
    "\11\0\26\107\3\0\2\107\32\0\1\170\41\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\12\35\1\171\13\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\12\35\1\172\13\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\14\35\1\173\11\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\1\35\1\174\24\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\4\35\1\175\21\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\10\35\1\176\3\35\1\177\11\35\3\0\2\35"+
    "\5\0\1\35\6\0\5\35\1\36\1\106\11\0\13\35"+
    "\1\200\12\35\3\0\2\35\5\0\1\35\6\0\5\35"+
    "\1\36\1\106\11\0\1\35\1\201\24\35\3\0\2\35"+
    "\5\0\1\35\6\0\5\35\1\36\1\106\11\0\12\35"+
    "\1\202\13\35\3\0\2\35\5\0\1\35\6\0\5\35"+
    "\1\36\1\106\11\0\1\203\12\35\1\204\12\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\14\35\1\205\11\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\13\35\1\206\12\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\12\35\1\207\13\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\13\35\1\210\12\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\1\211\2\35\1\212\22\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\3\35\1\213\22\35"+
    "\3\0\2\35\35\0\1\214\70\0\1\215\71\0\1\216"+
    "\60\0\1\217\36\0\3\7\6\0\1\7\2\0\3\7"+
    "\7\0\1\7\1\0\3\7\1\220\22\7\3\0\4\7"+
    "\2\0\3\7\6\0\1\7\2\0\3\7\7\0\1\7"+
    "\1\0\6\7\1\221\17\7\3\0\4\7\2\0\3\7"+
    "\6\0\1\7\2\0\3\7\7\0\1\7\1\0\7\7"+
    "\1\222\16\7\3\0\4\7\2\0\3\7\6\0\1\7"+
    "\2\0\3\7\7\0\1\7\1\0\21\7\1\223\4\7"+
    "\3\0\4\7\2\0\3\7\6\0\1\7\2\0\3\7"+
    "\7\0\1\7\1\0\3\7\1\224\22\7\3\0\4\7"+
    "\2\0\3\7\6\0\1\7\2\0\3\7\7\0\1\7"+
    "\1\0\13\7\1\225\12\7\3\0\4\7\2\0\3\7"+
    "\6\0\1\7\2\0\3\7\7\0\1\7\1\0\12\7"+
    "\1\226\13\7\3\0\4\7\2\0\3\7\6\0\1\7"+
    "\2\0\3\7\7\0\1\7\1\0\14\7\1\227\11\7"+
    "\3\0\4\7\3\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\6\35\1\230\17\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\3\35\1\231\22\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\7\35\1\232\16\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\21\35\1\233\4\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\6\35\1\234\17\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\3\35\1\235\22\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\12\35\1\236\13\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\14\35\1\237\11\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\1\240\25\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\10\35\1\241\15\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\20\35\1\242\5\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\23\35\1\243\2\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\1\244\25\35\3\0\2\35\5\0\1\35\6\0\5\35"+
    "\1\36\1\106\11\0\12\35\1\245\13\35\3\0\2\35"+
    "\5\0\1\35\6\0\5\35\1\36\1\106\11\0\10\35"+
    "\1\246\15\35\3\0\2\35\5\0\1\35\6\0\5\35"+
    "\1\36\1\106\11\0\2\35\1\247\23\35\3\0\2\35"+
    "\5\0\1\35\6\0\5\35\1\36\1\106\11\0\4\35"+
    "\1\250\21\35\3\0\2\35\5\0\1\35\6\0\5\35"+
    "\1\36\1\106\11\0\26\35\3\0\1\35\1\251\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\12\35\1\252"+
    "\13\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\1\35\1\253\24\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\3\35\1\254"+
    "\22\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\6\35\1\255\17\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\14\35\1\256"+
    "\11\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\5\35\1\257\20\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\14\35\1\260"+
    "\11\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\4\35\1\261\21\35\3\0\2\35\34\0"+
    "\1\262\66\0\1\263\100\0\1\264\62\0\1\265\30\0"+
    "\3\7\6\0\1\7\2\0\3\7\7\0\1\7\1\0"+
    "\4\7\1\266\21\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\10\7\1\267"+
    "\15\7\3\0\4\7\2\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\7\7\1\270\16\7\3\0"+
    "\4\7\2\0\3\7\6\0\1\7\2\0\3\7\7\0"+
    "\1\7\1\0\1\271\25\7\3\0\4\7\2\0\3\7"+
    "\6\0\1\7\2\0\3\7\7\0\1\7\1\0\15\7"+
    "\1\272\10\7\3\0\4\7\2\0\3\7\6\0\1\7"+
    "\2\0\3\7\7\0\1\7\1\0\10\7\1\273\15\7"+
    "\3\0\4\7\2\0\3\7\6\0\1\7\2\0\3\7"+
    "\7\0\1\7\1\0\3\7\1\274\22\7\3\0\4\7"+
    "\3\0\1\35\6\0\5\35\1\36\1\106\11\0\10\35"+
    "\1\275\15\35\3\0\2\35\5\0\1\35\6\0\5\35"+
    "\1\36\1\106\11\0\6\35\1\276\17\35\3\0\2\35"+
    "\5\0\1\35\6\0\5\35\1\36\1\106\11\0\7\35"+
    "\1\277\16\35\3\0\2\35\5\0\1\35\6\0\5\35"+
    "\1\36\1\106\11\0\1\35\1\300\24\35\3\0\2\35"+
    "\5\0\1\35\6\0\5\35\1\36\1\106\11\0\1\301"+
    "\25\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\10\35\1\302\15\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\3\35\1\303"+
    "\22\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\26\35\3\0\1\35\1\304\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\3\35\1\305\22\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\2\35\1\306\23\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\1\307\25\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\12\35\1\310\13\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\16\35\1\311\7\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\10\35\1\312\15\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\14\35\1\313\11\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\6\35\1\314\17\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\7\35\1\315\16\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\6\35\1\316\17\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\12\35\1\317\13\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\12\35\1\320\13\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\6\35\1\321\17\35\3\0"+
    "\2\35\46\0\1\322\55\0\1\323\103\0\1\324\53\0"+
    "\1\325\33\0\3\7\6\0\1\7\2\0\3\7\7\0"+
    "\1\7\1\0\5\7\1\326\20\7\3\0\4\7\2\0"+
    "\3\7\6\0\1\7\2\0\3\7\7\0\1\7\1\0"+
    "\24\7\1\327\1\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\2\7\1\330"+
    "\23\7\3\0\4\7\2\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\7\7\1\331\3\7\1\332"+
    "\12\7\3\0\4\7\2\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\14\7\1\333\11\7\3\0"+
    "\4\7\3\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\24\35\1\334\1\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\21\35\1\335\4\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\5\35\1\336\20\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\2\35\1\337\23\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\14\35\1\340\11\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\6\35\1\341\17\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\6\35\1\342\17\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\12\35\1\343\13\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\2\35\1\344\23\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\10\35\1\345\15\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\1\35\1\346\24\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\12\35\1\347\13\35\3\0"+
    "\2\35\5\0\1\35\6\0\5\35\1\36\1\106\11\0"+
    "\2\35\1\350\23\35\3\0\2\35\5\0\1\35\6\0"+
    "\5\35\1\36\1\106\11\0\1\351\25\35\3\0\2\35"+
    "\5\0\1\35\6\0\5\35\1\36\1\106\11\0\14\35"+
    "\1\352\11\35\3\0\2\35\5\0\1\35\6\0\5\35"+
    "\1\36\1\106\11\0\1\353\25\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\7\35\1\354"+
    "\16\35\3\0\2\35\70\0\1\355\32\0\1\356\101\0"+
    "\1\357\60\0\1\360\31\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\6\7\1\361\17\7\3\0"+
    "\4\7\2\0\3\7\6\0\1\7\2\0\3\7\7\0"+
    "\1\7\1\0\14\7\1\362\11\7\3\0\4\7\2\0"+
    "\3\7\6\0\1\7\2\0\3\7\7\0\1\7\1\0"+
    "\16\7\1\363\7\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\11\7\1\364"+
    "\11\7\1\365\2\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\2\7\1\366"+
    "\23\7\3\0\4\7\3\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\14\35\1\367\11\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\6\35\1\370"+
    "\17\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\7\35\1\371\16\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\2\35\1\372"+
    "\23\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\24\35\1\373\1\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\13\35\1\374"+
    "\12\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\6\35\1\375\17\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\12\35\1\376"+
    "\13\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\6\35\1\377\17\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\1\35\1\u0100"+
    "\24\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\3\35\1\u0101\22\35\3\0\2\35\46\0"+
    "\1\u0102\61\0\1\u0103\70\0\1\u0104\27\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\2\7\1\u0105"+
    "\2\7\1\u0106\20\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\2\7\1\u0107"+
    "\23\7\3\0\4\7\2\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\10\7\1\u0108\15\7\3\0"+
    "\4\7\2\0\3\7\6\0\1\7\2\0\3\7\7\0"+
    "\1\7\1\0\12\7\1\u0109\13\7\3\0\4\7\2\0"+
    "\3\7\6\0\1\7\2\0\3\7\7\0\1\7\1\0"+
    "\24\7\1\u010a\1\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\12\7\1\u010b"+
    "\13\7\3\0\4\7\3\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\2\35\1\u010c\23\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\1\35\1\u010d"+
    "\24\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\12\35\1\u010e\13\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\11\35\1\u010f"+
    "\14\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\1\35\1\u0110\24\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\6\35\1\u0111"+
    "\17\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\1\35\1\u0112\24\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\6\35\1\u0113"+
    "\17\35\3\0\2\35\70\0\1\u0114\41\0\1\u0115\113\0"+
    "\1\u0116\2\0\3\7\6\0\1\7\2\0\3\7\7\0"+
    "\1\7\1\0\13\7\1\u0117\12\7\3\0\4\7\2\0"+
    "\3\7\6\0\1\7\2\0\3\7\7\0\1\7\1\0"+
    "\6\7\1\u0118\17\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\6\7\1\u0119"+
    "\17\7\3\0\4\7\2\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\1\u011a\25\7\3\0\4\7"+
    "\2\0\3\7\6\0\1\7\2\0\3\7\7\0\1\7"+
    "\1\0\1\u011b\25\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\4\7\1\u011c"+
    "\21\7\3\0\4\7\3\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\6\35\1\u011d\17\35\3\0\2\35\5\0"+
    "\1\35\6\0\5\35\1\36\1\106\11\0\12\35\1\u011e"+
    "\13\35\3\0\2\35\5\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\1\u011f\25\35\3\0\2\35\5\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\5\35\1\u0120\20\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\12\35\1\u0121\13\35\3\0\2\35\70\0\1\u0122"+
    "\2\0\3\7\6\0\1\7\2\0\3\7\7\0\1\7"+
    "\1\0\5\7\1\u0123\20\7\3\0\4\7\2\0\3\7"+
    "\6\0\1\7\2\0\3\7\7\0\1\7\1\0\7\7"+
    "\1\u0124\16\7\3\0\4\7\2\0\3\7\6\0\1\7"+
    "\2\0\3\7\7\0\1\7\1\0\1\7\1\u0125\24\7"+
    "\3\0\4\7\2\0\3\7\6\0\1\7\2\0\3\7"+
    "\7\0\1\7\1\0\21\7\1\u0126\4\7\3\0\4\7"+
    "\2\0\3\7\6\0\1\7\2\0\3\7\7\0\1\7"+
    "\1\0\7\7\1\u0127\16\7\3\0\4\7\3\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\7\35\1\u0128\16\35"+
    "\3\0\2\35\5\0\1\35\6\0\5\35\1\36\1\106"+
    "\11\0\22\35\1\u0129\3\35\3\0\2\35\4\0\3\7"+
    "\6\0\1\7\2\0\3\7\7\0\1\7\1\0\6\7"+
    "\1\u012a\17\7\3\0\4\7\2\0\3\7\6\0\1\7"+
    "\2\0\3\7\7\0\1\7\1\0\2\7\1\u012b\23\7"+
    "\3\0\4\7\2\0\3\7\6\0\1\7\2\0\3\7"+
    "\7\0\1\7\1\0\17\7\1\u012c\6\7\3\0\4\7"+
    "\2\0\3\7\6\0\1\7\2\0\3\7\7\0\1\7"+
    "\1\0\1\u012d\25\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\2\7\1\u012e"+
    "\23\7\3\0\4\7\3\0\1\35\6\0\5\35\1\36"+
    "\1\106\11\0\6\35\1\u012f\17\35\3\0\2\35\4\0"+
    "\3\7\6\0\1\7\2\0\3\7\7\0\1\7\1\0"+
    "\10\7\1\u0130\15\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\1\u0131\25\7"+
    "\3\0\4\7\2\0\3\7\6\0\1\7\2\0\3\7"+
    "\7\0\1\7\1\0\22\7\1\u0132\3\7\3\0\4\7"+
    "\2\0\3\7\6\0\1\7\2\0\3\7\7\0\1\7"+
    "\1\0\14\7\1\u0133\11\7\3\0\4\7\3\0\1\35"+
    "\6\0\5\35\1\36\1\106\11\0\5\35\1\u0134\20\35"+
    "\3\0\2\35\4\0\3\7\6\0\1\7\2\0\3\7"+
    "\7\0\1\7\1\0\1\u0135\25\7\3\0\4\7\2\0"+
    "\3\7\6\0\1\7\2\0\3\7\7\0\1\7\1\0"+
    "\1\7\1\u0136\24\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\14\7\1\u0137"+
    "\11\7\3\0\4\7\2\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\12\7\1\u0138\13\7\3\0"+
    "\4\7\2\0\3\7\6\0\1\7\2\0\3\7\7\0"+
    "\1\7\1\0\11\7\1\u0139\14\7\3\0\4\7\2\0"+
    "\3\7\6\0\1\7\2\0\3\7\7\0\1\7\1\0"+
    "\20\7\1\u013a\5\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\12\7\1\u013b"+
    "\13\7\3\0\4\7\2\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\1\u013c\25\7\3\0\4\7"+
    "\2\0\3\7\6\0\1\7\2\0\3\7\7\0\1\7"+
    "\1\0\12\7\1\u013d\13\7\3\0\4\7\2\0\3\7"+
    "\6\0\1\7\2\0\3\7\7\0\1\7\1\0\1\u013e"+
    "\25\7\3\0\4\7\2\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\13\7\1\u013f\12\7\3\0"+
    "\4\7\2\0\3\7\6\0\1\7\2\0\3\7\7\0"+
    "\1\7\1\0\13\7\1\u0140\12\7\3\0\4\7\2\0"+
    "\3\7\6\0\1\7\2\0\3\7\7\0\1\7\1\0"+
    "\13\7\1\u0141\12\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\1\7\1\u0142"+
    "\24\7\3\0\4\7\2\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\10\7\1\u0143\15\7\3\0"+
    "\4\7\2\0\3\7\6\0\1\7\2\0\3\7\7\0"+
    "\1\7\1\0\1\7\1\u0144\24\7\3\0\4\7\2\0"+
    "\3\7\6\0\1\7\2\0\3\7\7\0\1\7\1\0"+
    "\2\7\1\u0145\23\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\3\7\1\u0146"+
    "\22\7\3\0\4\7\2\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\14\7\1\u0147\11\7\3\0"+
    "\4\7\2\0\3\7\6\0\1\7\2\0\3\7\7\0"+
    "\1\7\1\0\7\7\1\u0148\16\7\3\0\4\7\2\0"+
    "\3\7\6\0\1\7\2\0\3\7\7\0\1\7\1\0"+
    "\7\7\1\u0149\16\7\3\0\4\7\2\0\3\7\6\0"+
    "\1\7\2\0\3\7\7\0\1\7\1\0\6\7\1\u014a"+
    "\17\7\3\0\4\7\2\0\3\7\6\0\1\7\2\0"+
    "\3\7\7\0\1\7\1\0\7\7\1\u014b\16\7\3\0"+
    "\4\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14575];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\3\1\7\11\1\1\1\11"+
    "\12\1\3\11\7\1\1\11\14\1\1\11\4\1\2\11"+
    "\23\1\1\0\16\1\1\11\2\1\4\0\20\1\2\11"+
    "\23\1\4\0\42\1\4\0\34\1\4\0\27\1\1\11"+
    "\3\0\21\1\3\0\17\1\1\11\1\0\1\11\13\1"+
    "\1\11\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ProguardR8Lexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ProguardR8Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 71: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 72: break;
          case 3: 
            { return FILE_NAME;
            } 
            // fall through
          case 73: break;
          case 4: 
            { return FILE_NAME_SINGLE_QUOTED;
            } 
            // fall through
          case 74: break;
          case 5: 
            { return RPAREN;
            } 
            // fall through
          case 75: break;
          case 6: 
            { return FILE_NAME_DOUBLE_QUOTED;
            } 
            // fall through
          case 76: break;
          case 7: 
            { return LINE_CMT;
            } 
            // fall through
          case 77: break;
          case 8: 
            { return ASTERISK;
            } 
            // fall through
          case 78: break;
          case 9: 
            { return EM;
            } 
            // fall through
          case 79: break;
          case 10: 
            { yybegin(STATE_JAVA_SECTION_BODY); return OPEN_BRACE;
            } 
            // fall through
          case 80: break;
          case 11: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 81: break;
          case 12: 
            { return LPAREN;
            } 
            // fall through
          case 82: break;
          case 13: 
            { return SEMICOLON;
            } 
            // fall through
          case 83: break;
          case 14: 
            { return COLON;
            } 
            // fall through
          case 84: break;
          case 15: 
            { return COMMA;
            } 
            // fall through
          case 85: break;
          case 16: 
            { return DOT;
            } 
            // fall through
          case 86: break;
          case 17: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return AT;
            } 
            // fall through
          case 87: break;
          case 18: 
            { return JAVA_IDENTIFIER;
            } 
            // fall through
          case 88: break;
          case 19: 
            { return JAVA_IDENTIFIER_WITH_WILDCARDS;
            } 
            // fall through
          case 89: break;
          case 20: 
            { yybegin(YYINITIAL); return CLOSE_BRACE;
            } 
            // fall through
          case 90: break;
          case 21: 
            { return AT;
            } 
            // fall through
          case 91: break;
          case 22: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 92: break;
          case 23: 
            { return ANY_PRIMITIVE_TYPE_;
            } 
            // fall through
          case 93: break;
          case 24: 
            { return FLAG;
            } 
            // fall through
          case 94: break;
          case 25: 
            { yybegin(YYINITIAL); return FLAG;
            } 
            // fall through
          case 95: break;
          case 26: 
            { return ARRAY;
            } 
            // fall through
          case 96: break;
          case 27: 
            { return ANY_TYPE_;
            } 
            // fall through
          case 97: break;
          case 28: 
            { return ANY_TYPE_AND_NUM_OF_ARGS;
            } 
            // fall through
          case 98: break;
          case 29: 
            { return INT;
            } 
            // fall through
          case 99: break;
          case 30: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return ENUM;
            } 
            // fall through
          case 100: break;
          case 31: 
            { return ENUM;
            } 
            // fall through
          case 101: break;
          case 32: 
            { return CHAR;
            } 
            // fall through
          case 102: break;
          case 33: 
            { return LONG;
            } 
            // fall through
          case 103: break;
          case 34: 
            { return BYTE;
            } 
            // fall through
          case 104: break;
          case 35: 
            { return VOID;
            } 
            // fall through
          case 105: break;
          case 36: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return CLASS;
            } 
            // fall through
          case 106: break;
          case 37: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return FINAL;
            } 
            // fall through
          case 107: break;
          case 38: 
            { return CLASS;
            } 
            // fall through
          case 108: break;
          case 39: 
            { return FINAL;
            } 
            // fall through
          case 109: break;
          case 40: 
            { return SHORT;
            } 
            // fall through
          case 110: break;
          case 41: 
            { return FLOAT;
            } 
            // fall through
          case 111: break;
          case 42: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return PUBLIC;
            } 
            // fall through
          case 112: break;
          case 43: 
            { return PUBLIC;
            } 
            // fall through
          case 113: break;
          case 44: 
            { return NATIVE;
            } 
            // fall through
          case 114: break;
          case 45: 
            { return DOUBLE;
            } 
            // fall through
          case 115: break;
          case 46: 
            { return STATIC;
            } 
            // fall through
          case 116: break;
          case 47: 
            { return RETURN;
            } 
            // fall through
          case 117: break;
          case 48: 
            { return VALUES;
            } 
            // fall through
          case 118: break;
          case 49: 
            { return _INIT_;
            } 
            // fall through
          case 119: break;
          case 50: 
            { return EXTENDS;
            } 
            // fall through
          case 120: break;
          case 51: 
            { return PRIVATE;
            } 
            // fall through
          case 121: break;
          case 52: 
            { return BOOLEAN;
            } 
            // fall through
          case 122: break;
          case 53: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return ABSTRACT;
            } 
            // fall through
          case 123: break;
          case 54: 
            { return ABSTRACT;
            } 
            // fall through
          case 124: break;
          case 55: 
            { return STRICTFP;
            } 
            // fall through
          case 125: break;
          case 56: 
            { return VOLATILE;
            } 
            // fall through
          case 126: break;
          case 57: 
            { return _CLINIT_;
            } 
            // fall through
          case 127: break;
          case 58: 
            { return _FIELDS_;
            } 
            // fall through
          case 128: break;
          case 59: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return INTERFACE;
            } 
            // fall through
          case 129: break;
          case 60: 
            { return INTERFACE;
            } 
            // fall through
          case 130: break;
          case 61: 
            { return PROTECTED;
            } 
            // fall through
          case 131: break;
          case 62: 
            { return TRANSIENT;
            } 
            // fall through
          case 132: break;
          case 63: 
            { return _METHODS_;
            } 
            // fall through
          case 133: break;
          case 64: 
            { return IMPLEMENTS;
            } 
            // fall through
          case 134: break;
          case 65: 
            { return INCLUDECODE;
            } 
            // fall through
          case 135: break;
          case 66: 
            { return SYNCHRONIZED;
            } 
            // fall through
          case 136: break;
          case 67: 
            { return ALLOWSHRINKING;
            } 
            // fall through
          case 137: break;
          case 68: 
            { return ALLOWOBFUSCATION;
            } 
            // fall through
          case 138: break;
          case 69: 
            { return ALLOWOPTIMIZATION;
            } 
            // fall through
          case 139: break;
          case 70: 
            { return INCLUDEDESCRIPTORCLASSES;
            } 
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
