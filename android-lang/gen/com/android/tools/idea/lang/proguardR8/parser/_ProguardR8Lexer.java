/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.android.tools.idea.lang.proguardR8.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.android.tools.idea.lang.proguardR8.psi.ProguardR8PsiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_ProguardR8Lexer.flex</tt>
 */
public class _ProguardR8Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_JAVA_SECTION_HEADER = 2;
  public static final int STATE_JAVA_SECTION_BODY = 4;
  public static final int STATE_FLAG_ARGS = 6;
  public static final int STATE_FILE_NAME = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 24160 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\1\1\21\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\1\35\1\36\2\37\1\40\7\37\1\41\1\42\1\43\1\37\1\44\1\45\2\37\31\1\1\46\121"+
    "\1\1\47\4\1\1\50\1\1\1\51\1\52\1\53\1\54\1\55\1\56\53\1\1\57\41\37\1\1\1\60"+
    "\1\61\1\1\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\1\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\3\37\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\37\1\112\1\37\1\113\1\114\2\37\3\1\1\115\1\116\1\117\12\37\4\1\1\120\17"+
    "\37\2\1\1\121\41\37\2\1\1\122\1\123\3\37\1\124\27\1\1\125\2\1\1\126\45\37"+
    "\1\127\1\130\1\131\11\37\1\132\24\37\1\133\1\134\1\37\1\135\1\136\1\137\1"+
    "\140\2\37\1\141\5\37\1\142\7\37\1\143\1\144\4\37\1\145\2\37\1\146\16\37\246"+
    "\1\1\147\20\1\1\150\1\151\25\1\1\152\34\153\1\154\14\37\2\1\1\155\u0b05\37"+
    "\1\156\1\157\u02fe\37");

  /* The ZZ_CMAP_Y table has 7168 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\5\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\0\1\27\6\0\1\30\1\31\1\32\1\33\1"+
    "\3\1\34\1\32\1\3\5\14\1\35\7\14\1\35\162\14\1\36\1\37\2\14\1\36\3\3\1\14\1"+
    "\40\1\3\1\41\4\3\34\42\1\14\1\43\1\37\1\44\1\3\1\32\1\35\1\43\4\14\1\44\24"+
    "\14\1\44\42\14\1\45\1\42\1\46\51\14\1\47\10\14\1\35\1\34\1\3\1\47\11\14\1"+
    "\3\1\50\1\51\12\42\1\52\1\53\1\52\2\3\6\14\1\35\1\3\1\35\3\3\1\0\1\54\1\50"+
    "\1\3\2\42\1\55\1\56\12\14\1\57\5\42\2\10\1\60\1\37\1\61\30\14\1\62\1\42\1"+
    "\63\1\42\1\64\1\65\1\66\2\10\1\67\1\70\3\3\1\71\1\72\7\14\6\42\1\55\1\47\25"+
    "\14\1\73\2\42\1\74\3\3\2\10\1\67\7\14\1\57\2\42\1\36\1\32\1\3\5\14\1\73\1"+
    "\75\2\42\2\76\1\77\4\3\6\14\1\76\1\3\2\100\1\101\15\3\5\14\1\43\1\14\1\36"+
    "\5\3\3\42\1\102\10\42\15\14\1\73\1\103\4\42\1\76\1\42\2\14\1\73\1\104\2\10"+
    "\1\47\3\14\1\76\1\47\1\14\2\70\5\14\1\43\1\14\1\41\1\37\1\36\1\103\1\42\2"+
    "\105\1\106\1\3\1\107\1\3\1\44\1\73\1\104\2\10\1\110\1\3\1\50\1\111\1\51\1"+
    "\47\1\35\1\112\1\70\5\14\1\43\1\14\1\43\1\113\1\36\1\65\1\55\1\107\1\105\1"+
    "\77\1\114\1\3\1\47\1\41\1\3\1\104\2\10\1\66\1\115\2\3\1\51\1\47\1\14\2\44"+
    "\5\14\1\43\1\14\1\43\1\47\1\36\1\103\1\42\2\52\1\77\1\40\3\3\1\73\1\104\2"+
    "\10\1\116\1\3\1\117\1\0\1\51\1\47\1\14\2\70\5\14\1\43\1\14\1\43\1\47\1\36"+
    "\1\103\1\42\2\105\1\77\1\3\1\120\1\3\1\44\1\73\1\104\2\10\1\34\3\3\1\121\1"+
    "\47\1\35\1\37\1\43\1\36\1\113\1\43\1\112\1\40\1\35\1\37\2\14\1\36\1\120\1"+
    "\55\1\120\1\65\1\77\1\40\1\107\3\3\1\104\2\10\2\3\1\116\1\3\1\42\1\47\1\14"+
    "\2\43\5\14\1\43\3\14\1\36\1\62\1\42\2\65\1\77\1\3\1\53\1\35\1\3\1\73\1\104"+
    "\2\10\4\3\1\76\1\47\1\14\2\43\5\14\1\43\2\14\1\47\1\36\1\103\1\42\2\65\1\77"+
    "\1\3\1\53\1\3\1\32\1\73\1\104\2\10\1\113\3\3\1\122\1\47\1\14\2\43\11\14\1"+
    "\123\1\124\1\42\2\65\1\106\1\3\1\57\1\3\1\112\1\73\1\104\2\10\2\3\1\37\1\14"+
    "\1\120\1\47\3\14\1\35\1\37\5\14\1\44\2\14\1\34\1\14\1\35\1\125\1\107\1\42"+
    "\1\126\2\42\1\3\1\104\2\10\1\120\3\3\1\47\13\14\1\72\1\42\1\55\1\50\1\14\1"+
    "\57\1\42\1\55\2\10\1\60\11\3\1\113\1\70\1\41\1\34\1\3\1\14\1\47\1\14\1\47"+
    "\1\127\1\37\1\47\1\72\1\42\1\52\1\74\1\14\1\41\1\42\1\77\2\10\1\60\1\14\10"+
    "\3\1\40\5\3\1\77\1\3\2\10\1\60\2\3\1\130\1\114\1\120\2\14\1\47\10\14\1\40"+
    "\1\51\4\42\1\65\1\14\1\76\2\42\1\51\10\42\1\131\1\3\1\125\16\3\12\14\1\57"+
    "\4\42\1\132\2\10\1\60\1\3\1\14\1\73\1\66\1\73\1\103\1\64\1\42\1\66\1\76\1"+
    "\61\2\14\1\73\2\42\1\75\2\10\1\133\1\77\11\14\1\44\1\3\1\34\12\14\1\35\23"+
    "\14\1\43\1\36\1\14\1\35\1\43\1\36\12\14\1\43\1\36\10\14\1\43\1\36\1\14\1\35"+
    "\1\43\1\36\3\14\1\35\16\14\1\43\1\36\20\14\1\35\1\51\10\3\4\14\4\3\25\14\1"+
    "\36\1\14\1\36\1\47\132\14\1\70\4\14\1\134\5\14\1\35\1\3\22\14\1\35\1\37\2"+
    "\14\1\40\1\3\3\14\1\43\1\73\1\131\2\3\4\14\1\73\1\131\2\3\4\14\1\73\3\3\3"+
    "\14\1\43\1\135\3\3\15\14\10\42\1\112\1\50\1\115\2\10\1\60\7\3\1\107\1\136"+
    "\2\10\1\60\1\3\26\14\2\3\1\14\1\137\10\14\1\140\1\3\21\14\1\36\2\3\7\14\1"+
    "\35\3\42\1\3\3\42\2\3\1\104\2\10\7\14\1\36\1\14\1\40\2\3\13\14\1\3\6\14\1"+
    "\36\1\3\2\10\1\60\11\3\5\14\1\57\1\42\1\3\15\14\1\76\1\42\1\55\7\42\1\105"+
    "\2\10\1\60\1\3\2\10\1\60\2\3\1\112\2\3\3\42\1\141\20\3\1\42\1\61\13\14\4\42"+
    "\1\61\1\14\1\3\2\10\1\60\3\3\1\107\2\42\3\3\1\132\7\14\1\76\2\42\1\66\2\10"+
    "\1\67\12\14\1\73\3\42\3\3\11\14\5\42\2\3\2\10\1\60\1\47\2\10\1\67\10\14\1"+
    "\36\2\14\1\40\21\3\1\55\5\42\1\61\1\72\1\73\1\142\1\77\1\3\60\14\15\42\1\143"+
    "\1\144\1\42\5\14\1\36\1\14\1\36\11\14\1\36\1\14\1\36\2\14\2\127\7\14\1\36"+
    "\15\14\1\43\1\14\1\41\1\37\1\43\1\14\1\40\1\14\1\37\1\14\1\3\3\14\1\40\1\37"+
    "\1\43\1\14\1\40\2\145\1\146\1\0\6\3\1\147\1\150\3\3\1\112\1\40\4\3\1\40\1"+
    "\3\1\151\1\0\1\152\2\0\1\34\2\3\1\112\4\3\3\14\1\40\10\100\4\3\3\42\1\153"+
    "\1\154\1\155\2\42\1\131\3\3\1\32\1\112\1\37\2\14\1\34\1\47\1\36\1\3\1\41\1"+
    "\43\1\44\2\14\1\36\1\14\1\3\1\47\1\36\1\32\4\3\12\14\1\40\212\3\1\156\14\157"+
    "\1\160\5\3\13\14\1\35\13\14\1\35\41\14\1\40\1\112\1\57\1\66\3\3\11\14\1\44"+
    "\1\3\1\34\16\14\1\3\1\112\3\3\1\107\5\14\1\35\2\3\1\14\1\35\1\14\1\35\1\14"+
    "\1\35\1\14\1\35\1\14\1\35\1\14\1\35\1\14\1\35\1\14\1\35\10\42\13\3\1\112\64"+
    "\3\1\161\1\47\6\3\1\47\1\14\1\73\1\42\1\47\1\36\1\14\1\40\1\47\24\14\1\35"+
    "\1\53\2\47\25\14\1\35\1\14\1\3\1\47\11\14\1\162\1\47\26\14\1\35\4\3\6\14\1"+
    "\35\15\3\61\14\1\36\22\3\65\14\1\110\4\100\1\101\5\3\43\14\1\40\20\3\13\14"+
    "\1\36\3\14\1\40\4\14\2\10\1\67\5\3\13\14\1\57\1\163\2\42\1\164\7\14\1\73\24"+
    "\14\1\77\10\3\1\112\2\14\1\37\31\14\1\70\10\14\1\35\2\14\17\3\1\112\2\14\2"+
    "\165\1\57\5\14\1\57\1\42\4\3\1\111\1\3\15\14\3\3\1\66\14\14\4\42\1\77\2\3"+
    "\2\10\1\60\1\3\4\42\1\66\1\14\1\112\1\34\2\10\1\67\6\14\1\73\1\42\1\77\5\14"+
    "\1\57\3\42\3\3\7\14\1\40\1\42\13\14\1\57\3\42\1\131\2\3\1\112\2\10\1\60\1"+
    "\3\1\14\1\72\2\14\2\10\1\67\1\35\12\14\1\76\2\42\1\55\2\3\1\57\2\14\1\77\2"+
    "\10\1\60\1\3\5\14\1\35\1\166\1\66\14\14\1\103\1\64\1\61\1\73\1\140\5\3\1\112"+
    "\1\36\2\14\1\57\1\42\1\37\1\167\2\3\1\47\1\35\1\47\1\35\1\47\1\35\2\3\1\14"+
    "\1\35\1\14\1\35\12\14\1\35\2\14\1\36\2\3\34\14\1\57\1\42\1\55\1\77\2\10\1"+
    "\60\1\3\51\14\3\3\5\14\1\35\1\112\14\14\1\3\33\14\1\36\32\14\1\36\11\3\1\14"+
    "\1\35\2\3\1\112\1\14\1\3\1\170\2\14\1\43\2\14\1\35\1\14\1\41\1\44\1\43\32"+
    "\14\1\36\7\3\1\112\32\14\1\36\4\3\20\14\1\37\15\14\12\3\3\14\1\111\4\42\4"+
    "\3\4\42\1\112\1\40\5\3\1\47\6\3\1\116\1\3\1\14\1\43\41\14\1\171\1\3\1\111"+
    "\2\3\2\10\1\60\1\3\1\47\5\14\1\35\1\112\1\47\5\14\1\35\2\3\1\37\25\14\1\35"+
    "\1\37\1\14\1\37\1\14\1\37\1\14\1\37\1\40\1\31\1\172\4\3\1\173\1\3\3\14\1\47"+
    "\5\14\1\35\4\14\1\35\1\44\3\14\1\36\3\14\1\36\10\3\36\14\1\35\21\3\15\14\1"+
    "\40\41\3\1\114\40\3\7\14\1\40\14\14\1\40\3\3\1\131\7\3\10\14\3\3\1\174\6\14"+
    "\1\35\1\3\11\14\1\73\1\55\1\3\7\14\1\36\11\14\1\3\2\14\1\47\1\36\12\3\47\14"+
    "\1\36\2\10\1\60\1\3\11\14\1\3\11\14\1\3\12\14\2\3\15\14\47\3\15\14\1\35\2"+
    "\3\5\14\1\36\2\3\2\14\46\3\1\14\1\36\1\43\12\14\1\44\1\40\1\70\5\14\1\36\2"+
    "\3\5\14\1\35\2\3\7\14\1\35\20\3\4\14\1\35\1\36\2\3\5\14\1\36\2\3\6\14\1\36"+
    "\21\3\16\14\1\3\1\37\20\3\1\76\1\53\1\3\1\42\1\14\2\47\6\14\1\3\1\55\1\107"+
    "\10\3\7\14\1\40\7\14\1\40\10\3\2\14\1\47\6\14\1\167\6\3\15\14\1\36\2\3\5\14"+
    "\1\36\2\3\4\14\1\35\3\3\4\14\1\36\33\3\22\14\1\40\15\3\14\14\1\35\3\3\14\14"+
    "\1\35\3\3\1\132\15\14\3\42\1\55\7\3\1\104\2\10\3\3\1\107\1\132\13\14\2\42"+
    "\1\55\1\33\4\3\6\14\1\40\1\3\2\10\1\60\1\3\1\132\10\14\1\57\3\42\1\175\2\10"+
    "\4\3\10\14\1\57\1\32\2\3\1\132\13\14\1\57\3\42\1\61\1\40\1\120\1\131\2\10"+
    "\1\176\1\40\10\3\4\14\1\44\6\14\3\42\1\3\1\125\20\3\1\14\1\35\1\43\1\44\3"+
    "\14\1\44\2\14\1\40\1\3\13\14\1\57\2\42\1\55\1\3\2\10\1\60\1\3\1\42\1\47\1"+
    "\14\2\70\5\14\1\43\1\14\1\43\1\47\1\36\1\103\1\42\2\105\1\77\1\40\1\107\1"+
    "\3\1\47\1\73\1\120\1\42\1\131\1\42\1\131\42\3\15\14\1\76\3\42\1\132\1\35\1"+
    "\3\2\10\1\60\11\3\14\14\5\42\1\44\2\3\2\10\1\60\51\3\13\14\1\57\1\42\1\77"+
    "\2\42\1\131\5\3\1\14\1\77\10\3\14\14\4\42\1\131\1\40\2\3\2\10\1\60\11\3\12"+
    "\14\1\57\3\42\2\3\2\10\1\60\15\3\6\14\1\36\1\51\3\42\1\3\2\10\1\60\131\3\20"+
    "\14\2\10\1\60\4\3\1\112\1\177\1\0\1\200\11\100\1\201\1\0\1\202\1\203\1\3\1"+
    "\71\2\3\1\177\2\0\12\100\1\204\1\205\3\0\1\54\11\3\16\14\1\40\1\3\2\14\1\43"+
    "\10\14\1\57\1\42\1\55\2\42\1\40\3\3\2\10\1\60\5\3\1\37\7\14\1\120\5\42\1\51"+
    "\2\42\1\55\22\3\1\100\1\101\1\206\11\100\1\177\1\203\1\207\1\210\1\0\1\202"+
    "\2\3\2\0\1\54\51\3\46\14\1\36\31\3\33\14\1\35\4\3\61\14\57\3\13\14\1\35\64"+
    "\3\21\14\1\35\56\3\16\14\1\40\1\3\7\14\1\35\2\10\1\60\31\3\7\14\1\36\1\42"+
    "\1\131\2\3\14\14\1\42\1\55\2\3\1\14\3\3\2\10\1\60\1\3\1\112\5\14\1\3\1\47"+
    "\4\14\34\3\21\14\1\40\2\3\1\76\12\42\1\55\3\3\1\107\1\132\3\14\20\3\1\211"+
    "\7\3\73\14\1\40\4\3\74\14\1\35\3\3\1\110\106\100\1\101\24\3\143\100\1\3\32"+
    "\14\1\35\1\3\3\14\1\40\2\14\1\40\1\3\2\14\1\36\1\53\1\0\60\3\1\51\1\77\1\51"+
    "\1\212\1\0\1\213\1\42\1\55\1\51\1\42\7\3\1\120\1\77\44\3\1\120\1\131\56\3"+
    "\25\14\1\43\21\14\1\43\1\32\1\113\1\47\1\43\2\14\1\44\1\47\1\14\1\47\17\14"+
    "\1\44\1\35\1\47\1\14\1\43\1\14\1\43\6\14\1\44\1\35\1\14\1\41\1\37\1\14\1\43"+
    "\124\14\1\36\6\14\1\43\5\14\1\35\7\14\1\35\6\14\1\43\7\14\1\43\5\14\1\35\7"+
    "\14\1\35\6\14\1\43\7\14\1\43\5\14\1\35\2\14\1\104\14\10\15\42\1\55\1\107\14"+
    "\42\1\131\1\3\1\114\3\3\1\131\4\3\1\107\1\42\1\51\3\42\24\3\1\42\1\55\4\42"+
    "\1\105\1\42\1\52\1\65\1\55\65\3\61\14\1\40\2\3\1\42\1\55\12\3\21\14\1\42\1"+
    "\55\1\3\2\10\1\60\51\3\1\14\1\47\6\14\1\113\1\70\1\47\1\14\1\35\1\14\1\127"+
    "\1\3\1\32\1\112\1\127\1\47\1\113\1\70\2\127\1\113\1\70\1\35\1\14\1\35\1\14"+
    "\1\47\1\41\2\14\1\44\4\14\1\3\2\47\1\44\4\14\35\3\6\157\1\160\1\3\6\157\1"+
    "\160\1\3\6\157\1\160\35\3\65\14\1\35\12\3\15\14\1\40\2\3\67\14\1\36\140\14"+
    "\1\36\3\3\214\100\1\111\7\3\7\14\1\36\70\3\1\33\7\3\30\0\40\3\74\42\4\3");

  /* The ZZ_CMAP_A table has 560 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\14\1\1\1\11\2\1\1\11\2\14\4\0\1\1\1\25\1\7\1\10\1\12\1\63\1\0\1\5\1\30"+
    "\1\6\1\20\1\0\1\33\1\2\1\34\1\4\6\22\1\32\1\31\1\21\1\0\1\23\1\17\1\24\12"+
    "\13\1\64\1\0\1\65\1\0\1\13\1\0\1\51\1\60\1\37\1\42\1\43\1\61\1\55\1\53\1\35"+
    "\1\3\1\54\1\40\1\56\1\36\1\50\1\46\1\3\1\45\1\44\1\47\1\41\1\67\1\52\1\62"+
    "\1\66\1\57\1\26\1\0\1\27\1\0\2\14\1\15\2\14\1\1\1\0\4\12\4\0\1\13\2\0\1\14"+
    "\3\0\1\13\2\0\3\13\1\0\2\13\4\0\3\13\3\0\1\13\1\0\1\13\1\0\4\16\1\13\1\0\4"+
    "\13\1\0\3\13\1\0\1\16\2\4\2\13\1\0\3\13\3\0\1\12\1\0\5\16\1\0\1\16\1\0\2\16"+
    "\1\0\2\14\2\0\3\16\1\0\1\14\3\0\3\13\1\16\2\22\2\0\1\16\3\13\1\0\1\13\3\16"+
    "\1\14\1\0\2\16\2\13\2\16\1\0\4\16\2\13\2\22\3\13\2\0\1\13\3\0\1\14\1\13\1"+
    "\16\4\13\3\16\1\13\2\0\2\16\1\13\1\16\1\13\5\16\2\0\7\12\1\0\2\16\1\14\2\16"+
    "\1\13\2\16\2\0\2\22\1\16\2\0\3\16\1\13\4\0\1\16\2\13\3\12\6\0\1\13\1\0\2\13"+
    "\2\0\1\16\2\0\1\13\1\16\3\0\1\12\3\0\1\13\2\14\2\0\2\16\2\0\1\16\1\13\1\14"+
    "\3\16\3\13\2\14\1\13\2\16\2\0\1\16\1\0\1\16\1\0\1\16\2\0\1\13\1\0\1\13\1\0"+
    "\1\16\1\0\2\16\3\0\3\16\1\13\2\22\2\16\1\1\4\13\1\0\4\16\1\14\1\0\1\13\2\16"+
    "\2\13\1\16\1\13\1\0\2\16\1\4\1\0\1\16\2\13\1\14\2\16\4\14\1\0\1\16\7\1\1\14"+
    "\2\1\5\14\1\1\3\0\1\1\1\14\1\0\2\14\1\16\4\4\1\16\3\4\3\16\2\0\10\4\2\0\1"+
    "\1\3\0\2\13\1\12\1\0\3\4\1\0\2\16\1\0\3\13\1\16\1\13\2\0\1\13\1\16\1\13\2"+
    "\16\2\0\1\13\1\16\2\13\2\0\1\14\1\0\2\12\2\0\3\14\1\0\3\12\1\16\1\0\4\22\1"+
    "\13\1\0\1\12\6\14\4\12\3\14\1\12\4\14\3\0\4\12\2\14\2\12\1\0\1\12\2\0\1\14"+
    "\1\0\2\14\1\0\1\14\1\13\1\12\2\0\3\16\4\14\1\16");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\6\5\1\10\1\1\1\21"+
    "\1\20\13\5\1\22\1\1\1\5\2\23\1\24\1\25"+
    "\1\10\1\26\1\27\1\30\1\20\6\23\1\31\1\32"+
    "\1\33\1\34\1\35\1\7\1\0\1\7\1\0\10\5"+
    "\1\7\5\0\16\5\1\36\2\5\1\35\1\24\1\25"+
    "\7\23\1\32\1\33\10\5\1\37\4\0\1\40\1\41"+
    "\22\5\10\23\3\5\1\42\4\5\4\0\1\5\1\43"+
    "\1\44\12\5\1\45\1\5\1\46\2\5\3\23\1\47"+
    "\4\23\2\5\1\50\3\5\1\51\4\0\4\5\1\52"+
    "\6\5\1\53\2\5\2\23\1\54\3\23\1\55\3\5"+
    "\1\56\1\5\1\57\3\0\1\60\1\61\1\5\1\62"+
    "\1\5\1\63\5\5\1\64\2\23\1\65\3\23\2\5"+
    "\1\66\1\5\3\0\2\5\1\67\2\5\1\70\1\5"+
    "\6\23\2\5\1\71\1\72\1\0\1\73\1\74\3\5"+
    "\1\75\6\23\1\76\1\77\1\5\1\100\1\5\1\101"+
    "\1\102\2\23\1\103\3\23\1\104\1\5\5\23\1\5"+
    "\1\105\4\23\1\106\11\23\1\107\7\23\1\110\1\23"+
    "\1\111\6\23\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u0118\0\u01f8\0\u0230\0\u0118\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u0118\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620"+
    "\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0118\0\u0770\0\u07a8"+
    "\0\u07e0\0\u0818\0\u0850\0\u0888\0\u0818\0\u0118\0\u0118\0\u0118"+
    "\0\u0818\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0188\0\u01f8\0\u02a0\0\u02d8\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0"+
    "\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70"+
    "\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030"+
    "\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u0118\0\u1148\0\u1180\0\u07e0"+
    "\0\u0118\0\u0118\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\u1308\0\u0118\0\u0118\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420"+
    "\0\u1458\0\u1490\0\u14c8\0\u0118\0\u1500\0\u1538\0\u1570\0\u15a8"+
    "\0\u0118\0\u0230\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8"+
    "\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8"+
    "\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u0230"+
    "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0"+
    "\0\u1df8\0\u0230\0\u0230\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10"+
    "\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u0230\0\u2060\0\u0230"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u0818\0\u21b0\0\u21e8"+
    "\0\u2220\0\u2258\0\u2290\0\u22c8\0\u0230\0\u2300\0\u2338\0\u2370"+
    "\0\u0230\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8"+
    "\0\u2530\0\u0230\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680"+
    "\0\u0230\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u0818\0\u2798\0\u27d0"+
    "\0\u2808\0\u0818\0\u2840\0\u2878\0\u28b0\0\u0230\0\u28e8\0\u0118"+
    "\0\u2920\0\u2958\0\u2990\0\u0230\0\u0230\0\u29c8\0\u0230\0\u2a00"+
    "\0\u0230\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u0230\0\u2b50"+
    "\0\u2b88\0\u0818\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u0230"+
    "\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u0230\0\u2e28"+
    "\0\u2e60\0\u0230\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78\0\u2fb0"+
    "\0\u2fe8\0\u3020\0\u3058\0\u0230\0\u0118\0\u3090\0\u0118\0\u0230"+
    "\0\u30c8\0\u3100\0\u3138\0\u0230\0\u3170\0\u31a8\0\u31e0\0\u3218"+
    "\0\u3250\0\u3288\0\u0818\0\u0230\0\u32c0\0\u0118\0\u32f8\0\u0230"+
    "\0\u0230\0\u3330\0\u3368\0\u0818\0\u33a0\0\u33d8\0\u3410\0\u0230"+
    "\0\u3448\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u0818"+
    "\0\u35d0\0\u3608\0\u3640\0\u3678\0\u0230\0\u36b0\0\u36e8\0\u3720"+
    "\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870\0\u0818\0\u38a8"+
    "\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u0818\0\u3a30"+
    "\0\u0818\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u0818";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\5\6\1\11\1\7\3\6\1\7"+
    "\6\6\1\12\44\6\1\7\1\13\1\14\2\6\1\15"+
    "\1\6\1\11\1\7\2\14\1\6\1\7\1\6\1\16"+
    "\1\17\1\20\2\6\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\6\1\27\1\30\1\31\1\14\1\32\3\14"+
    "\1\33\2\14\1\34\2\14\1\35\7\14\1\36\1\14"+
    "\3\6\2\14\1\6\1\7\1\6\1\14\2\6\1\15"+
    "\1\6\1\11\1\7\2\14\1\6\1\7\1\6\1\16"+
    "\1\37\1\40\2\6\1\21\1\22\1\41\1\24\1\25"+
    "\1\26\1\6\1\27\1\42\1\43\1\44\1\45\1\46"+
    "\1\14\1\47\1\14\1\50\1\51\1\52\1\53\1\14"+
    "\1\35\6\14\1\54\1\55\1\14\1\56\1\57\1\6"+
    "\1\14\1\60\1\6\1\7\1\61\2\62\1\63\1\15"+
    "\1\64\1\11\1\7\1\6\1\62\1\6\1\7\2\62"+
    "\1\65\3\62\1\66\1\22\1\23\1\67\1\25\1\26"+
    "\1\70\1\27\1\71\1\72\1\62\1\73\3\62\1\74"+
    "\2\62\1\75\2\62\1\76\7\62\1\77\1\62\3\6"+
    "\2\62\2\6\3\100\1\101\1\6\1\102\3\6\1\100"+
    "\2\6\6\100\10\6\27\100\3\6\2\100\71\0\1\7"+
    "\7\0\1\7\3\0\1\7\55\0\1\103\31\0\26\103"+
    "\3\0\2\103\11\11\1\0\56\11\3\0\1\104\31\0"+
    "\26\104\3\0\2\104\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\26\14\3\0\2\14\3\0"+
    "\1\107\6\0\5\107\3\0\1\107\12\0\26\107\3\0"+
    "\2\107\3\0\1\107\6\0\5\107\1\0\1\16\1\0"+
    "\1\107\12\0\26\107\3\0\2\107\22\0\1\110\50\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\1\14\1\111\17\14\1\112\4\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\3\14\1\113\22\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\1\14\1\114"+
    "\23\14\1\115\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\16\1\105\1\106\1\14\12\0\4\14\1\116\21\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\16\1\105"+
    "\1\106\1\14\12\0\23\14\1\117\2\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\16\1\105\1\106\1\14"+
    "\12\0\1\120\25\14\3\0\2\14\3\0\1\107\6\0"+
    "\5\107\1\0\1\121\1\0\1\107\12\0\26\107\3\0"+
    "\2\107\22\0\1\110\12\0\1\122\1\0\1\123\16\0"+
    "\1\124\2\0\1\125\42\0\1\126\36\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\1\14\1\127"+
    "\24\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\14\14\1\130\11\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\16\14\1\131\7\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\13\14\1\132\12\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\13\14\1\133"+
    "\12\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\12\14\1\134\3\14\1\135"+
    "\7\14\3\0\1\136\1\14\3\0\1\14\6\0\5\14"+
    "\1\16\1\105\1\106\1\14\12\0\6\14\1\137\17\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\16\1\105"+
    "\1\106\1\14\12\0\4\14\1\116\3\14\1\140\15\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\16\1\105"+
    "\1\106\1\14\12\0\10\14\1\141\15\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\16\1\105\1\106\1\14"+
    "\12\0\13\14\1\142\12\14\3\0\1\143\1\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\1\120\2\14\1\144\22\14\3\0\2\14\65\0\1\145"+
    "\5\0\1\14\6\0\5\14\1\16\1\105\1\106\1\14"+
    "\12\0\13\14\1\146\1\147\11\14\3\0\2\14\2\0"+
    "\1\62\1\150\1\62\6\0\1\62\2\0\6\62\10\0"+
    "\1\62\26\150\3\0\2\150\2\0\3\62\6\0\1\62"+
    "\2\0\6\62\10\0\27\62\3\0\2\62\1\0\4\63"+
    "\1\151\1\63\2\0\1\63\1\0\1\63\1\0\7\63"+
    "\4\0\1\63\3\0\27\63\3\0\2\63\1\0\4\64"+
    "\1\0\1\64\1\152\1\0\1\64\1\0\1\64\1\0"+
    "\7\64\4\0\1\64\3\0\27\64\3\0\2\64\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\2\62\1\153"+
    "\24\62\3\0\2\62\2\0\3\62\6\0\1\62\2\0"+
    "\6\62\10\0\4\62\1\154\22\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\2\62\1\155"+
    "\24\62\3\0\2\62\2\0\3\62\6\0\1\62\2\0"+
    "\6\62\10\0\5\62\1\156\21\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\4\62\1\157"+
    "\17\62\1\160\2\62\3\0\2\62\2\0\3\62\6\0"+
    "\1\62\2\0\6\62\10\0\1\62\1\161\25\62\3\0"+
    "\2\62\2\0\3\100\6\0\1\100\2\0\6\100\10\0"+
    "\27\100\3\0\2\100\1\0\4\101\1\162\1\101\2\0"+
    "\1\101\1\0\1\101\1\0\7\101\4\0\1\101\3\0"+
    "\27\101\3\0\2\101\1\0\4\102\1\0\1\102\1\163"+
    "\1\0\1\102\1\0\1\102\1\0\7\102\4\0\1\102"+
    "\3\0\27\102\3\0\2\102\3\0\1\107\6\0\5\107"+
    "\1\16\1\105\1\106\1\107\12\0\26\107\3\0\2\107"+
    "\22\0\1\110\1\16\47\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\12\14\1\164\13\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\11\14\1\165\14\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\14\14\1\166\11\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\4\14\1\167"+
    "\21\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\12\14\1\170\13\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\23\14\1\171\2\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\7\14\1\172\16\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\1\14\1\173"+
    "\24\14\3\0\2\14\3\0\1\107\6\0\5\107\1\0"+
    "\1\174\1\0\1\107\12\0\26\107\3\0\2\107\36\0"+
    "\1\175\71\0\1\176\72\0\1\177\61\0\1\200\66\0"+
    "\1\201\36\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\12\14\1\202\13\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\12\14\1\203\13\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\14\14\1\204"+
    "\11\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\1\14\1\205\24\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\4\14\1\206\21\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\10\14\1\207\3\14\1\210\11\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\13\14\1\211\12\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\1\14\1\212"+
    "\24\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\12\14\1\213\13\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\1\214\12\14\1\215\12\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\16\1\105\1\106\1\14"+
    "\12\0\14\14\1\216\11\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\16\1\105\1\106\1\14\12\0\13\14"+
    "\1\217\12\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\16\1\105\1\106\1\14\12\0\12\14\1\220\13\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\16\1\105"+
    "\1\106\1\14\12\0\13\14\1\221\12\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\16\1\105\1\106\1\14"+
    "\12\0\1\222\2\14\1\223\22\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\3\14\1\224\22\14\3\0\2\14\2\0\3\62\6\0"+
    "\1\62\2\0\6\62\10\0\3\62\1\225\7\62\1\226"+
    "\13\62\3\0\2\62\2\0\3\62\6\0\1\62\2\0"+
    "\6\62\10\0\15\62\1\227\11\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\5\62\1\230"+
    "\21\62\3\0\2\62\2\0\3\62\6\0\1\62\2\0"+
    "\6\62\10\0\24\62\1\231\2\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\4\62\1\232"+
    "\22\62\3\0\2\62\2\0\3\62\6\0\1\62\2\0"+
    "\6\62\10\0\10\62\1\233\16\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\2\62\1\234"+
    "\24\62\3\0\2\62\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\6\14\1\235\17\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\3\14\1\236\22\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\7\14\1\237\16\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\21\14\1\240"+
    "\4\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\6\14\1\241\17\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\3\14\1\242\22\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\12\14\1\243\13\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\14\14\1\244"+
    "\11\14\3\0\2\14\35\0\1\245\67\0\1\246\101\0"+
    "\1\247\63\0\1\250\27\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\1\251\25\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\16\1\105\1\106\1\14"+
    "\12\0\10\14\1\252\15\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\16\1\105\1\106\1\14\12\0\20\14"+
    "\1\253\5\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\16\1\105\1\106\1\14\12\0\23\14\1\254\2\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\16\1\105"+
    "\1\106\1\14\12\0\1\255\25\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\12\14\1\256\13\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\10\14\1\257"+
    "\15\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\2\14\1\260\23\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\4\14\1\261\21\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\26\14\3\0\1\14\1\262\3\0\1\14\6\0\5\14"+
    "\1\16\1\105\1\106\1\14\12\0\12\14\1\263\13\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\16\1\105"+
    "\1\106\1\14\12\0\1\14\1\264\24\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\16\1\105\1\106\1\14"+
    "\12\0\3\14\1\265\22\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\16\1\105\1\106\1\14\12\0\6\14"+
    "\1\266\17\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\16\1\105\1\106\1\14\12\0\14\14\1\267\11\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\16\1\105"+
    "\1\106\1\14\12\0\5\14\1\270\20\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\16\1\105\1\106\1\14"+
    "\12\0\14\14\1\271\11\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\16\1\105\1\106\1\14\12\0\4\14"+
    "\1\272\21\14\3\0\2\14\2\0\3\62\6\0\1\62"+
    "\2\0\6\62\10\0\4\62\1\273\22\62\3\0\2\62"+
    "\2\0\3\62\6\0\1\62\2\0\6\62\10\0\7\62"+
    "\1\274\17\62\3\0\2\62\2\0\3\62\6\0\1\62"+
    "\2\0\6\62\10\0\10\62\1\275\16\62\3\0\2\62"+
    "\2\0\3\62\6\0\1\62\2\0\6\62\10\0\22\62"+
    "\1\276\4\62\3\0\2\62\2\0\3\62\6\0\1\62"+
    "\2\0\6\62\10\0\4\62\1\277\22\62\3\0\2\62"+
    "\2\0\3\62\6\0\1\62\2\0\6\62\10\0\14\62"+
    "\1\300\12\62\3\0\2\62\2\0\3\62\6\0\1\62"+
    "\2\0\6\62\10\0\13\62\1\301\13\62\3\0\2\62"+
    "\2\0\3\62\6\0\1\62\2\0\6\62\10\0\15\62"+
    "\1\302\11\62\3\0\2\62\3\0\1\14\6\0\5\14"+
    "\1\16\1\105\1\106\1\14\12\0\10\14\1\303\15\14"+
    "\3\0\2\14\3\0\1\14\6\0\5\14\1\16\1\105"+
    "\1\106\1\14\12\0\6\14\1\304\17\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\16\1\105\1\106\1\14"+
    "\12\0\7\14\1\305\16\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\16\1\105\1\106\1\14\12\0\1\14"+
    "\1\306\24\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\16\1\105\1\106\1\14\12\0\1\307\25\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\10\14\1\310\15\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\3\14\1\311\22\14\3\0\2\14\47\0\1\312\56\0"+
    "\1\313\104\0\1\314\54\0\1\315\32\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\26\14\3\0"+
    "\1\14\1\316\3\0\1\14\6\0\5\14\1\16\1\105"+
    "\1\106\1\14\12\0\3\14\1\317\22\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\16\1\105\1\106\1\14"+
    "\12\0\2\14\1\320\23\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\16\1\105\1\106\1\14\12\0\1\321"+
    "\25\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\12\14\1\322\13\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\16\14\1\323\7\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\10\14\1\324\15\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\14\14\1\325"+
    "\11\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\6\14\1\326\17\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\7\14\1\327\16\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\6\14\1\330\17\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\12\14\1\331"+
    "\13\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\12\14\1\332\13\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\6\14\1\333\17\14\3\0\2\14\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\5\62\1\334"+
    "\21\62\3\0\2\62\2\0\3\62\6\0\1\62\2\0"+
    "\6\62\10\0\11\62\1\335\15\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\10\62\1\336"+
    "\16\62\3\0\2\62\2\0\3\62\6\0\1\62\2\0"+
    "\6\62\10\0\1\62\1\337\25\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\16\62\1\340"+
    "\10\62\3\0\2\62\2\0\3\62\6\0\1\62\2\0"+
    "\6\62\10\0\11\62\1\341\15\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\4\62\1\342"+
    "\22\62\3\0\2\62\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\24\14\1\343\1\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\21\14\1\344\4\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\5\14\1\345\20\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\2\14\1\346"+
    "\23\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\14\14\1\347\11\14\3\0"+
    "\2\14\23\0\1\350\101\0\1\351\102\0\1\352\61\0"+
    "\1\353\30\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\6\14\1\354\17\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\6\14\1\355\17\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\12\14\1\356"+
    "\13\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\2\14\1\357\23\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\10\14\1\360\15\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\1\14\1\361\24\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\12\14\1\362"+
    "\13\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\2\14\1\363\23\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\1\364\25\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\16\1\105\1\106\1\14\12\0\14\14"+
    "\1\365\11\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\16\1\105\1\106\1\14\12\0\1\366\25\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\7\14\1\367\16\14\3\0\2\14\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\6\62\1\370"+
    "\20\62\3\0\2\62\2\0\3\62\6\0\1\62\2\0"+
    "\6\62\10\0\25\62\1\371\1\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\3\62\1\372"+
    "\23\62\3\0\2\62\2\0\3\62\6\0\1\62\2\0"+
    "\6\62\10\0\10\62\1\373\3\62\1\374\12\62\3\0"+
    "\2\62\2\0\3\62\6\0\1\62\2\0\6\62\10\0"+
    "\15\62\1\375\11\62\3\0\2\62\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\14\14\1\376"+
    "\11\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\6\14\1\377\17\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\7\14\1\u0100\16\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\2\14\1\u0101\23\14\3\0\2\14\47\0\1\u0102\62\0"+
    "\1\u0103\71\0\1\u0104\26\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\24\14\1\u0105\1\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\13\14\1\u0106\12\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\6\14\1\u0107\17\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\12\14\1\u0108"+
    "\13\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\6\14\1\u0109\17\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\1\14\1\u010a\24\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\3\14\1\u010b\22\14\3\0\2\14\2\0\3\62\6\0"+
    "\1\62\2\0\6\62\10\0\7\62\1\u010c\17\62\3\0"+
    "\2\62\2\0\3\62\6\0\1\62\2\0\6\62\10\0"+
    "\15\62\1\u010d\11\62\3\0\2\62\2\0\3\62\6\0"+
    "\1\62\2\0\6\62\10\0\17\62\1\u010e\7\62\3\0"+
    "\2\62\2\0\3\62\6\0\1\62\2\0\6\62\10\0"+
    "\12\62\1\u010f\11\62\1\u0110\2\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\3\62\1\u0111"+
    "\23\62\3\0\2\62\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\2\14\1\u0112\23\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\1\14\1\u0113\24\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\12\14\1\u0114\13\14\3\0\2\14\23\0\1\u0115\110\0"+
    "\1\u0116\46\0\1\u0117\47\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\11\14\1\u0118\14\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\1\14\1\u0119\24\14\3\0\2\14\3\0"+
    "\1\14\6\0\5\14\1\16\1\105\1\106\1\14\12\0"+
    "\6\14\1\u011a\17\14\3\0\2\14\3\0\1\14\6\0"+
    "\5\14\1\16\1\105\1\106\1\14\12\0\1\14\1\u011b"+
    "\24\14\3\0\2\14\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\6\14\1\u011c\17\14\3\0"+
    "\2\14\2\0\3\62\6\0\1\62\2\0\6\62\10\0"+
    "\3\62\1\u011d\2\62\1\u011e\20\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\3\62\1\u011f"+
    "\23\62\3\0\2\62\2\0\3\62\6\0\1\62\2\0"+
    "\6\62\10\0\11\62\1\u0120\15\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\13\62\1\u0121"+
    "\13\62\3\0\2\62\2\0\3\62\6\0\1\62\2\0"+
    "\6\62\10\0\25\62\1\u0122\1\62\3\0\2\62\2\0"+
    "\3\62\6\0\1\62\2\0\6\62\10\0\13\62\1\u0123"+
    "\13\62\3\0\2\62\3\0\1\14\6\0\5\14\1\16"+
    "\1\105\1\106\1\14\12\0\6\14\1\u0124\17\14\3\0"+
    "\2\14\3\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\12\14\1\u0125\13\14\3\0\2\14\23\0"+
    "\1\u0126\47\0\1\14\6\0\5\14\1\16\1\105\1\106"+
    "\1\14\12\0\1\u0127\25\14\3\0\2\14\3\0\1\14"+
    "\6\0\5\14\1\16\1\105\1\106\1\14\12\0\5\14"+
    "\1\u0128\20\14\3\0\2\14\3\0\1\14\6\0\5\14"+
    "\1\16\1\105\1\106\1\14\12\0\12\14\1\u0129\13\14"+
    "\3\0\2\14\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\14\62\1\u012a\12\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\7\62\1\u012b\17\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\7\62\1\u012c\17\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\1\62\1\u012d\25\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\1\62\1\u012e\25\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\5\62\1\u012f\21\62"+
    "\3\0\2\62\3\0\1\14\6\0\5\14\1\16\1\105"+
    "\1\106\1\14\12\0\7\14\1\u0130\16\14\3\0\2\14"+
    "\3\0\1\14\6\0\5\14\1\16\1\105\1\106\1\14"+
    "\12\0\22\14\1\u0131\3\14\3\0\2\14\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\6\62\1\u0132\20\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\10\62\1\u0133\16\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\2\62\1\u0134\24\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\22\62\1\u0135\4\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\10\62\1\u0136\16\62"+
    "\3\0\2\62\3\0\1\14\6\0\5\14\1\16\1\105"+
    "\1\106\1\14\12\0\6\14\1\u0137\17\14\3\0\2\14"+
    "\2\0\3\62\6\0\1\62\2\0\6\62\10\0\7\62"+
    "\1\u0138\17\62\3\0\2\62\2\0\3\62\6\0\1\62"+
    "\2\0\6\62\10\0\3\62\1\u0139\23\62\3\0\2\62"+
    "\2\0\3\62\6\0\1\62\2\0\6\62\10\0\20\62"+
    "\1\u013a\6\62\3\0\2\62\2\0\3\62\6\0\1\62"+
    "\2\0\6\62\10\0\1\62\1\u013b\25\62\3\0\2\62"+
    "\2\0\3\62\6\0\1\62\2\0\6\62\10\0\3\62"+
    "\1\u013c\23\62\3\0\2\62\3\0\1\14\6\0\5\14"+
    "\1\16\1\105\1\106\1\14\12\0\5\14\1\u013d\20\14"+
    "\3\0\2\14\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\11\62\1\u013e\15\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\1\62\1\u013f\25\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\23\62\1\u0140\3\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\15\62\1\u0141\11\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\1\62\1\u0142\25\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\2\62\1\u0143\24\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\15\62\1\u0144\11\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\13\62\1\u0145\13\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\12\62\1\u0146\14\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\21\62\1\u0147\5\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\13\62\1\u0148\13\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\1\62\1\u0149\25\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\13\62\1\u014a\13\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\1\62\1\u014b\25\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\14\62\1\u014c\12\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\14\62\1\u014d\12\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\14\62\1\u014e\12\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\2\62\1\u014f\24\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\11\62\1\u0150\15\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\2\62\1\u0151\24\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\3\62\1\u0152\23\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\4\62\1\u0153\22\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\15\62\1\u0154\11\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\10\62\1\u0155\16\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\10\62\1\u0156\16\62\3\0\2\62\2\0\3\62"+
    "\6\0\1\62\2\0\6\62\10\0\7\62\1\u0157\17\62"+
    "\3\0\2\62\2\0\3\62\6\0\1\62\2\0\6\62"+
    "\10\0\10\62\1\u0158\16\62\3\0\2\62";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15288];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\3\1\1\11\2\1\1\11\3\1\10\11"+
    "\10\1\1\11\14\1\1\11\7\1\3\11\15\1\1\0"+
    "\1\1\1\0\11\1\5\0\16\1\1\11\3\1\2\11"+
    "\7\1\2\11\10\1\1\11\4\0\1\11\43\1\4\0"+
    "\41\1\4\0\32\1\1\11\3\0\26\1\3\0\20\1"+
    "\1\11\1\0\1\11\16\1\1\11\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[344];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ProguardR8Lexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ProguardR8Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 75: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 76: break;
          case 3: 
            { return LINE_CMT;
            } 
            // fall through
          case 77: break;
          case 4: 
            { yybegin(STATE_FILE_NAME); return AT;
            } 
            // fall through
          case 78: break;
          case 5: 
            { return JAVA_IDENTIFIER;
            } 
            // fall through
          case 79: break;
          case 6: 
            { return RPAREN;
            } 
            // fall through
          case 80: break;
          case 7: 
            { return JAVA_IDENTIFIER_WITH_WILDCARDS;
            } 
            // fall through
          case 81: break;
          case 8: 
            { return ASTERISK;
            } 
            // fall through
          case 82: break;
          case 9: 
            { return AT;
            } 
            // fall through
          case 83: break;
          case 10: 
            { return EM;
            } 
            // fall through
          case 84: break;
          case 11: 
            { yybegin(STATE_JAVA_SECTION_BODY); return OPEN_BRACE;
            } 
            // fall through
          case 85: break;
          case 12: 
            { yybegin(YYINITIAL); return CLOSE_BRACE;
            } 
            // fall through
          case 86: break;
          case 13: 
            { return LPAREN;
            } 
            // fall through
          case 87: break;
          case 14: 
            { return SEMICOLON;
            } 
            // fall through
          case 88: break;
          case 15: 
            { return COMMA;
            } 
            // fall through
          case 89: break;
          case 16: 
            { return DOT;
            } 
            // fall through
          case 90: break;
          case 17: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 91: break;
          case 18: 
            { return ANY_PRIMITIVE_TYPE_;
            } 
            // fall through
          case 92: break;
          case 19: 
            { return FILE_NAME;
            } 
            // fall through
          case 93: break;
          case 20: 
            { return FILE_NAME_SINGLE_QUOTED;
            } 
            // fall through
          case 94: break;
          case 21: 
            { return FILE_NAME_DOUBLE_QUOTED;
            } 
            // fall through
          case 95: break;
          case 22: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return AT;
            } 
            // fall through
          case 96: break;
          case 23: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 97: break;
          case 24: 
            { return COLON;
            } 
            // fall through
          case 98: break;
          case 25: 
            { yybegin(YYINITIAL); return FILE_NAME;
            } 
            // fall through
          case 99: break;
          case 26: 
            { yybegin(YYINITIAL); return FILE_NAME_SINGLE_QUOTED;
            } 
            // fall through
          case 100: break;
          case 27: 
            { yybegin(YYINITIAL); return FILE_NAME_DOUBLE_QUOTED;
            } 
            // fall through
          case 101: break;
          case 28: 
            { yybegin(STATE_FLAG_ARGS); return FLAG;
            } 
            // fall through
          case 102: break;
          case 29: 
            { yypushback(yytext().length()); yybegin(YYINITIAL);
            } 
            // fall through
          case 103: break;
          case 30: 
            { return ARRAY;
            } 
            // fall through
          case 104: break;
          case 31: 
            { return ANY_TYPE_;
            } 
            // fall through
          case 105: break;
          case 32: 
            { return ANY_TYPE_AND_NUM_OF_ARGS;
            } 
            // fall through
          case 106: break;
          case 33: 
            { return INT;
            } 
            // fall through
          case 107: break;
          case 34: 
            { return ENUM;
            } 
            // fall through
          case 108: break;
          case 35: 
            { return CHAR;
            } 
            // fall through
          case 109: break;
          case 36: 
            { return LONG;
            } 
            // fall through
          case 110: break;
          case 37: 
            { return BYTE;
            } 
            // fall through
          case 111: break;
          case 38: 
            { return VOID;
            } 
            // fall through
          case 112: break;
          case 39: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return ENUM;
            } 
            // fall through
          case 113: break;
          case 40: 
            { return CLASS;
            } 
            // fall through
          case 114: break;
          case 41: 
            { return FINAL;
            } 
            // fall through
          case 115: break;
          case 42: 
            { return SHORT;
            } 
            // fall through
          case 116: break;
          case 43: 
            { return FLOAT;
            } 
            // fall through
          case 117: break;
          case 44: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return CLASS;
            } 
            // fall through
          case 118: break;
          case 45: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return FINAL;
            } 
            // fall through
          case 119: break;
          case 46: 
            { return PUBLIC;
            } 
            // fall through
          case 120: break;
          case 47: 
            { return _INIT_;
            } 
            // fall through
          case 121: break;
          case 48: 
            { return NATIVE;
            } 
            // fall through
          case 122: break;
          case 49: 
            { return DOUBLE;
            } 
            // fall through
          case 123: break;
          case 50: 
            { return STATIC;
            } 
            // fall through
          case 124: break;
          case 51: 
            { return RETURN;
            } 
            // fall through
          case 125: break;
          case 52: 
            { return VALUES;
            } 
            // fall through
          case 126: break;
          case 53: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return PUBLIC;
            } 
            // fall through
          case 127: break;
          case 54: 
            { return EXTENDS;
            } 
            // fall through
          case 128: break;
          case 55: 
            { return PRIVATE;
            } 
            // fall through
          case 129: break;
          case 56: 
            { return BOOLEAN;
            } 
            // fall through
          case 130: break;
          case 57: 
            { return ABSTRACT;
            } 
            // fall through
          case 131: break;
          case 58: 
            { return _CLINIT_;
            } 
            // fall through
          case 132: break;
          case 59: 
            { return _FIELDS_;
            } 
            // fall through
          case 133: break;
          case 60: 
            { return STRICTFP;
            } 
            // fall through
          case 134: break;
          case 61: 
            { return VOLATILE;
            } 
            // fall through
          case 135: break;
          case 62: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return ABSTRACT;
            } 
            // fall through
          case 136: break;
          case 63: 
            { return INTERFACE;
            } 
            // fall through
          case 137: break;
          case 64: 
            { return _METHODS_;
            } 
            // fall through
          case 138: break;
          case 65: 
            { return PROTECTED;
            } 
            // fall through
          case 139: break;
          case 66: 
            { return TRANSIENT;
            } 
            // fall through
          case 140: break;
          case 67: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return INTERFACE;
            } 
            // fall through
          case 141: break;
          case 68: 
            { return IMPLEMENTS;
            } 
            // fall through
          case 142: break;
          case 69: 
            { return INCLUDECODE;
            } 
            // fall through
          case 143: break;
          case 70: 
            { return SYNCHRONIZED;
            } 
            // fall through
          case 144: break;
          case 71: 
            { return ALLOWSHRINKING;
            } 
            // fall through
          case 145: break;
          case 72: 
            { return ALLOWOBFUSCATION;
            } 
            // fall through
          case 146: break;
          case 73: 
            { return ALLOWOPTIMIZATION;
            } 
            // fall through
          case 147: break;
          case 74: 
            { return INCLUDEDESCRIPTORCLASSES;
            } 
            // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
