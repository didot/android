/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.android.tools.idea.lang.proguardR8.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.android.tools.idea.lang.proguardR8.psi.ProguardR8PsiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_ProguardR8Lexer.flex</tt>
 */
public class _ProguardR8Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATE_JAVA_SECTION_HEADER = 2;
  public static final int STATE_JAVA_SECTION_BODY = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15760 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100"+
    "\2\21\1\101\1\102\7\21\123\26\1\103\7\26\1\104\1\105\12\26\1\106\24\21\1\26"+
    "\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\0\1\16"+
    "\1\17\1\20\1\17\2\21\1\22\3\21\1\22\71\21\1\23\1\21\1\24\1\0\1\25\1\26\2\0"+
    "\16\21\1\27\1\30\1\31\1\32\2\21\1\33\11\21\1\34\21\21\1\33\25\21\1\35\3\21"+
    "\1\22\1\36\1\35\4\21\1\0\1\35\4\21\1\34\1\37\1\0\3\21\2\40\3\0\1\21\1\40\10"+
    "\21\1\4\1\41\14\21\1\42\1\43\1\21\1\44\1\4\1\45\2\0\7\21\1\46\14\21\1\24\1"+
    "\0\1\4\1\47\4\21\1\50\1\17\5\21\1\50\2\0\3\21\1\51\10\0\2\21\1\27\1\50\2\0"+
    "\1\52\1\21\1\33\17\21\1\53\1\4\1\35\1\21\1\42\1\43\1\54\2\21\1\44\1\55\1\56"+
    "\1\43\1\57\1\60\1\61\1\53\1\4\1\24\1\0\1\62\1\63\1\54\2\21\1\44\1\64\1\65"+
    "\1\63\1\66\1\36\1\67\1\70\1\4\1\50\1\0\1\62\1\34\1\33\2\21\1\44\1\71\1\56"+
    "\1\34\1\72\1\73\1\0\1\53\1\4\1\0\1\36\1\62\1\43\1\54\2\21\1\44\1\71\1\56\1"+
    "\43\1\66\1\74\1\61\1\53\1\4\1\36\1\0\1\75\1\76\1\77\1\100\1\101\1\76\1\21"+
    "\1\23\1\76\1\77\1\102\1\0\1\70\1\4\2\0\1\42\1\27\1\44\2\21\1\44\1\21\1\103"+
    "\1\27\1\77\1\104\1\40\1\53\1\4\2\0\1\42\1\27\1\44\2\21\1\44\1\42\1\56\1\27"+
    "\1\77\1\104\1\31\1\53\1\4\1\105\1\0\1\62\1\27\1\44\4\21\1\46\1\27\1\106\1"+
    "\52\1\60\1\53\1\4\1\0\1\107\1\75\1\21\1\22\1\107\2\21\1\33\1\110\1\22\1\111"+
    "\1\112\1\21\1\70\1\4\1\113\1\0\1\35\6\21\1\40\1\21\1\22\1\4\1\114\4\0\1\115"+
    "\1\116\1\52\1\35\1\117\1\75\1\21\1\72\1\112\1\50\1\4\1\120\4\0\1\73\2\0\1"+
    "\24\1\4\1\114\1\121\1\122\1\21\1\35\3\21\1\25\1\35\1\21\1\27\2\21\1\35\3\21"+
    "\1\25\1\31\7\0\10\21\1\4\1\114\10\21\1\4\1\123\4\21\1\34\1\20\5\21\1\124\51"+
    "\21\1\77\1\22\1\77\5\21\1\77\4\21\1\77\1\22\1\77\1\21\1\22\7\21\1\77\10\21"+
    "\1\46\4\0\2\21\2\0\12\21\2\50\1\35\114\21\1\43\2\21\1\125\2\21\1\40\11\21"+
    "\1\76\1\21\1\73\1\21\1\27\1\25\1\0\2\21\1\25\1\0\2\21\1\51\1\0\1\21\1\27\1"+
    "\126\1\0\12\21\1\127\1\130\1\4\1\114\3\0\1\131\1\4\1\114\13\21\1\0\5\21\1"+
    "\40\10\21\1\50\1\0\3\21\1\22\1\21\1\51\1\21\1\51\1\70\1\4\3\21\1\50\1\25\1"+
    "\0\5\21\1\51\3\21\1\24\1\4\1\114\4\0\3\21\1\51\7\21\1\22\3\21\1\43\1\4\1\114"+
    "\1\4\1\114\1\60\1\0\1\21\1\22\10\0\11\21\1\51\1\4\1\114\1\0\1\132\1\51\1\0"+
    "\6\21\1\4\1\47\6\21\1\51\1\0\7\21\1\0\1\4\1\133\1\4\1\47\3\21\1\50\1\21\1"+
    "\73\10\0\1\124\3\21\1\22\1\24\36\21\1\50\1\132\42\21\2\50\4\21\2\50\1\21\1"+
    "\134\3\21\1\50\6\21\1\27\1\112\1\135\1\25\1\136\1\51\1\21\1\25\1\135\1\25"+
    "\1\137\1\140\3\0\1\141\1\0\1\60\1\73\1\0\1\142\1\143\2\0\1\36\1\60\2\0\1\21"+
    "\1\25\6\0\4\21\1\73\1\0\1\111\1\107\1\110\1\144\1\26\1\145\1\21\1\56\1\146"+
    "\1\147\2\0\5\21\1\73\144\0\1\74\6\21\1\24\42\0\5\21\1\22\5\21\1\22\20\21\1"+
    "\25\1\132\1\51\1\0\4\21\1\34\1\20\7\21\1\60\1\0\1\60\2\21\1\22\1\0\10\22\4"+
    "\21\5\0\1\60\72\0\1\150\3\0\1\35\1\21\1\144\1\25\1\35\11\21\1\22\1\151\1\35"+
    "\12\21\1\124\1\146\4\21\1\50\1\35\12\21\1\22\2\0\3\21\1\40\6\0\170\21\1\50"+
    "\11\0\72\21\1\50\5\0\21\21\1\25\10\0\5\21\1\50\41\21\1\25\2\21\1\4\1\152\2"+
    "\0\6\21\1\124\1\34\16\21\1\24\3\0\1\60\1\21\1\107\14\21\1\54\3\21\1\22\1\21"+
    "\7\0\1\60\6\21\3\0\6\21\1\51\1\0\10\21\1\50\1\0\1\4\1\114\3\21\1\153\1\4\1"+
    "\47\3\21\1\50\4\21\1\51\1\0\3\21\1\25\10\21\1\73\1\60\1\4\1\114\2\21\1\4\1"+
    "\154\6\21\1\22\1\0\1\21\1\50\1\4\1\114\2\21\1\22\1\107\10\21\1\40\2\0\1\131"+
    "\2\21\1\155\1\0\3\156\1\0\2\22\5\21\1\124\1\50\1\0\17\21\1\157\1\4\1\114\64"+
    "\21\1\51\1\0\2\21\1\22\1\132\5\21\1\51\40\0\55\21\1\50\15\21\1\24\4\0\1\22"+
    "\1\0\1\132\1\146\1\21\1\44\1\22\1\112\1\160\15\21\1\24\3\0\1\132\54\21\1\50"+
    "\2\0\10\21\1\107\6\21\5\0\1\21\1\51\2\21\2\0\2\21\1\101\2\0\1\146\4\0\1\27"+
    "\20\21\1\25\2\0\1\4\1\114\1\35\2\21\1\63\1\35\2\21\1\40\1\74\12\21\1\22\3"+
    "\107\1\161\4\0\1\21\1\42\2\21\1\22\2\21\1\162\1\21\1\50\1\21\1\50\4\0\17\21"+
    "\1\40\10\0\6\21\1\25\20\0\1\20\20\0\3\21\1\25\6\21\1\73\1\0\1\73\3\0\4\21"+
    "\2\0\3\21\1\40\5\21\1\40\3\21\1\50\4\21\1\51\1\21\1\144\5\0\23\21\1\50\1\4"+
    "\1\114\4\21\1\51\4\21\1\51\5\21\1\0\6\21\1\51\23\0\46\21\1\22\1\0\2\21\1\50"+
    "\1\0\1\21\23\0\1\50\1\44\4\21\1\34\1\163\2\21\1\50\1\0\2\21\1\22\1\0\3\21"+
    "\1\22\10\0\2\21\1\157\1\0\2\21\1\50\1\0\3\21\1\24\10\0\7\21\1\74\10\0\1\164"+
    "\1\52\1\42\1\35\2\21\1\51\1\63\4\0\3\21\1\25\3\21\1\25\4\0\1\21\1\35\2\21"+
    "\1\22\3\0\6\21\1\50\1\0\2\21\1\50\1\0\2\21\1\40\1\0\2\21\1\24\15\0\11\21\1"+
    "\73\6\0\6\21\1\40\1\0\6\21\1\40\41\0\10\21\1\22\3\0\1\70\1\4\1\0\1\60\7\21"+
    "\1\40\2\0\3\21\1\73\1\4\1\114\6\21\1\165\1\4\2\0\4\21\1\166\1\0\10\21\1\25"+
    "\1\161\1\4\1\167\4\0\2\21\1\33\4\21\1\31\10\0\1\22\1\145\1\21\1\34\1\21\1"+
    "\73\7\21\1\40\1\4\1\114\1\42\1\43\1\54\2\21\1\44\1\71\1\56\1\43\1\66\1\102"+
    "\1\146\1\136\2\25\21\0\11\21\1\40\1\4\1\114\4\0\10\21\1\34\1\0\1\4\1\114\24"+
    "\0\6\21\1\50\1\21\1\73\2\0\1\50\4\0\10\21\1\170\1\0\1\4\1\114\4\0\7\21\1\0"+
    "\1\4\1\114\6\0\3\21\1\103\1\21\1\51\1\4\1\114\54\0\10\21\1\4\1\114\1\0\1\60"+
    "\70\0\7\21\1\73\40\0\1\21\1\44\4\21\1\22\1\21\1\73\1\0\1\4\1\114\2\0\1\107"+
    "\3\21\1\107\2\21\1\35\1\22\51\0\63\21\1\24\14\0\15\21\1\22\2\0\30\21\1\51"+
    "\27\0\5\21\1\22\72\0\10\21\1\22\67\0\7\21\1\73\3\21\1\22\1\4\1\114\14\0\3"+
    "\21\1\50\1\25\1\0\6\21\1\22\1\0\1\51\1\0\1\4\1\114\1\132\2\21\1\146\2\21\56"+
    "\0\10\21\1\25\1\0\5\21\1\22\1\0\1\60\2\21\10\0\1\73\3\0\75\21\1\25\2\0\36"+
    "\21\1\40\41\0\1\24\77\0\15\21\1\40\1\21\1\25\1\21\1\73\1\21\1\171\130\0\1"+
    "\146\1\103\1\40\1\132\1\46\1\51\3\0\1\172\22\0\1\161\67\0\12\21\1\27\10\21"+
    "\1\27\1\173\1\174\1\21\1\175\1\42\7\21\1\34\1\46\2\27\3\21\1\176\1\112\1\107"+
    "\1\44\51\21\1\50\3\21\1\44\2\21\1\124\3\21\1\124\2\21\1\27\3\21\1\27\2\21"+
    "\1\22\3\21\1\22\3\21\1\44\3\21\1\44\2\21\1\124\1\53\6\4\6\21\1\22\1\132\5"+
    "\21\1\25\1\20\1\0\1\142\2\0\1\132\1\35\1\21\52\0\1\22\2\21\1\54\1\160\1\40"+
    "\72\0\30\21\1\25\1\0\1\22\5\0\11\21\1\40\1\4\1\114\24\0\1\42\3\21\1\115\1"+
    "\35\1\124\1\177\1\111\1\200\1\115\1\134\1\115\2\124\1\67\1\21\1\33\1\21\1"+
    "\51\1\62\1\33\1\21\1\51\116\0\3\21\1\24\3\21\1\24\3\21\1\24\16\0\32\21\1\22"+
    "\5\0\106\21\1\25\1\0\33\21\1\50\120\21\1\24\53\0\3\21\1\50\134\0\36\21\2\0");

  /* The ZZ_CMAP_A table has 1032 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\11\2\1\1\11\2\0\1\1\1\17\1\7\1\10\1\12\1\56\1\0\1\5\1\22\1\6\1"+
    "\16\1\0\1\25\1\2\1\26\1\4\12\14\1\24\1\23\1\63\1\0\1\64\1\15\1\27\22\13\1"+
    "\57\1\0\1\60\1\0\1\13\1\0\1\44\1\53\1\32\1\35\1\36\1\54\1\50\1\46\1\30\1\3"+
    "\1\47\1\33\1\51\1\31\1\43\1\41\1\3\1\40\1\37\1\42\1\34\1\62\1\45\1\55\1\61"+
    "\1\52\1\20\1\0\1\21\7\0\1\1\2\0\1\1\11\0\1\4\12\0\1\4\2\0\17\4\1\0\2\4\4\0"+
    "\4\4\6\0\5\4\7\0\1\4\1\0\1\4\1\0\5\4\1\0\2\4\2\0\4\4\1\0\1\4\6\0\1\4\1\0\3"+
    "\4\1\0\1\4\1\0\4\4\1\0\13\4\1\0\1\4\1\0\7\4\1\0\1\4\7\0\2\4\1\0\2\4\1\0\4"+
    "\4\5\0\2\14\4\0\6\4\1\0\10\4\2\0\2\4\1\0\6\4\2\14\3\4\2\0\4\4\2\0\3\4\2\14"+
    "\14\4\2\0\4\4\10\0\10\4\2\0\2\14\1\4\2\0\6\4\1\0\1\4\3\0\4\4\2\0\5\4\2\0\4"+
    "\4\10\0\1\4\4\0\2\4\1\0\1\4\1\0\3\4\1\0\6\4\4\0\2\4\1\0\2\4\1\0\2\4\1\0\2"+
    "\4\2\0\1\4\1\0\3\4\2\0\3\4\3\0\4\4\1\0\1\4\7\0\2\14\1\4\1\0\2\4\1\0\5\4\1"+
    "\0\3\4\2\0\1\4\15\0\2\4\2\0\2\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1"+
    "\0\2\4\3\0\2\4\3\0\1\4\6\0\3\4\3\0\3\4\5\0\2\4\2\0\2\4\5\0\1\4\1\0\5\4\3\0"+
    "\12\4\1\0\1\4\4\0\1\4\4\0\6\4\1\0\1\4\3\0\2\4\4\0\2\14\7\0\2\4\1\0\1\4\2\0"+
    "\2\4\1\0\1\4\2\0\1\4\3\0\3\4\1\0\1\4\1\0\1\4\2\14\2\0\4\4\5\0\1\4\1\0\1\4"+
    "\1\0\1\4\4\0\2\4\2\14\4\4\2\0\3\4\1\0\4\4\1\1\10\4\1\0\2\4\4\0\4\4\3\0\1\4"+
    "\4\0\2\4\5\0\3\4\5\0\5\4\2\14\3\0\3\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4\2\0"+
    "\3\4\1\0\6\4\2\0\2\4\13\1\5\0\2\1\5\0\1\1\4\0\1\4\12\0\1\1\1\0\5\4\2\0\1\4"+
    "\1\0\4\4\1\0\1\4\5\0\5\4\4\0\1\4\1\0\1\1\4\0\3\4\1\0\2\4\2\0\3\4\2\14\2\4"+
    "\7\0\1\4\1\0\1\4\2\0\2\14\5\4\3\0\5\4\2\0\6\4\1\0\3\4\1\0\2\4\2\0\2\4\1\0"+
    "\2\4\1\0\2\4\2\0\3\4\3\0\3\4\1\0\2\4\1\0\2\4\3\0\1\4\2\0\5\4\1\0\2\4\1\0\5"+
    "\4\1\0\2\14\4\4\2\0\1\4\1\0\2\14\1\4\1\0\1\4\3\0\1\4\3\0\1\4\3\0\2\4\3\0\2"+
    "\4\3\0\4\4\4\0\1\4\2\0\2\4\2\0\4\4\1\0\4\4\1\0\1\4\1\0\5\4\1\0\4\4\2\0\1\4"+
    "\1\0\1\4\5\0\1\4\1\0\1\4\1\0\3\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\6\3\1\1\1\22\2\23\1\10\1\24"+
    "\1\20\1\25\6\22\1\10\1\26\1\20\13\22\1\27"+
    "\1\1\1\22\1\1\1\30\1\4\1\6\7\3\1\31"+
    "\1\23\10\22\1\23\1\0\16\22\1\32\2\22\4\0"+
    "\10\3\10\22\1\33\1\34\1\35\22\22\4\0\3\3"+
    "\1\36\4\3\3\22\1\37\5\22\1\40\1\41\12\22"+
    "\1\42\1\22\1\43\2\22\4\0\2\3\1\44\3\3"+
    "\1\45\2\22\1\46\3\22\1\47\4\22\1\50\6\22"+
    "\1\51\2\22\4\0\2\3\1\52\3\3\3\22\1\53"+
    "\1\22\1\54\1\55\1\22\1\56\1\22\1\57\5\22"+
    "\1\60\1\61\3\0\6\3\2\22\1\62\3\22\1\63"+
    "\2\22\1\64\1\22\3\0\6\3\1\65\2\22\1\66"+
    "\1\67\3\22\1\70\1\71\1\0\1\72\2\3\1\73"+
    "\3\3\1\74\2\22\1\75\1\76\1\77\5\3\1\100"+
    "\1\22\1\101\4\3\1\22\4\3\1\102\5\3\1\103"+
    "\7\3\1\104\1\3\1\105\6\3\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\237\0\u01a8\0\u01dd\0\u013e\0\237\0\237\0\237\0\237"+
    "\0\237\0\237\0\237\0\u013e\0\237\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\237\0\237\0\237\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d"+
    "\0\u0562\0\u0597\0\237\0\u05cc\0\u0601\0\u0636\0\u066b\0\u06a0"+
    "\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\237"+
    "\0\u0848\0\u087d\0\u08b2\0\u0109\0\237\0\237\0\u08e7\0\u091c"+
    "\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0350\0\u0424\0\u0a5a"+
    "\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\237"+
    "\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5"+
    "\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d"+
    "\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\237\0\237"+
    "\0\u0385\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e"+
    "\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6"+
    "\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e"+
    "\0\u18a3\0\u18d8\0\u013e\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1"+
    "\0\u1a16\0\u1a4b\0\u0385\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54"+
    "\0\u0385\0\u0385\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92"+
    "\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u0385\0\u1d9b\0\u0385\0\u1dd0"+
    "\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u013e"+
    "\0\u1f78\0\u1fad\0\u1fe2\0\u013e\0\u2017\0\u204c\0\u0385\0\u2081"+
    "\0\u20b6\0\u20eb\0\u0385\0\u2120\0\u2155\0\u218a\0\u21bf\0\u0385"+
    "\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u0385\0\u2332"+
    "\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u013e"+
    "\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u0385\0\u2618"+
    "\0\u0385\0\u0385\0\u264d\0\u0385\0\u2682\0\u0385\0\u26b7\0\u26ec"+
    "\0\u2721\0\u2756\0\u278b\0\u0385\0\237\0\u27c0\0\u27f5\0\u282a"+
    "\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2"+
    "\0\u0385\0\u2a07\0\u2a3c\0\u2a71\0\u0385\0\u2aa6\0\u2adb\0\u0385"+
    "\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83"+
    "\0\u2cb8\0\u2ced\0\u013e\0\u2d22\0\u2d57\0\u0385\0\u0385\0\u2d8c"+
    "\0\u2dc1\0\u2df6\0\u0385\0\237\0\u2e2b\0\237\0\u2e60\0\u2e95"+
    "\0\u013e\0\u2eca\0\u2eff\0\u2f34\0\u0385\0\u2f69\0\u2f9e\0\u0385"+
    "\0\u0385\0\237\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7\0\u0385"+
    "\0\u30dc\0\u013e\0\u3111\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a"+
    "\0\u324f\0\u3284\0\u32b9\0\u0385\0\u32ee\0\u3323\0\u3358\0\u338d"+
    "\0\u33c2\0\u013e\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500"+
    "\0\u3535\0\u013e\0\u356a\0\u013e\0\u359f\0\u35d4\0\u3609\0\u363e"+
    "\0\u3673\0\u36a8\0\u013e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13"+
    "\1\5\1\4\3\7\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\7\1\27"+
    "\3\7\1\30\2\7\1\31\2\7\1\32\7\7\1\33"+
    "\1\7\3\4\4\7\1\4\1\5\1\34\1\35\2\4"+
    "\1\11\1\4\1\13\1\5\2\35\1\36\1\37\1\40"+
    "\1\15\1\16\1\41\1\20\1\21\1\4\1\23\1\42"+
    "\1\43\1\44\1\35\1\45\3\35\1\46\2\35\1\47"+
    "\2\35\1\50\7\35\1\51\1\35\3\4\2\35\3\4"+
    "\1\5\1\4\1\35\2\4\1\11\1\4\1\13\1\5"+
    "\2\35\1\36\1\37\1\52\1\15\1\53\1\41\1\20"+
    "\1\21\1\4\1\23\1\54\1\43\1\55\1\56\1\57"+
    "\1\60\1\35\1\61\1\35\1\62\1\63\1\64\1\65"+
    "\1\35\1\50\6\35\1\66\1\67\1\35\1\70\1\71"+
    "\1\4\1\35\1\72\1\73\1\4\66\0\1\5\7\0"+
    "\1\5\55\0\1\7\1\74\1\7\6\0\4\7\7\0"+
    "\1\7\1\0\26\74\3\0\2\74\2\7\2\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\26\7\3\0\4\7"+
    "\1\0\4\10\1\75\1\10\2\0\1\10\1\0\4\10"+
    "\3\0\1\10\3\0\1\10\1\0\26\10\3\0\4\10"+
    "\1\0\4\12\1\0\1\12\1\76\1\0\1\12\1\0"+
    "\4\12\3\0\1\12\3\0\1\12\1\0\26\12\3\0"+
    "\4\12\11\13\1\0\53\13\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\1\7\1\77\24\7\3\0\4\7"+
    "\2\0\3\7\6\0\4\7\7\0\1\7\1\0\3\7"+
    "\1\100\22\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\1\7\1\101\24\7\3\0\4\7"+
    "\2\0\3\7\6\0\4\7\7\0\1\7\1\0\4\7"+
    "\1\102\21\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\3\7\1\103\17\7\1\104\2\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\1\105\25\7\3\0\4\7\3\0\1\106\24\0"+
    "\26\106\3\0\2\106\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\26\35\3\0\2\35\5\0\1\36\6\0"+
    "\3\36\1\37\1\107\11\0\26\36\3\0\2\36\5\0"+
    "\1\36\6\0\3\36\13\0\26\36\3\0\2\36\5\0"+
    "\1\36\6\0\3\36\1\0\1\37\11\0\26\36\3\0"+
    "\2\36\5\0\1\35\6\0\3\35\1\37\1\107\11\0"+
    "\1\35\1\110\17\35\1\111\4\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\3\35\1\112"+
    "\22\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\1\35\1\113\23\35\1\114\3\0\2\35"+
    "\5\0\1\35\6\0\3\35\1\37\1\107\11\0\4\35"+
    "\1\115\21\35\3\0\2\35\5\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\23\35\1\116\2\35\3\0\2\35"+
    "\5\0\1\35\6\0\3\35\1\37\1\107\11\0\1\117"+
    "\25\35\3\0\2\35\5\0\1\36\6\0\3\36\1\0"+
    "\1\120\11\0\26\36\3\0\2\36\30\0\1\121\41\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\1\35\1\122"+
    "\24\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\14\35\1\123\11\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\16\35\1\124"+
    "\7\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\13\35\1\125\12\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\13\35\1\126"+
    "\12\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\12\35\1\127\3\35\1\130\7\35\3\0"+
    "\1\131\1\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\6\35\1\132\17\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\4\35\1\115\3\35"+
    "\1\133\15\35\3\0\2\35\5\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\10\35\1\134\15\35\3\0\2\35"+
    "\5\0\1\35\6\0\3\35\1\37\1\107\11\0\13\35"+
    "\1\135\12\35\3\0\1\136\1\35\5\0\1\35\6\0"+
    "\3\35\1\37\1\107\11\0\1\117\2\35\1\137\22\35"+
    "\3\0\2\35\62\0\1\140\7\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\13\35\1\141\1\142\11\35\3\0"+
    "\2\35\32\0\1\143\1\0\1\144\16\0\1\145\2\0"+
    "\1\146\12\0\3\7\6\0\4\7\7\0\1\7\1\0"+
    "\2\7\1\147\7\7\1\150\13\7\3\0\4\7\2\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\14\7\1\151"+
    "\11\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\4\7\1\152\21\7\3\0\4\7\2\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\23\7\1\153"+
    "\2\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\3\7\1\154\22\7\3\0\4\7\2\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\7\7\1\155"+
    "\16\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\1\7\1\156\24\7\3\0\4\7\3\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\12\35\1\157"+
    "\13\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\11\35\1\160\14\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\14\35\1\161"+
    "\11\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\4\35\1\162\21\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\12\35\1\163"+
    "\13\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\23\35\1\164\2\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\7\35\1\165"+
    "\16\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\1\35\1\166\24\35\3\0\2\35\5\0"+
    "\1\36\6\0\3\36\1\0\1\167\11\0\26\36\3\0"+
    "\2\36\30\0\1\170\41\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\12\35\1\171\13\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\12\35\1\172"+
    "\13\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\14\35\1\173\11\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\1\35\1\174"+
    "\24\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\4\35\1\175\21\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\10\35\1\176"+
    "\3\35\1\177\11\35\3\0\2\35\5\0\1\35\6\0"+
    "\3\35\1\37\1\107\11\0\13\35\1\200\12\35\3\0"+
    "\2\35\5\0\1\35\6\0\3\35\1\37\1\107\11\0"+
    "\1\35\1\201\24\35\3\0\2\35\5\0\1\35\6\0"+
    "\3\35\1\37\1\107\11\0\12\35\1\202\13\35\3\0"+
    "\2\35\5\0\1\35\6\0\3\35\1\37\1\107\11\0"+
    "\1\203\12\35\1\204\12\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\14\35\1\205\11\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\13\35\1\206\12\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\12\35\1\207\13\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\13\35\1\210\12\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\1\211\2\35\1\212"+
    "\22\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\3\35\1\213\22\35\3\0\2\35\33\0"+
    "\1\214\66\0\1\215\67\0\1\216\56\0\1\217\36\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\3\7\1\220"+
    "\22\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\6\7\1\221\17\7\3\0\4\7\2\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\7\7\1\222"+
    "\16\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\21\7\1\223\4\7\3\0\4\7\2\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\3\7\1\224"+
    "\22\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\13\7\1\225\12\7\3\0\4\7\2\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\12\7\1\226"+
    "\13\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\14\7\1\227\11\7\3\0\4\7\3\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\6\35\1\230"+
    "\17\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\3\35\1\231\22\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\7\35\1\232"+
    "\16\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\21\35\1\233\4\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\6\35\1\234"+
    "\17\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\3\35\1\235\22\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\12\35\1\236"+
    "\13\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\14\35\1\237\11\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\1\240\25\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\10\35\1\241\15\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\20\35\1\242\5\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\23\35\1\243\2\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\1\244\25\35\3\0"+
    "\2\35\5\0\1\35\6\0\3\35\1\37\1\107\11\0"+
    "\12\35\1\245\13\35\3\0\2\35\5\0\1\35\6\0"+
    "\3\35\1\37\1\107\11\0\10\35\1\246\15\35\3\0"+
    "\2\35\5\0\1\35\6\0\3\35\1\37\1\107\11\0"+
    "\2\35\1\247\23\35\3\0\2\35\5\0\1\35\6\0"+
    "\3\35\1\37\1\107\11\0\4\35\1\250\21\35\3\0"+
    "\2\35\5\0\1\35\6\0\3\35\1\37\1\107\11\0"+
    "\26\35\3\0\1\35\1\251\5\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\12\35\1\252\13\35\3\0\2\35"+
    "\5\0\1\35\6\0\3\35\1\37\1\107\11\0\1\35"+
    "\1\253\24\35\3\0\2\35\5\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\3\35\1\254\22\35\3\0\2\35"+
    "\5\0\1\35\6\0\3\35\1\37\1\107\11\0\6\35"+
    "\1\255\17\35\3\0\2\35\5\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\14\35\1\256\11\35\3\0\2\35"+
    "\5\0\1\35\6\0\3\35\1\37\1\107\11\0\5\35"+
    "\1\257\20\35\3\0\2\35\5\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\14\35\1\260\11\35\3\0\2\35"+
    "\5\0\1\35\6\0\3\35\1\37\1\107\11\0\4\35"+
    "\1\261\21\35\3\0\2\35\32\0\1\262\64\0\1\263"+
    "\76\0\1\264\60\0\1\265\30\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\4\7\1\266\21\7\3\0\4\7"+
    "\2\0\3\7\6\0\4\7\7\0\1\7\1\0\10\7"+
    "\1\267\15\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\7\7\1\270\16\7\3\0\4\7"+
    "\2\0\3\7\6\0\4\7\7\0\1\7\1\0\1\271"+
    "\25\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\15\7\1\272\10\7\3\0\4\7\2\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\10\7\1\273"+
    "\15\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\3\7\1\274\22\7\3\0\4\7\3\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\10\35\1\275"+
    "\15\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\6\35\1\276\17\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\7\35\1\277"+
    "\16\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\1\35\1\300\24\35\3\0\2\35\5\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\1\301\25\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\10\35\1\302\15\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\3\35\1\303\22\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\26\35\3\0\1\35\1\304\5\0\1\35\6\0"+
    "\3\35\1\37\1\107\11\0\3\35\1\305\22\35\3\0"+
    "\2\35\5\0\1\35\6\0\3\35\1\37\1\107\11\0"+
    "\2\35\1\306\23\35\3\0\2\35\5\0\1\35\6\0"+
    "\3\35\1\37\1\107\11\0\1\307\25\35\3\0\2\35"+
    "\5\0\1\35\6\0\3\35\1\37\1\107\11\0\12\35"+
    "\1\310\13\35\3\0\2\35\5\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\16\35\1\311\7\35\3\0\2\35"+
    "\5\0\1\35\6\0\3\35\1\37\1\107\11\0\10\35"+
    "\1\312\15\35\3\0\2\35\5\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\14\35\1\313\11\35\3\0\2\35"+
    "\5\0\1\35\6\0\3\35\1\37\1\107\11\0\6\35"+
    "\1\314\17\35\3\0\2\35\5\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\7\35\1\315\16\35\3\0\2\35"+
    "\5\0\1\35\6\0\3\35\1\37\1\107\11\0\6\35"+
    "\1\316\17\35\3\0\2\35\5\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\12\35\1\317\13\35\3\0\2\35"+
    "\5\0\1\35\6\0\3\35\1\37\1\107\11\0\12\35"+
    "\1\320\13\35\3\0\2\35\5\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\6\35\1\321\17\35\3\0\2\35"+
    "\44\0\1\322\53\0\1\323\101\0\1\324\51\0\1\325"+
    "\33\0\3\7\6\0\4\7\7\0\1\7\1\0\5\7"+
    "\1\326\20\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\24\7\1\327\1\7\3\0\4\7"+
    "\2\0\3\7\6\0\4\7\7\0\1\7\1\0\2\7"+
    "\1\330\23\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\7\7\1\331\3\7\1\332\12\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\14\7\1\333\11\7\3\0\4\7\3\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\24\35\1\334\1\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\21\35\1\335\4\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\5\35\1\336\20\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\2\35\1\337\23\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\14\35\1\340\11\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\6\35\1\341\17\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\6\35\1\342\17\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\12\35\1\343\13\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\2\35\1\344\23\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\10\35\1\345\15\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\1\35\1\346\24\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\12\35\1\347\13\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\2\35\1\350\23\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\1\351\25\35\3\0\2\35\5\0\1\35\6\0"+
    "\3\35\1\37\1\107\11\0\14\35\1\352\11\35\3\0"+
    "\2\35\5\0\1\35\6\0\3\35\1\37\1\107\11\0"+
    "\1\353\25\35\3\0\2\35\5\0\1\35\6\0\3\35"+
    "\1\37\1\107\11\0\7\35\1\354\16\35\3\0\2\35"+
    "\66\0\1\355\30\0\1\356\77\0\1\357\56\0\1\360"+
    "\31\0\3\7\6\0\4\7\7\0\1\7\1\0\6\7"+
    "\1\361\17\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\14\7\1\362\11\7\3\0\4\7"+
    "\2\0\3\7\6\0\4\7\7\0\1\7\1\0\16\7"+
    "\1\363\7\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\11\7\1\364\11\7\1\365\2\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\2\7\1\366\23\7\3\0\4\7\3\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\14\35\1\367\11\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\6\35\1\370\17\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\7\35\1\371\16\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\2\35\1\372\23\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\24\35\1\373\1\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\13\35\1\374\12\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\6\35\1\375\17\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\12\35\1\376\13\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\6\35\1\377\17\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\1\35\1\u0100\24\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\3\35\1\u0101\22\35"+
    "\3\0\2\35\44\0\1\u0102\57\0\1\u0103\66\0\1\u0104"+
    "\27\0\3\7\6\0\4\7\7\0\1\7\1\0\2\7"+
    "\1\u0105\2\7\1\u0106\20\7\3\0\4\7\2\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\2\7\1\u0107\23\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\10\7\1\u0108\15\7\3\0\4\7\2\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\12\7\1\u0109\13\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\24\7\1\u010a\1\7\3\0\4\7\2\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\12\7\1\u010b\13\7"+
    "\3\0\4\7\3\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\2\35\1\u010c\23\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\1\35\1\u010d\24\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\12\35\1\u010e\13\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\11\35\1\u010f\14\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\1\35\1\u0110\24\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\6\35\1\u0111\17\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\1\35\1\u0112\24\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\6\35\1\u0113\17\35"+
    "\3\0\2\35\66\0\1\u0114\37\0\1\u0115\111\0\1\u0116"+
    "\2\0\3\7\6\0\4\7\7\0\1\7\1\0\13\7"+
    "\1\u0117\12\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\6\7\1\u0118\17\7\3\0\4\7"+
    "\2\0\3\7\6\0\4\7\7\0\1\7\1\0\6\7"+
    "\1\u0119\17\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\1\u011a\25\7\3\0\4\7\2\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\1\u011b\25\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\4\7\1\u011c\21\7\3\0\4\7\3\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\6\35\1\u011d\17\35"+
    "\3\0\2\35\5\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\12\35\1\u011e\13\35\3\0\2\35\5\0\1\35"+
    "\6\0\3\35\1\37\1\107\11\0\1\u011f\25\35\3\0"+
    "\2\35\5\0\1\35\6\0\3\35\1\37\1\107\11\0"+
    "\5\35\1\u0120\20\35\3\0\2\35\5\0\1\35\6\0"+
    "\3\35\1\37\1\107\11\0\12\35\1\u0121\13\35\3\0"+
    "\2\35\66\0\1\u0122\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\5\7\1\u0123\20\7\3\0\4\7\2\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\7\7\1\u0124"+
    "\16\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\1\7\1\u0125\24\7\3\0\4\7\2\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\21\7\1\u0126"+
    "\4\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\7\7\1\u0127\16\7\3\0\4\7\3\0"+
    "\1\35\6\0\3\35\1\37\1\107\11\0\7\35\1\u0128"+
    "\16\35\3\0\2\35\5\0\1\35\6\0\3\35\1\37"+
    "\1\107\11\0\22\35\1\u0129\3\35\3\0\2\35\4\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\6\7\1\u012a"+
    "\17\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\2\7\1\u012b\23\7\3\0\4\7\2\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\17\7\1\u012c"+
    "\6\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\1\u012d\25\7\3\0\4\7\2\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\2\7\1\u012e\23\7"+
    "\3\0\4\7\3\0\1\35\6\0\3\35\1\37\1\107"+
    "\11\0\6\35\1\u012f\17\35\3\0\2\35\4\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\10\7\1\u0130\15\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\1\u0131\25\7\3\0\4\7\2\0\3\7\6\0"+
    "\4\7\7\0\1\7\1\0\22\7\1\u0132\3\7\3\0"+
    "\4\7\2\0\3\7\6\0\4\7\7\0\1\7\1\0"+
    "\14\7\1\u0133\11\7\3\0\4\7\3\0\1\35\6\0"+
    "\3\35\1\37\1\107\11\0\5\35\1\u0134\20\35\3\0"+
    "\2\35\4\0\3\7\6\0\4\7\7\0\1\7\1\0"+
    "\1\u0135\25\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\1\7\1\u0136\24\7\3\0\4\7"+
    "\2\0\3\7\6\0\4\7\7\0\1\7\1\0\14\7"+
    "\1\u0137\11\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\12\7\1\u0138\13\7\3\0\4\7"+
    "\2\0\3\7\6\0\4\7\7\0\1\7\1\0\11\7"+
    "\1\u0139\14\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\20\7\1\u013a\5\7\3\0\4\7"+
    "\2\0\3\7\6\0\4\7\7\0\1\7\1\0\12\7"+
    "\1\u013b\13\7\3\0\4\7\2\0\3\7\6\0\4\7"+
    "\7\0\1\7\1\0\1\u013c\25\7\3\0\4\7\2\0"+
    "\3\7\6\0\4\7\7\0\1\7\1\0\12\7\1\u013d"+
    "\13\7\3\0\4\7\2\0\3\7\6\0\4\7\7\0"+
    "\1\7\1\0\1\u013e\25\7\3\0\4\7\2\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\13\7\1\u013f\12\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\13\7\1\u0140\12\7\3\0\4\7\2\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\13\7\1\u0141\12\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\1\7\1\u0142\24\7\3\0\4\7\2\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\10\7\1\u0143\15\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\1\7\1\u0144\24\7\3\0\4\7\2\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\2\7\1\u0145\23\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\3\7\1\u0146\22\7\3\0\4\7\2\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\14\7\1\u0147\11\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\7\7\1\u0148\16\7\3\0\4\7\2\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\7\7\1\u0149\16\7"+
    "\3\0\4\7\2\0\3\7\6\0\4\7\7\0\1\7"+
    "\1\0\6\7\1\u014a\17\7\3\0\4\7\2\0\3\7"+
    "\6\0\4\7\7\0\1\7\1\0\7\7\1\u014b\16\7"+
    "\3\0\4\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14045];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\3\1\7\11\1\1\1\11"+
    "\13\1\3\11\7\1\1\11\14\1\1\11\4\1\2\11"+
    "\22\1\1\0\16\1\1\11\2\1\4\0\20\1\2\11"+
    "\23\1\4\0\42\1\4\0\34\1\4\0\27\1\1\11"+
    "\3\0\21\1\3\0\17\1\1\11\1\0\1\11\13\1"+
    "\1\11\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ProguardR8Lexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ProguardR8Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 71: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 72: break;
          case 3: 
            { return FILE_NAME;
            } 
            // fall through
          case 73: break;
          case 4: 
            { return FILE_NAME_SINGLE_QUOTED;
            } 
            // fall through
          case 74: break;
          case 5: 
            { return RPAREN;
            } 
            // fall through
          case 75: break;
          case 6: 
            { return FILE_NAME_DOUBLE_QUOTED;
            } 
            // fall through
          case 76: break;
          case 7: 
            { return LINE_CMT;
            } 
            // fall through
          case 77: break;
          case 8: 
            { return ASTERISK;
            } 
            // fall through
          case 78: break;
          case 9: 
            { return EM;
            } 
            // fall through
          case 79: break;
          case 10: 
            { yybegin(STATE_JAVA_SECTION_BODY); return OPEN_BRACE;
            } 
            // fall through
          case 80: break;
          case 11: 
            { return CLOSE_BRACE;
            } 
            // fall through
          case 81: break;
          case 12: 
            { return LPAREN;
            } 
            // fall through
          case 82: break;
          case 13: 
            { return SEMICOLON;
            } 
            // fall through
          case 83: break;
          case 14: 
            { return COLON;
            } 
            // fall through
          case 84: break;
          case 15: 
            { return COMMA;
            } 
            // fall through
          case 85: break;
          case 16: 
            { return DOT;
            } 
            // fall through
          case 86: break;
          case 17: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return AT;
            } 
            // fall through
          case 87: break;
          case 18: 
            { return JAVA_IDENTIFIER;
            } 
            // fall through
          case 88: break;
          case 19: 
            { return JAVA_IDENTIFIER_WITH_WILDCARDS;
            } 
            // fall through
          case 89: break;
          case 20: 
            { yybegin(YYINITIAL); return CLOSE_BRACE;
            } 
            // fall through
          case 90: break;
          case 21: 
            { return AT;
            } 
            // fall through
          case 91: break;
          case 22: 
            { return OPEN_BRACE;
            } 
            // fall through
          case 92: break;
          case 23: 
            { return ANY_PRIMITIVE_TYPE;
            } 
            // fall through
          case 93: break;
          case 24: 
            { return FLAG;
            } 
            // fall through
          case 94: break;
          case 25: 
            { yybegin(YYINITIAL); return FLAG;
            } 
            // fall through
          case 95: break;
          case 26: 
            { return ARRAY;
            } 
            // fall through
          case 96: break;
          case 27: 
            { return ANY_TYPE;
            } 
            // fall through
          case 97: break;
          case 28: 
            { return ANY_TYPE_AND_NUM_OF_ARGS;
            } 
            // fall through
          case 98: break;
          case 29: 
            { return INT;
            } 
            // fall through
          case 99: break;
          case 30: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return ENUM;
            } 
            // fall through
          case 100: break;
          case 31: 
            { return ENUM;
            } 
            // fall through
          case 101: break;
          case 32: 
            { return CHAR;
            } 
            // fall through
          case 102: break;
          case 33: 
            { return LONG;
            } 
            // fall through
          case 103: break;
          case 34: 
            { return BYTE;
            } 
            // fall through
          case 104: break;
          case 35: 
            { return VOID;
            } 
            // fall through
          case 105: break;
          case 36: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return CLASS;
            } 
            // fall through
          case 106: break;
          case 37: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return FINAL;
            } 
            // fall through
          case 107: break;
          case 38: 
            { return CLASS;
            } 
            // fall through
          case 108: break;
          case 39: 
            { return FINAL;
            } 
            // fall through
          case 109: break;
          case 40: 
            { return SHORT;
            } 
            // fall through
          case 110: break;
          case 41: 
            { return FLOAT;
            } 
            // fall through
          case 111: break;
          case 42: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return PUBLIC;
            } 
            // fall through
          case 112: break;
          case 43: 
            { return PUBLIC;
            } 
            // fall through
          case 113: break;
          case 44: 
            { return NATIVE;
            } 
            // fall through
          case 114: break;
          case 45: 
            { return DOUBLE;
            } 
            // fall through
          case 115: break;
          case 46: 
            { return STATIC;
            } 
            // fall through
          case 116: break;
          case 47: 
            { return RETURN;
            } 
            // fall through
          case 117: break;
          case 48: 
            { return VALUES;
            } 
            // fall through
          case 118: break;
          case 49: 
            { return _INIT_;
            } 
            // fall through
          case 119: break;
          case 50: 
            { return EXTENDS;
            } 
            // fall through
          case 120: break;
          case 51: 
            { return PRIVATE;
            } 
            // fall through
          case 121: break;
          case 52: 
            { return BOOLEAN;
            } 
            // fall through
          case 122: break;
          case 53: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return ABSTRACT;
            } 
            // fall through
          case 123: break;
          case 54: 
            { return ABSTRACT;
            } 
            // fall through
          case 124: break;
          case 55: 
            { return STRICTFP;
            } 
            // fall through
          case 125: break;
          case 56: 
            { return VOLATILE;
            } 
            // fall through
          case 126: break;
          case 57: 
            { return _CLINIT_;
            } 
            // fall through
          case 127: break;
          case 58: 
            { return _FIELDS_;
            } 
            // fall through
          case 128: break;
          case 59: 
            { yybegin(STATE_JAVA_SECTION_HEADER); return INTERFACE;
            } 
            // fall through
          case 129: break;
          case 60: 
            { return INTERFACE;
            } 
            // fall through
          case 130: break;
          case 61: 
            { return PROTECTED;
            } 
            // fall through
          case 131: break;
          case 62: 
            { return TRANSIENT;
            } 
            // fall through
          case 132: break;
          case 63: 
            { return _METHODS_;
            } 
            // fall through
          case 133: break;
          case 64: 
            { return IMPLEMENTS;
            } 
            // fall through
          case 134: break;
          case 65: 
            { return INCLUDECODE;
            } 
            // fall through
          case 135: break;
          case 66: 
            { return SYNCHRONIZED;
            } 
            // fall through
          case 136: break;
          case 67: 
            { return ALLOWSHRINKING;
            } 
            // fall through
          case 137: break;
          case 68: 
            { return ALLOWOBFUSCATION;
            } 
            // fall through
          case 138: break;
          case 69: 
            { return ALLOWOPTIMIZATION;
            } 
            // fall through
          case 139: break;
          case 70: 
            { return INCLUDEDESCRIPTORCLASSES;
            } 
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
