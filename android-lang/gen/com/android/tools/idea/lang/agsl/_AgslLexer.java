/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.android.tools.idea.lang.agsl;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.android.tools.idea.lang.agsl.AgslTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_AgslLexer.flex</tt>
 */
public class _AgslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\64\3\0\1\70\1\65\1\0\1\71\1\72\1\4\1\62\1"+
    "\77\1\10\1\6\1\3\1\12\1\11\1\46\1\47\1\50\5\5\1\100\1\101\1\60\1\63\1\61\1"+
    "\103\1\0\2\21\1\51\1\54\1\7\1\53\13\20\1\56\1\55\4\20\1\13\2\20\1\73\1\0\1"+
    "\74\1\67\1\17\1\0\1\22\1\26\1\31\1\42\1\30\1\35\1\15\1\44\1\25\1\20\1\41\1"+
    "\16\1\36\1\33\1\32\1\45\1\20\1\24\1\34\1\23\1\27\1\37\1\43\1\52\1\40\1\57"+
    "\1\75\1\66\1\76\1\102\6\0\1\1\32\0\1\1\77\0\12\14\46\0\12\14\14\0\12\14\20"+
    "\0\12\14\6\0\12\14\6\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\26\0\12\14\16\0\62\14");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\5\24\7\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\1\37\1\40\1\41\1\42\2\0\12\7"+
    "\1\43\1\44\42\7\1\45\10\7\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\0\1\40\1\0\1\5"+
    "\1\65\4\7\1\66\6\7\1\67\22\7\1\70\16\7"+
    "\1\71\22\7\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\7\1\100\2\7\1\101\3\7\1\102\1\103\1\104"+
    "\6\7\1\105\5\7\1\106\1\107\2\7\1\110\16\7"+
    "\1\111\4\7\1\112\1\113\1\114\2\7\1\115\1\116"+
    "\1\117\1\7\1\120\5\7\1\121\13\7\1\122\1\7"+
    "\1\123\1\124\1\125\1\126\1\7\1\127\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\2\7\1\137\1\7"+
    "\1\140\2\7\1\141\12\7\1\142\1\143\1\144\1\145"+
    "\1\146\1\147\1\150\6\7\1\151\1\152\1\153\1\154"+
    "\1\155\1\156\1\157\1\160\1\161\1\162\1\163\6\7"+
    "\1\164\1\165\5\7\1\166\2\7\1\167\3\7\1\170"+
    "\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\200"+
    "\5\7\1\201\3\7\1\202\1\7\1\203\2\7\1\204"+
    "\2\7\1\205\1\206\12\7\1\207\1\210\1\7\1\211"+
    "\1\212\1\213\1\214\1\215\2\7\1\216\2\7\1\217"+
    "\1\220\1\7\1\221\1\7\1\222\4\7\1\223\1\224"+
    "\1\225\1\226\1\7\1\227\1\230\1\231\1\7\1\232"+
    "\1\233\1\234\1\7\1\235\1\7\1\236\6\7\1\237"+
    "\4\7\1\240\6\7\1\241\1\242\3\7\1\243\1\244"+
    "\4\7\1\245";

  private static int [] zzUnpackAction() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\104\0\u0aa0\0\u0ae4\0\104\0\104\0\u0b28"+
    "\0\104\0\104\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0"+
    "\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u01dc"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc"+
    "\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c"+
    "\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\104\0\u1a90\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\104"+
    "\0\104\0\104\0\u1ad4\0\u1b18\0\u1b18\0\u0bb0\0\u1b5c\0\u1ba0"+
    "\0\u1be4\0\u1c28\0\u1c6c\0\u01dc\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c"+
    "\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc"+
    "\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc"+
    "\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc"+
    "\0\u2640\0\u2684\0\u26c8\0\u270c\0\u01dc\0\u2750\0\u2794\0\u27d8"+
    "\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8"+
    "\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\104"+
    "\0\104\0\104\0\u01dc\0\u01dc\0\u01dc\0\u2c18\0\u01dc\0\u2c5c"+
    "\0\u2ca0\0\u01dc\0\u2ce4\0\u2d28\0\u2d6c\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c"+
    "\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u01dc\0\u01dc\0\u30e0\0\u3124"+
    "\0\u01dc\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300"+
    "\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u01dc"+
    "\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u01dc\0\u01dc\0\u01dc\0\u3630"+
    "\0\u3674\0\u01dc\0\u01dc\0\u01dc\0\u36b8\0\u01dc\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960"+
    "\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u01dc"+
    "\0\u3b80\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u3bc4\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u3c08\0\u3c4c"+
    "\0\u01dc\0\u3c90\0\u01dc\0\u3cd4\0\u3d18\0\u01dc\0\u3d5c\0\u3da0"+
    "\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0"+
    "\0\u01dc\0\u4004\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u4048"+
    "\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u41e0\0\u4224\0\u4268\0\u01dc\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc\0\u4400\0\u01dc\0\u01dc"+
    "\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620"+
    "\0\u01dc\0\u4664\0\u46a8\0\u46ec\0\u01dc\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u4730\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u4884"+
    "\0\u48c8\0\u490c\0\u01dc\0\u4950\0\u4994\0\u49d8\0\u01dc\0\u4a1c"+
    "\0\u01dc\0\u4a60\0\u4aa4\0\u01dc\0\u4ae8\0\u4b2c\0\u01dc\0\u01dc"+
    "\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c"+
    "\0\u4d90\0\u4dd4\0\u01dc\0\u01dc\0\u4e18\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u4e5c\0\u4ea0\0\u01dc\0\u4ee4\0\u4f28\0\u01dc"+
    "\0\u01dc\0\u4f6c\0\u01dc\0\u4fb0\0\u01dc\0\u4ff4\0\u5038\0\u507c"+
    "\0\u50c0\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u5104\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u5148\0\u01dc\0\u518c\0\u01dc\0\u51d0\0\u5214\0\u5258"+
    "\0\u01dc\0\u529c\0\u52e0\0\u5324\0\u5368\0\u53ac\0\u53f0\0\u01dc"+
    "\0\u5434\0\u5478\0\u54bc\0\u5500\0\u01dc\0\u5544\0\u5588\0\u55cc"+
    "\0\u5610\0\u5654\0\u5698\0\u56dc\0\u01dc\0\u5720\0\u5764\0\u57a8"+
    "\0\u01dc\0\u01dc\0\u57ec\0\u5830\0\u5874\0\u58b8\0\u01dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\10\1\2\1\14\1\15\3\10\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\10\1\34\1\35"+
    "\1\36\1\37\3\6\7\10\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\105\0\2\3\104\0\1\64\1\65\56\0\1\66\103\0"+
    "\1\67\25\0\1\6\1\70\2\0\2\6\33\0\3\6"+
    "\40\0\1\70\3\0\2\70\33\0\3\70\40\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\43\10\34\0\1\71"+
    "\52\0\1\72\25\0\1\6\1\70\1\73\1\0\2\6"+
    "\15\0\1\73\15\0\3\6\40\0\1\6\1\70\2\0"+
    "\2\6\1\74\32\0\3\6\1\0\1\74\36\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\1\10\1\75\13\10"+
    "\1\76\25\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\15\10\1\77\25\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\6\10\1\100\10\10\1\101\23\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\7\10"+
    "\1\102\3\10\1\103\7\10\1\104\3\10\1\105\13\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\13\10"+
    "\1\106\27\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\16\10\1\107\1\10\1\110\1\10\1\111\20\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\1\10"+
    "\1\112\5\10\1\113\5\10\1\114\4\10\1\115\20\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\16\10"+
    "\1\116\1\117\23\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\1\10\1\120\14\10\1\121\16\10\1\122"+
    "\5\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\1\10\1\123\3\10\1\124\7\10\1\125\25\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\12\10\1\126"+
    "\30\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\5\10\1\127\7\10\1\130\25\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\5\10\1\131\1\132\1\10"+
    "\1\133\1\10\1\134\13\10\1\135\1\136\13\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\1\10\1\137"+
    "\3\10\1\140\2\10\1\141\4\10\1\142\4\10\1\143"+
    "\20\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\5\10\1\144\5\10\1\145\27\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\5\10\1\146\5\10\1\147"+
    "\1\10\1\150\25\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\10\10\1\151\2\10\1\152\1\10\1\153"+
    "\4\10\1\154\20\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\27\10\1\155\13\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\5\10\1\156\2\10\1\157"+
    "\11\10\1\160\20\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\5\10\1\161\1\10\1\162\2\10\1\163"+
    "\30\10\104\0\1\164\2\0\1\165\101\0\1\166\1\0"+
    "\1\167\102\0\1\170\1\171\103\0\1\172\103\0\1\173"+
    "\103\0\1\174\1\0\1\175\101\0\1\176\2\0\1\177"+
    "\100\0\1\200\3\0\1\201\77\0\1\202\20\0\2\64"+
    "\1\0\101\64\4\65\1\203\77\65\5\0\1\70\1\0"+
    "\1\73\1\0\2\70\15\0\1\73\15\0\3\70\40\0"+
    "\1\204\2\0\1\205\2\204\33\0\3\204\11\0\1\205"+
    "\26\0\1\206\1\0\1\206\1\0\2\206\1\0\1\206"+
    "\4\0\2\206\3\0\1\206\1\0\2\206\3\0\1\206"+
    "\4\0\1\206\3\0\4\206\1\0\2\206\34\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\2\10\1\207\40\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\6\10"+
    "\1\210\34\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\16\10\1\211\7\10\1\212\14\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\6\10\1\213\34\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\21\10"+
    "\1\214\21\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\12\10\1\215\30\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\21\10\1\216\21\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\30\10\1\217\12\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\10\10"+
    "\1\220\32\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\6\10\1\221\34\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\1\10\1\222\4\10\1\223\6\10"+
    "\1\224\4\10\1\225\5\10\1\226\12\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\13\10\1\227\27\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\13\10"+
    "\1\230\27\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\13\10\1\231\27\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\15\10\1\232\25\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\13\10\1\233\27\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\10\10"+
    "\1\234\6\10\1\235\23\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\10\10\1\236\32\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\17\10\1\237\23\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\12\10"+
    "\1\240\30\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\6\10\1\241\34\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\5\10\1\242\35\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\17\10\1\243\23\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\1\10"+
    "\1\244\14\10\1\245\24\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\6\10\1\246\34\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\21\10\1\247\21\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\10\10"+
    "\1\250\32\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\21\10\1\251\21\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\5\10\1\252\1\10\1\253\33\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\42\10"+
    "\1\254\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\30\10\1\255\12\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\10\10\1\256\32\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\5\10\1\257\7\10\1\260"+
    "\25\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\5\10\1\261\7\10\1\262\25\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\1\10\1\263\41\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\35\10\1\264"+
    "\5\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\7\10\1\265\33\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\13\10\1\266\27\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\6\10\1\267\34\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\25\10\1\270"+
    "\15\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\7\10\1\271\33\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\14\10\1\272\26\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\1\10\1\273\6\10\1\274"+
    "\32\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\17\10\1\275\23\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\20\10\1\276\22\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\12\10\1\277\30\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\13\10\1\300"+
    "\27\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\10\10\1\301\32\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\1\10\1\302\41\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\1\303\42\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\13\10\1\304\27\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\14\10"+
    "\1\305\26\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\13\10\1\306\27\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\11\10\1\307\31\10\107\0\1\310"+
    "\103\0\1\311\20\0\3\65\1\312\1\203\77\65\5\0"+
    "\1\204\3\0\2\204\33\0\3\204\40\0\1\207\1\0"+
    "\1\207\1\0\3\207\1\0\43\207\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\15\10\1\313\25\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\1\314\42\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\30\10"+
    "\1\315\12\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\7\10\1\316\33\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\13\10\1\317\27\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\30\10\1\320\12\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\13\10"+
    "\1\321\27\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\17\10\1\322\23\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\12\10\1\323\30\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\10\10\1\324\32\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\13\10"+
    "\1\325\15\10\1\326\1\327\1\330\7\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\12\10\1\331\30\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\5\10"+
    "\1\332\35\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\12\10\1\333\30\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\14\10\1\334\26\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\16\10\1\335\24\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\5\10"+
    "\1\336\35\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\337\41\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\14\10\1\340\26\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\15\10\1\341\2\10"+
    "\1\342\22\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\10\10\1\343\32\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\16\10\1\344\24\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\13\10\1\345\27\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\21\10"+
    "\1\346\21\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\13\10\1\347\27\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\17\10\1\350\23\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\6\10\1\351\34\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\15\10"+
    "\1\352\25\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\6\10\1\353\10\10\1\354\23\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\30\10\1\355\12\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\13\10"+
    "\1\356\27\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\16\10\1\357\24\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\30\10\1\360\12\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\6\10\1\361\34\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\12\10"+
    "\1\362\30\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\13\10\1\363\27\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\13\10\1\364\27\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\6\10\1\365\34\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\25\10"+
    "\1\366\15\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\7\10\1\367\33\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\6\10\1\370\34\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\5\10\1\371\35\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\17\10"+
    "\1\372\23\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\13\10\1\373\27\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\14\10\1\374\26\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\31\10\1\375\1\376"+
    "\1\377\7\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\10\10\1\u0100\32\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\23\10\1\u0101\17\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\31\10\1\u0102\1\u0103"+
    "\1\u0104\7\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\5\10\1\u0105\35\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\25\10\1\u0106\15\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\14\10\1\u0107\26\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\5\10"+
    "\1\u0108\35\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\11\10\1\u0109\31\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\14\10\1\u010a\26\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\1\10\1\u010b\41\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\20\10"+
    "\1\u010c\22\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\27\10\1\u010d\13\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\14\10\1\u010e\26\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\24\10\1\u010f\16\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\14\10"+
    "\1\u0110\26\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\u0111\41\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\10\10\1\u0112\32\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\1\10\1\u0113\41\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\25\10"+
    "\1\u0114\15\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\7\10\1\u0115\33\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\16\10\1\u0116\24\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\7\10\1\u0117\33\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\6\10"+
    "\1\u0118\34\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\7\10\1\u0119\33\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\6\10\1\u011a\34\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\31\10\1\u011b\1\u011c"+
    "\1\u011d\7\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\25\10\1\u011e\15\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\24\10\1\u011f\16\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\31\10\1\u0120\1\u0121"+
    "\1\u0122\7\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\31\10\1\u0123\1\u0124\1\u0125\7\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\16\10\1\u0126\24\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\15\10"+
    "\1\u0127\25\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\1\u0128\42\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\1\u0129\42\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\7\10\1\u012a\33\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\17\10\1\u012b\23\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\7\10"+
    "\1\u012c\33\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\10\10\1\u012d\32\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\6\10\1\u012e\34\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\12\10\1\u012f\30\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\17\10"+
    "\1\u0130\23\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\u0131\41\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\1\10\1\u0132\41\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\10\10\1\u0133\32\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\14\10"+
    "\1\u0134\26\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\15\10\1\u0135\25\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\7\10\1\u0136\33\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\14\10\1\u0137\26\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\13\10"+
    "\1\u0138\27\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\6\10\1\u0139\34\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\6\10\1\u013a\34\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\13\10\1\u013b\27\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\25\10"+
    "\1\u013c\15\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\31\10\1\u013d\1\u013e\1\u013f\7\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\12\10\1\u0140\30\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\10\10"+
    "\1\u0141\32\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\6\10\1\u0142\34\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\5\10\1\u0143\35\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\12\10\1\u0144\30\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\1\10"+
    "\1\u0145\41\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\31\10\1\u0146\1\u0147\1\u0148\7\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\13\10\1\u0149\27\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\31\10"+
    "\1\u014a\1\u014b\1\u014c\7\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\30\10\1\u014d\12\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\31\10\1\u014e\1\u014f"+
    "\1\u0150\7\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\13\10\1\u0151\27\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\10\10\1\u0152\32\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\10\10\1\u0153\32\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\11\10"+
    "\1\u0154\31\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\5\10\1\u0155\35\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\13\10\1\u0156\27\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\16\10\1\u0157\24\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\13\10"+
    "\1\u0158\27\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\20\10\1\u0159\22\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\10\10\1\u015a\32\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\13\10\1\u015b\27\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\7\10"+
    "\1\u015c\33\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\16\10\1\u015d\24\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\16\10\1\u015e\24\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\36\10\1\u015f\4\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\16\10"+
    "\1\u0160\24\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\6\10\1\u0161\34\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\30\10\1\u0162\12\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\10\10\1\u0163\32\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\13\10"+
    "\1\u0164\27\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\14\10\1\u0165\26\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\6\10\1\u0166\34\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\20\10\1\u0167\22\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\30\10"+
    "\1\u0168\12\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\27\10\1\u0169\13\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\7\10\1\u016a\33\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\31\10\1\u016b\1\u016c"+
    "\1\u016d\7\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\21\10\1\u016e\21\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\16\10\1\u016f\24\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\10\10\1\u0170\32\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\7\10"+
    "\1\u0171\33\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\1\10\1\u0172\41\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\13\10\1\u0173\27\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\35\10\1\u0174\5\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\35\10"+
    "\1\u0175\5\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\35\10\1\u0176\5\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\25\10\1\u0177\15\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\17\10\1\u0178\23\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\14\10"+
    "\1\u0179\26\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\12\10\1\u017a\30\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\6\10\1\u017b\34\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\20\10\1\u017c\22\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\5\10"+
    "\1\u017d\35\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\5\10\1\u017e\35\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\7\10\1\u017f\33\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\21\10\1\u0180\21\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\13\10"+
    "\1\u0181\27\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\5\10\1\u0182\35\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\10\10\1\u0183\32\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\12\10\1\u0184\30\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\5\10"+
    "\1\u0185\35\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\16\10\1\u0186\24\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\7\10\1\u0187\33\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\35\10\1\u0188\5\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\35\10"+
    "\1\u0189\5\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\35\10\1\u018a\5\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\30\10\1\u018b\12\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\1\u018c\42\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\1\10\1\u018d"+
    "\41\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\25\10\1\u018e\15\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\6\10\1\u018f\34\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\31\10\1\u0190\11\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\32\10\1\u0191"+
    "\10\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\33\10\1\u0192\7\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\10\10\1\u0193\32\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\6\10\1\u0194\34\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\13\10\1\u0195"+
    "\27\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\14\10\1\u0196\26\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\16\10\1\u0197\24\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\25\10\1\u0198\15\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\1\10\1\u0199"+
    "\41\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\1\10\1\u019a\41\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\13\10\1\u019b\27\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\14\10\1\u019c\26\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\13\10\1\u019d"+
    "\27\10\31\0\1\10\1\0\1\10\1\0\1\u019e\2\10"+
    "\1\0\31\10\1\u019f\1\u01a0\1\10\1\u01a1\6\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\31\10\1\u01a2"+
    "\11\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\32\10\1\u01a3\10\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\33\10\1\u01a4\7\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\13\10\1\u01a5\27\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\15\10\1\u01a6"+
    "\25\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\13\10\1\u01a7\27\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\13\10\1\u01a8\27\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\6\10\1\u01a9\34\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\6\10\1\u01aa"+
    "\34\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\13\10\1\u01ab\27\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\37\10\1\u01ac\3\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\25\10\1\u01ad\11\10\1\u01ae"+
    "\3\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\37\10\1\u01af\3\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\12\10\1\u01b0\30\10\31\0\1\10\1\0"+
    "\1\10\1\0\3\10\1\0\16\10\1\u01b1\24\10\31\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\13\10\1\u01b2"+
    "\27\10\31\0\1\10\1\0\1\10\1\0\3\10\1\0"+
    "\40\10\1\u01b3\2\10\31\0\1\10\1\0\1\10\1\0"+
    "\3\10\1\0\40\10\1\u01b4\1\u01b5\1\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\41\10\1\u01b6\1\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\11\10"+
    "\1\u01b7\31\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\7\10\1\u01b8\33\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\27\10\1\u01b9\13\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\27\10\1\u01ba\13\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\13\10"+
    "\1\u01bb\27\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\13\10\1\u01bc\27\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\13\10\1\u01bd\27\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\5\10\1\u01be\35\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\5\10"+
    "\1\u01bf\35\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\14\10\1\u01c0\26\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\14\10\1\u01c1\26\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\25\10\1\u01c2\15\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\25\10"+
    "\1\u01c3\15\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\6\10\1\u01c4\34\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\6\10\1\u01c5\34\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\15\10\1\u01c6\25\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\15\10"+
    "\1\u01c7\25\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\40\10\1\u01c8\2\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\26\10\1\u01c9\14\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\26\10\1\u01ca\14\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\27\10"+
    "\1\u01cb\13\10\31\0\1\10\1\0\1\10\1\0\3\10"+
    "\1\0\5\10\1\u01cc\35\10\31\0\1\10\1\0\1\10"+
    "\1\0\3\10\1\0\25\10\1\u01cd\15\10\31\0\1\10"+
    "\1\0\1\10\1\0\3\10\1\0\15\10\1\u01ce\25\10"+
    "\31\0\1\10\1\0\1\10\1\0\3\10\1\0\26\10"+
    "\1\u01cf\14\10\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22780];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\46\1\13\11\1\1\1\0\2\11\1\1"+
    "\2\11\2\0\70\1\1\11\1\1\14\11\1\0\1\1"+
    "\1\0\102\1\3\11\u0105\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _AgslLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AgslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 166: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 167: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 168: break;
          case 4: 
            { return STAR;
            } 
            // fall through
          case 169: break;
          case 5: 
            { return INTCONSTANT;
            } 
            // fall through
          case 170: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 171: break;
          case 7: 
            { return IDENTIFIER;
            } 
            // fall through
          case 172: break;
          case 8: 
            { return DASH;
            } 
            // fall through
          case 173: break;
          case 9: 
            { return LEFT_ANGLE;
            } 
            // fall through
          case 174: break;
          case 10: 
            { return RIGHT_ANGLE;
            } 
            // fall through
          case 175: break;
          case 11: 
            { return PLUS;
            } 
            // fall through
          case 176: break;
          case 12: 
            { return EQUAL;
            } 
            // fall through
          case 177: break;
          case 13: 
            { return BANG;
            } 
            // fall through
          case 178: break;
          case 14: 
            { return AMPERSAND;
            } 
            // fall through
          case 179: break;
          case 15: 
            { return VERTICAL_BAR;
            } 
            // fall through
          case 180: break;
          case 16: 
            { return CARET;
            } 
            // fall through
          case 181: break;
          case 17: 
            { return PERCENT;
            } 
            // fall through
          case 182: break;
          case 18: 
            { return LEFT_PAREN;
            } 
            // fall through
          case 183: break;
          case 19: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 184: break;
          case 20: 
            { return LEFT_BRACKET;
            } 
            // fall through
          case 185: break;
          case 21: 
            { return RIGHT_BRACKET;
            } 
            // fall through
          case 186: break;
          case 22: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 187: break;
          case 23: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 188: break;
          case 24: 
            { return COMMA;
            } 
            // fall through
          case 189: break;
          case 25: 
            { return COLON;
            } 
            // fall through
          case 190: break;
          case 26: 
            { return SEMICOLON;
            } 
            // fall through
          case 191: break;
          case 27: 
            { return TILDE;
            } 
            // fall through
          case 192: break;
          case 28: 
            { return QUESTION;
            } 
            // fall through
          case 193: break;
          case 29: 
            { return COMMENT;
            } 
            // fall through
          case 194: break;
          case 30: 
            { return DIV_ASSIGN;
            } 
            // fall through
          case 195: break;
          case 31: 
            { return MUL_ASSIGN;
            } 
            // fall through
          case 196: break;
          case 32: 
            { return FLOATCONSTANT;
            } 
            // fall through
          case 197: break;
          case 33: 
            { return DEC_OP;
            } 
            // fall through
          case 198: break;
          case 34: 
            { return SUB_ASSIGN;
            } 
            // fall through
          case 199: break;
          case 35: 
            { return IN;
            } 
            // fall through
          case 200: break;
          case 36: 
            { return IF;
            } 
            // fall through
          case 201: break;
          case 37: 
            { return DO;
            } 
            // fall through
          case 202: break;
          case 38: 
            { return LEFT_OP;
            } 
            // fall through
          case 203: break;
          case 39: 
            { return LE_OP;
            } 
            // fall through
          case 204: break;
          case 40: 
            { return RIGHT_OP;
            } 
            // fall through
          case 205: break;
          case 41: 
            { return GE_OP;
            } 
            // fall through
          case 206: break;
          case 42: 
            { return INC_OP;
            } 
            // fall through
          case 207: break;
          case 43: 
            { return ADD_ASSIGN;
            } 
            // fall through
          case 208: break;
          case 44: 
            { return EQ_OP;
            } 
            // fall through
          case 209: break;
          case 45: 
            { return NE_OP;
            } 
            // fall through
          case 210: break;
          case 46: 
            { return AND_ASSIGN;
            } 
            // fall through
          case 211: break;
          case 47: 
            { return AND_OP;
            } 
            // fall through
          case 212: break;
          case 48: 
            { return OR_ASSIGN;
            } 
            // fall through
          case 213: break;
          case 49: 
            { return OR_OP;
            } 
            // fall through
          case 214: break;
          case 50: 
            { return XOR_ASSIGN;
            } 
            // fall through
          case 215: break;
          case 51: 
            { return XOR_OP;
            } 
            // fall through
          case 216: break;
          case 52: 
            { return MOD_ASSIGN;
            } 
            // fall through
          case 217: break;
          case 53: 
            { return IDENTIFIER_GL_PREFIX;
            } 
            // fall through
          case 218: break;
          case 54: 
            { return ASM;
            } 
            // fall through
          case 219: break;
          case 55: 
            { return INT;
            } 
            // fall through
          case 220: break;
          case 56: 
            { return OUT;
            } 
            // fall through
          case 221: break;
          case 57: 
            { return FOR;
            } 
            // fall through
          case 222: break;
          case 58: 
            { return LEFT_ASSIGN;
            } 
            // fall through
          case 223: break;
          case 59: 
            { return RIGHT_ASSIGN;
            } 
            // fall through
          case 224: break;
          case 60: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 225: break;
          case 61: 
            { return GOTO;
            } 
            // fall through
          case 226: break;
          case 62: 
            { return LONG;
            } 
            // fall through
          case 227: break;
          case 63: 
            { return LOW_PRECISION;
            } 
            // fall through
          case 228: break;
          case 64: 
            { return TRUE;
            } 
            // fall through
          case 229: break;
          case 65: 
            { return THIS;
            } 
            // fall through
          case 230: break;
          case 66: 
            { return INT2;
            } 
            // fall through
          case 231: break;
          case 67: 
            { return INT3;
            } 
            // fall through
          case 232: break;
          case 68: 
            { return INT4;
            } 
            // fall through
          case 233: break;
          case 69: 
            { return BOOL;
            } 
            // fall through
          case 234: break;
          case 70: 
            { return ELSE;
            } 
            // fall through
          case 235: break;
          case 71: 
            { return ENUM;
            } 
            // fall through
          case 236: break;
          case 72: 
            { return CAST;
            } 
            // fall through
          case 237: break;
          case 73: 
            { return FLAT;
            } 
            // fall through
          case 238: break;
          case 74: 
            { return MAT2;
            } 
            // fall through
          case 239: break;
          case 75: 
            { return MAT3;
            } 
            // fall through
          case 240: break;
          case 76: 
            { return MAT4;
            } 
            // fall through
          case 241: break;
          case 77: 
            { return VEC2;
            } 
            // fall through
          case 242: break;
          case 78: 
            { return VEC3;
            } 
            // fall through
          case 243: break;
          case 79: 
            { return VEC4;
            } 
            // fall through
          case 244: break;
          case 80: 
            { return VOID;
            } 
            // fall through
          case 245: break;
          case 81: 
            { return HALF;
            } 
            // fall through
          case 246: break;
          case 82: 
            { return INOUT;
            } 
            // fall through
          case 247: break;
          case 83: 
            { return INPUT;
            } 
            // fall through
          case 248: break;
          case 84: 
            { return IVEC2;
            } 
            // fall through
          case 249: break;
          case 85: 
            { return IVEC3;
            } 
            // fall through
          case 250: break;
          case 86: 
            { return IVEC4;
            } 
            // fall through
          case 251: break;
          case 87: 
            { return BREAK;
            } 
            // fall through
          case 252: break;
          case 88: 
            { return BOOL2;
            } 
            // fall through
          case 253: break;
          case 89: 
            { return BOOL3;
            } 
            // fall through
          case 254: break;
          case 90: 
            { return BOOL4;
            } 
            // fall through
          case 255: break;
          case 91: 
            { return BVEC2;
            } 
            // fall through
          case 256: break;
          case 92: 
            { return BVEC3;
            } 
            // fall through
          case 257: break;
          case 93: 
            { return BVEC4;
            } 
            // fall through
          case 258: break;
          case 94: 
            { return UNION;
            } 
            // fall through
          case 259: break;
          case 95: 
            { return USING;
            } 
            // fall through
          case 260: break;
          case 96: 
            { return CLASS;
            } 
            // fall through
          case 261: break;
          case 97: 
            { return CONST;
            } 
            // fall through
          case 262: break;
          case 98: 
            { return SHORT;
            } 
            // fall through
          case 263: break;
          case 99: 
            { return FLOAT;
            } 
            // fall through
          case 264: break;
          case 100: 
            { return FALSE;
            } 
            // fall through
          case 265: break;
          case 101: 
            { return FIXED;
            } 
            // fall through
          case 266: break;
          case 102: 
            { return FVEC2;
            } 
            // fall through
          case 267: break;
          case 103: 
            { return FVEC3;
            } 
            // fall through
          case 268: break;
          case 104: 
            { return FVEC4;
            } 
            // fall through
          case 269: break;
          case 105: 
            { return DVEC2;
            } 
            // fall through
          case 270: break;
          case 106: 
            { return DVEC3;
            } 
            // fall through
          case 271: break;
          case 107: 
            { return DVEC4;
            } 
            // fall through
          case 272: break;
          case 108: 
            { return WHILE;
            } 
            // fall through
          case 273: break;
          case 109: 
            { return HALF2;
            } 
            // fall through
          case 274: break;
          case 110: 
            { return HALF3;
            } 
            // fall through
          case 275: break;
          case 111: 
            { return HALF4;
            } 
            // fall through
          case 276: break;
          case 112: 
            { return HIGH_PRECISION;
            } 
            // fall through
          case 277: break;
          case 113: 
            { return HVEC2;
            } 
            // fall through
          case 278: break;
          case 114: 
            { return HVEC3;
            } 
            // fall through
          case 279: break;
          case 115: 
            { return HVEC4;
            } 
            // fall through
          case 280: break;
          case 116: 
            { return RETURN;
            } 
            // fall through
          case 281: break;
          case 117: 
            { return INLINE;
            } 
            // fall through
          case 282: break;
          case 118: 
            { return EXTERN;
            } 
            // fall through
          case 283: break;
          case 119: 
            { return OUTPUT;
            } 
            // fall through
          case 284: break;
          case 120: 
            { return STATIC;
            } 
            // fall through
          case 285: break;
          case 121: 
            { return STRUCT;
            } 
            // fall through
          case 286: break;
          case 122: 
            { return SIZEOF;
            } 
            // fall through
          case 287: break;
          case 123: 
            { return SUPERP;
            } 
            // fall through
          case 288: break;
          case 124: 
            { return SWITCH;
            } 
            // fall through
          case 289: break;
          case 125: 
            { return SHADER;
            } 
            // fall through
          case 290: break;
          case 126: 
            { return FLOAT2;
            } 
            // fall through
          case 291: break;
          case 127: 
            { return FLOAT3;
            } 
            // fall through
          case 292: break;
          case 128: 
            { return FLOAT4;
            } 
            // fall through
          case 293: break;
          case 129: 
            { return DOUBLE;
            } 
            // fall through
          case 294: break;
          case 130: 
            { return PACKED;
            } 
            // fall through
          case 295: break;
          case 131: 
            { return PUBLIC;
            } 
            // fall through
          case 296: break;
          case 132: 
            { return TYPEDEF;
            } 
            // fall through
          case 297: break;
          case 133: 
            { return BLENDER;
            } 
            // fall through
          case 298: break;
          case 134: 
            { return UNIFORM;
            } 
            // fall through
          case 299: break;
          case 135: 
            { return MEDIUM_PRECISION;
            } 
            // fall through
          case 300: break;
          case 136: 
            { return VARYING;
            } 
            // fall through
          case 301: break;
          case 137: 
            { return DISCARD;
            } 
            // fall through
          case 302: break;
          case 138: 
            { return DEFAULT;
            } 
            // fall through
          case 303: break;
          case 139: 
            { return HALF2X2;
            } 
            // fall through
          case 304: break;
          case 140: 
            { return HALF3X3;
            } 
            // fall through
          case 305: break;
          case 141: 
            { return HALF4X4;
            } 
            // fall through
          case 306: break;
          case 142: 
            { return TEMPLATE;
            } 
            // fall through
          case 307: break;
          case 143: 
            { return UNSIGNED;
            } 
            // fall through
          case 308: break;
          case 144: 
            { return EXTERNAL;
            } 
            // fall through
          case 309: break;
          case 145: 
            { return CONTINUE;
            } 
            // fall through
          case 310: break;
          case 146: 
            { return NOINLINE;
            } 
            // fall through
          case 311: break;
          case 147: 
            { return FLOAT2X2;
            } 
            // fall through
          case 312: break;
          case 148: 
            { return FLOAT3X3;
            } 
            // fall through
          case 313: break;
          case 149: 
            { return FLOAT4X4;
            } 
            // fall through
          case 314: break;
          case 150: 
            { return VOLATILE;
            } 
            // fall through
          case 315: break;
          case 151: 
            { return ATTRIBUTE;
            } 
            // fall through
          case 316: break;
          case 152: 
            { return INTERFACE;
            } 
            // fall through
          case 317: break;
          case 153: 
            { return INVARIANT;
            } 
            // fall through
          case 318: break;
          case 154: 
            { return NAMESPACE;
            } 
            // fall through
          case 319: break;
          case 155: 
            { return SAMPLER1D;
            } 
            // fall through
          case 320: break;
          case 156: 
            { return SAMPLER2D;
            } 
            // fall through
          case 321: break;
          case 157: 
            { return SAMPLER3D;
            } 
            // fall through
          case 322: break;
          case 158: 
            { return PRECISION;
            } 
            // fall through
          case 323: break;
          case 159: 
            { return COLORFILTER;
            } 
            // fall through
          case 324: break;
          case 160: 
            { return SAMPLERCUBE;
            } 
            // fall through
          case 325: break;
          case 161: 
            { return SAMPLER2DRECT;
            } 
            // fall through
          case 326: break;
          case 162: 
            { return SAMPLER3DRECT;
            } 
            // fall through
          case 327: break;
          case 163: 
            { return SAMPLER1DSHADOW;
            } 
            // fall through
          case 328: break;
          case 164: 
            { return SAMPLER2DSHADOW;
            } 
            // fall through
          case 329: break;
          case 165: 
            { return SAMPLER2DRECTSHADOW;
            } 
            // fall through
          case 330: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
