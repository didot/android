/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.tools.idea.lang.roomSql.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.android.tools.idea.lang.roomSql.psi.RoomPsiTypes.*;
import static com.android.tools.idea.lang.roomSql.psi.LiteralTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_RoomSqlLexer.flex</tt>
 */
public class _RoomSqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15760 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\21\1\54\1\21\1\25\1\55\1\56\5\21\2\25\1\57"+
    "\31\21\1\25\1\60\1\21\1\61\40\21\1\62\17\21\1\63\1\64\1\65\1\66\10\21\1\67"+
    "\2\21\1\70\10\21\123\25\1\71\7\25\1\72\1\73\37\21\1\25\1\73\u0582\21\1\74"+
    "\u017f\21");

  /* The ZZ_CMAP_Y table has 3904 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\10\1\11\1\14\1"+
    "\15\3\0\1\16\1\17\1\20\1\21\2\22\1\23\3\22\1\23\7\22\1\24\10\22\1\25\50\22"+
    "\1\26\1\22\1\27\1\30\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\22\1\37\11"+
    "\22\1\40\21\22\1\41\1\42\23\22\1\30\1\43\3\22\1\23\1\44\1\43\4\22\1\45\1\46"+
    "\4\0\1\47\1\50\1\30\3\22\2\51\1\30\1\52\1\53\1\0\1\54\5\22\1\55\2\0\1\56\1"+
    "\57\1\60\13\22\1\61\1\47\1\62\1\63\1\56\1\64\1\30\1\65\1\66\3\22\3\0\1\67"+
    "\12\22\1\70\1\0\1\71\1\30\1\56\1\72\3\22\1\55\1\73\1\21\2\22\1\70\1\74\1\75"+
    "\1\76\2\30\3\22\1\77\10\30\1\100\1\31\6\30\1\101\2\0\1\102\1\103\6\22\1\104"+
    "\2\0\1\105\1\22\1\106\1\56\2\43\1\107\1\110\1\111\2\22\1\100\1\112\1\113\1"+
    "\114\1\115\1\65\1\116\1\106\1\56\1\117\1\53\1\107\1\120\1\111\2\22\1\100\1"+
    "\121\1\122\1\123\1\124\1\125\1\126\1\127\1\56\1\130\1\30\1\107\1\40\1\37\2"+
    "\22\1\100\1\131\1\113\1\47\1\132\1\133\1\30\1\106\1\56\1\44\1\30\1\107\1\110"+
    "\1\111\2\22\1\100\1\131\1\113\1\114\1\124\1\134\1\116\1\106\1\56\1\44\1\30"+
    "\1\135\1\136\1\137\1\140\1\141\1\136\1\22\1\142\1\143\1\144\1\145\1\30\1\127"+
    "\1\56\1\30\1\44\1\107\1\33\1\100\2\22\1\100\1\146\1\147\1\150\1\144\1\151"+
    "\1\27\1\106\1\56\2\30\1\152\1\33\1\100\2\22\1\100\1\146\1\113\1\150\1\144"+
    "\1\151\1\35\1\106\1\56\1\153\1\30\1\152\1\33\1\100\4\22\1\154\1\150\1\155"+
    "\1\65\1\30\1\106\1\56\1\30\1\42\1\152\1\22\1\23\1\42\2\22\1\37\1\156\1\23"+
    "\1\157\1\160\1\0\1\161\1\162\1\163\1\30\1\43\5\22\1\164\1\165\1\166\1\102"+
    "\1\56\1\167\4\30\1\170\1\171\1\172\1\43\1\173\1\174\1\164\1\175\1\176\1\177"+
    "\1\56\1\200\4\30\1\133\2\30\1\201\1\56\1\167\1\202\1\203\1\22\1\43\3\22\1"+
    "\31\1\46\1\0\1\150\1\204\1\0\1\46\3\0\1\52\1\205\7\30\5\22\1\55\1\0\1\206"+
    "\1\56\1\167\1\70\1\207\1\210\1\211\1\212\1\22\1\213\1\214\1\56\1\215\4\22"+
    "\1\40\1\20\5\22\1\216\51\22\1\137\1\23\1\137\5\22\1\137\4\22\1\137\1\23\1"+
    "\137\1\22\1\23\7\22\1\137\10\22\1\217\4\30\2\22\2\30\12\22\1\31\1\30\1\43"+
    "\114\22\1\110\2\22\1\220\2\22\1\51\11\22\1\136\1\133\1\30\1\22\1\33\1\221"+
    "\1\30\2\22\1\221\1\30\2\22\1\222\1\30\1\22\1\33\1\223\1\30\6\22\1\224\3\0"+
    "\1\225\1\226\1\56\1\167\3\30\1\227\1\56\1\167\13\22\1\30\5\22\1\230\10\22"+
    "\1\231\1\30\3\22\1\31\1\0\1\2\1\0\1\2\1\127\1\56\3\22\1\231\1\31\1\30\5\22"+
    "\1\117\2\0\1\60\1\201\1\56\1\167\4\30\2\22\1\166\1\2\6\22\1\204\1\102\3\0"+
    "\1\114\1\56\1\167\1\56\1\167\1\45\13\30\1\232\5\22\1\224\1\0\1\232\1\117\1"+
    "\56\1\167\1\30\1\233\1\2\1\30\1\234\3\22\1\105\1\211\1\56\1\72\4\22\1\70\1"+
    "\0\1\2\1\30\4\22\1\224\2\0\1\30\1\56\1\235\1\56\1\72\3\22\1\231\12\30\1\236"+
    "\2\0\1\237\1\240\1\30\30\22\4\0\1\102\2\30\1\101\42\22\2\231\4\22\2\231\1"+
    "\22\1\241\3\22\1\231\6\22\1\33\1\176\1\242\1\31\1\243\1\117\1\22\1\31\1\242"+
    "\1\31\1\244\1\245\3\30\1\246\1\30\1\45\1\133\1\30\1\247\1\250\1\52\1\251\1"+
    "\44\1\45\2\30\1\22\1\31\3\22\1\51\2\30\1\0\1\52\1\252\1\0\1\253\1\30\1\254"+
    "\1\42\1\156\1\255\1\32\1\256\1\22\1\257\1\260\1\261\2\30\5\22\1\133\116\30"+
    "\5\22\1\23\5\22\1\23\20\22\1\31\1\262\1\263\1\30\4\22\1\40\1\20\7\22\1\45"+
    "\1\30\1\65\2\22\1\23\1\30\10\23\4\0\5\30\1\45\72\30\1\264\3\30\1\43\1\213"+
    "\1\255\1\31\1\43\11\22\1\23\1\265\1\43\12\22\1\216\1\260\4\22\1\231\1\43\12"+
    "\22\1\23\2\30\3\22\1\51\6\30\170\22\1\231\11\30\71\22\1\31\6\30\21\22\1\31"+
    "\10\30\5\22\1\231\41\22\1\31\2\22\1\56\1\266\2\30\5\22\1\166\1\101\1\267\3"+
    "\22\1\65\12\22\1\201\3\30\1\45\1\22\1\42\14\22\1\270\1\117\1\30\1\22\1\51"+
    "\11\30\1\22\1\271\1\272\2\22\1\55\2\30\1\133\6\22\1\117\1\30\1\273\5\22\1"+
    "\224\1\0\1\52\1\30\1\56\1\167\2\0\1\273\1\53\1\56\1\72\2\22\1\70\1\177\2\22"+
    "\1\166\1\0\1\2\1\30\3\22\1\31\1\103\5\22\1\55\1\0\1\253\1\45\1\56\1\167\2"+
    "\30\1\162\1\274\5\22\1\105\1\102\1\30\1\272\1\275\1\56\1\167\2\22\1\23\1\276"+
    "\6\22\1\210\1\277\1\230\2\30\1\300\1\22\1\55\1\301\1\30\3\302\1\30\2\23\22"+
    "\30\4\22\1\55\1\303\1\56\1\167\64\22\1\117\1\30\2\22\1\23\1\304\5\22\1\117"+
    "\40\30\55\22\1\231\15\22\1\27\4\30\1\23\1\30\1\304\1\305\1\22\1\100\1\23\1"+
    "\176\1\306\15\22\1\27\3\30\1\304\54\22\1\231\2\30\10\22\1\42\6\22\5\30\1\22"+
    "\1\31\2\0\2\30\1\102\1\30\1\141\2\30\1\260\3\30\1\44\1\33\20\22\1\307\1\247"+
    "\1\30\1\56\1\167\1\43\2\22\1\120\1\43\2\22\1\51\1\310\12\22\1\23\3\42\1\311"+
    "\1\312\2\30\1\313\1\22\1\146\2\22\1\23\2\22\1\314\1\22\1\231\1\22\1\231\4"+
    "\30\17\22\1\51\10\30\6\22\1\31\20\30\1\315\20\30\3\22\1\31\6\22\1\133\5\30"+
    "\3\22\1\23\2\30\3\22\1\51\6\30\3\22\1\231\4\22\1\117\1\22\1\255\5\30\23\22"+
    "\1\231\1\56\1\167\52\30\1\231\1\100\4\22\1\40\1\316\2\22\1\231\25\30\2\22"+
    "\1\231\1\30\3\22\1\27\10\30\7\22\1\310\10\30\1\317\1\101\1\146\1\43\2\22\1"+
    "\117\1\123\4\30\3\22\1\31\20\30\6\22\1\231\1\30\2\22\1\231\1\30\2\22\1\51"+
    "\21\30\11\22\1\133\66\30\1\234\6\22\1\0\1\102\3\30\1\127\1\56\2\30\1\234\5"+
    "\22\1\0\1\320\2\30\3\22\1\133\1\56\1\167\1\234\3\22\1\166\1\0\1\321\1\56\10"+
    "\30\1\234\5\22\1\55\1\0\1\322\1\30\1\56\1\167\42\30\1\162\1\274\52\30\1\162"+
    "\1\274\16\30\1\162\1\274\56\30\1\162\1\274\4\30\5\22\1\55\1\0\1\30\1\56\1"+
    "\167\14\30\1\162\1\274\64\30\1\162\1\274\54\30\1\162\1\274\64\30\55\22\1\23"+
    "\22\30\14\22\1\51\63\30\5\22\1\23\72\30\7\22\1\133\4\30\1\162\1\274\34\30"+
    "\1\162\1\274\64\30\10\22\1\31\1\30\1\105\4\0\1\102\1\30\1\65\1\234\1\22\14"+
    "\30\1\27\153\30\1\323\1\324\2\0\1\325\1\2\3\30\1\326\22\30\1\327\67\30\12"+
    "\22\1\33\10\22\1\33\1\330\1\331\1\22\1\332\1\146\7\22\1\40\1\333\2\33\3\22"+
    "\1\334\1\176\1\42\1\100\51\22\1\231\3\22\1\100\2\22\1\216\3\22\1\216\2\22"+
    "\1\33\3\22\1\33\2\22\1\23\3\22\1\23\3\22\1\100\3\22\1\100\2\22\1\216\1\335"+
    "\6\56\52\30\1\162\1\274\24\30\1\146\3\22\1\170\1\43\1\216\1\336\1\254\1\337"+
    "\1\170\1\241\1\170\2\216\1\126\1\22\1\37\1\22\1\117\1\340\1\37\1\22\1\117"+
    "\50\30\32\22\1\23\5\30\106\22\1\31\1\30\33\22\1\231\74\30\1\125\3\30\14\0"+
    "\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1800 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\6\1\1\1\4\2\1\1\4\6\6\4\0\1\1\1\33\1\27\1\0\1\22\1\35\1\36\1\26\1\37\1"+
    "\40\1\3\1\14\1\41\1\10\1\12\1\2\1\15\11\11\1\21\1\42\1\43\1\34\1\44\1\23\1"+
    "\21\1\45\1\47\1\54\1\60\1\13\1\62\1\72\1\67\1\56\1\100\1\74\1\63\1\71\1\57"+
    "\1\51\1\76\1\101\1\52\1\66\1\53\1\70\1\77\1\73\1\16\1\64\1\65\1\31\1\0\1\32"+
    "\1\0\1\75\1\30\1\46\1\50\1\55\1\61\1\20\1\17\1\72\1\16\1\64\1\65\1\0\1\102"+
    "\1\0\1\103\6\6\1\7\2\6\1\1\1\0\4\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0\17"+
    "\5\1\0\2\56\15\5\1\66\2\5\4\0\4\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\5\5\1\0\2\5"+
    "\2\0\4\5\10\0\1\5\1\0\3\5\1\0\1\5\1\0\4\5\1\0\13\5\1\0\3\5\1\0\5\6\2\0\6\5"+
    "\1\0\7\5\1\0\1\5\15\0\1\5\1\0\15\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\3\5\5\0"+
    "\5\6\6\0\1\5\4\0\3\6\5\0\3\5\5\6\12\25\4\0\2\5\1\6\13\5\1\0\1\5\7\6\2\5\2"+
    "\6\1\0\4\6\2\5\2\25\3\5\2\0\1\5\7\0\1\6\1\5\1\6\6\5\3\6\2\0\11\5\3\6\1\5\6"+
    "\0\2\25\6\5\4\6\2\5\2\0\2\6\1\5\11\6\1\5\3\6\1\5\5\6\2\0\1\5\3\6\4\0\1\5\1"+
    "\0\6\5\4\0\13\6\1\0\4\6\6\5\3\6\1\5\2\6\1\5\7\6\2\5\2\6\2\0\2\25\1\0\3\6\1"+
    "\0\10\5\2\0\2\5\2\0\6\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\1"+
    "\5\5\0\2\5\1\0\5\5\4\0\3\5\4\0\2\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6"+
    "\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\5\1\0\1\5\7\0\2\25\2\6\3\5\1\6\2\0\1\5\1\0"+
    "\2\5\1\0\3\5\2\6\1\0\3\6\2\0\1\5\15\0\2\6\2\0\1\6\1\5\1\0\6\5\3\0\3\5\1\0"+
    "\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\2\5\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1"+
    "\5\6\0\1\6\4\5\1\0\5\5\3\0\1\5\7\6\1\0\2\6\5\0\2\6\3\0\2\6\1\0\3\5\1\0\2\5"+
    "\5\0\3\5\2\0\1\5\3\6\1\0\4\6\1\5\1\0\4\5\1\0\1\5\4\0\1\6\4\0\6\6\1\0\1\6\7"+
    "\0\12\24\2\0\2\6\4\0\1\5\1\6\2\5\7\6\4\0\10\5\1\6\2\25\7\0\2\5\1\0\1\5\2\0"+
    "\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\3\5\2\6\1"+
    "\0\2\6\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2\0\2\25\2\0\4\5\2\6\13\0\1\6\1\0\1\6\1"+
    "\0\1\6\4\0\2\6\5\5\3\6\6\0\1\6\1\0\7\6\1\5\2\6\4\5\3\6\1\5\3\6\2\5\7\6\3\5"+
    "\4\6\5\5\14\6\1\5\1\6\2\25\4\6\2\0\3\5\1\0\7\5\2\0\3\6\1\1\11\5\3\6\3\0\2"+
    "\5\2\6\4\0\1\5\1\0\2\6\4\0\4\5\10\6\3\0\1\5\3\0\2\5\1\6\5\0\3\6\2\0\1\5\1"+
    "\6\1\5\5\0\6\5\2\0\5\6\3\5\3\0\10\6\5\5\2\25\3\0\3\5\3\6\1\0\5\6\4\5\1\6\4"+
    "\5\3\6\2\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\2\0\3\5\1\0\6\5\2\0\2\5\13\1\5"+
    "\6\2\1\5\6\1\1\4\0\1\5\12\0\1\1\2\0\6\6\1\0\1\6\3\0\4\6\11\0\1\5\4\0\1\5\1"+
    "\0\5\5\2\0\1\5\1\0\1\74\3\5\1\0\3\5\2\0\4\5\5\0\5\5\4\0\1\5\4\0\4\5\3\6\2"+
    "\5\4\0\1\1\4\0\3\5\1\0\2\6\2\0\3\5\2\25\2\5\4\0\6\6\1\0\2\5\2\0\4\5\1\0\2"+
    "\5\1\6\3\5\1\6\4\5\1\6\4\5\2\6\6\5\2\24\6\0\4\5\2\6\4\0\1\5\1\6\4\0\1\6\5"+
    "\5\2\6\3\0\3\5\4\0\3\5\2\6\2\0\6\5\1\0\3\6\1\0\2\6\5\0\5\5\5\0\1\5\1\6\3\5"+
    "\1\0\2\5\1\0\7\5\2\0\1\6\6\0\2\5\2\0\3\5\3\0\2\5\3\0\2\5\2\0\3\6\4\0\3\5\1"+
    "\0\2\5\1\0\1\5\5\0\1\6\2\0\1\5\3\0\1\5\2\0\2\5\3\6\1\0\2\6\1\0\3\6\2\0\1\6"+
    "\2\0\5\6\1\0\2\25\1\6\4\5\10\0\5\6\3\0\6\6\2\0\3\6\2\0\4\6\4\0\3\6\5\0\1\5"+
    "\2\0\2\5\2\0\4\5\1\0\4\5\1\0\1\5\1\0\6\5\2\0\5\5\1\0\4\5\1\0\4\5\2\0\2\25"+
    "\1\0\1\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0\3\5\1\0\3\5\1\0\3\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\5\1\11\1\7\2\5\1\1\1\12\1\13"+
    "\1\14\1\15\1\16\1\1\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\25\5\1\30\1\31"+
    "\1\32\1\33\1\7\1\0\5\5\1\0\3\5\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\7\5\1\50\2\5\1\51\1\52"+
    "\1\53\1\54\6\5\1\55\7\5\1\56\1\57\1\60"+
    "\3\5\1\61\31\5\1\62\1\32\1\0\1\7\4\5"+
    "\1\63\2\5\1\7\1\5\1\64\6\5\1\65\1\66"+
    "\1\5\1\67\1\70\21\5\1\71\26\5\1\72\13\5"+
    "\1\73\13\5\1\74\11\5\1\32\1\0\4\5\1\75"+
    "\1\76\1\5\1\77\1\5\1\100\30\5\1\101\3\5"+
    "\1\102\1\103\1\104\13\5\1\105\12\5\1\106\4\5"+
    "\1\107\1\5\1\110\1\5\1\111\1\5\1\112\11\5"+
    "\1\113\1\114\1\5\1\115\2\5\1\116\2\5\1\117"+
    "\1\5\1\120\7\5\1\121\1\122\3\5\1\123\3\5"+
    "\1\124\1\5\1\125\1\126\10\5\1\127\1\5\1\130"+
    "\1\5\1\131\11\5\1\132\1\133\3\5\1\134\1\135"+
    "\15\5\1\136\3\5\1\137\1\5\1\140\1\5\1\141"+
    "\1\142\1\5\1\143\5\5\1\144\1\145\1\5\1\146"+
    "\1\5\1\147\1\5\1\150\1\151\2\5\1\152\1\5"+
    "\1\153\3\5\1\154\2\5\1\155\11\5\1\156\1\157"+
    "\1\160\4\5\1\161\1\5\1\162\1\5\1\163\4\5"+
    "\1\164\1\165\2\5\1\166\1\5\1\167\1\170\1\171"+
    "\1\5\1\172\1\5\1\173\1\174\2\5\1\175\1\176"+
    "\1\177\1\5\1\200\2\5\1\201\1\202\1\5\1\203"+
    "\3\5\1\204\1\205\2\5\1\206\3\5\1\207\1\210"+
    "\1\5\1\211\1\212\2\5\1\213\3\5\1\214\1\215"+
    "\1\216\4\5\1\217\1\220\2\5\1\221\5\5\1\222"+
    "\1\5\1\223\1\224\1\5\1\225\2\5\1\226\1\227"+
    "\4\5\1\230\1\231\1\232\1\5\1\233\1\5\1\234"+
    "\1\5\1\235\2\5\1\236\1\5\1\237\3\5\1\240"+
    "\1\241\1\242\4\5\1\243";

  private static int [] zzUnpackAction() {
    int [] result = new int[565];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\104\0\u0110\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\104\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374"+
    "\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\104\0\u0bb0\0\u0bf4\0\u0c38"+
    "\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58"+
    "\0\u0e9c\0\u0ee0\0\u0330\0\u0f24\0\u0f68\0\u0fac\0\104\0\104"+
    "\0\104\0\104\0\104\0\104\0\104\0\104\0\u0ff0\0\u1034"+
    "\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254"+
    "\0\u0110\0\u1298\0\u12dc\0\u0110\0\u1320\0\u1364\0\u13a8\0\u13ec"+
    "\0\u1430\0\u1474\0\u0110\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8"+
    "\0\u160c\0\u1650\0\u0110\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4"+
    "\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4"+
    "\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4"+
    "\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04"+
    "\0\u1e48\0\u1e8c\0\104\0\u1ed0\0\u1f14\0\u1f14\0\u1f58\0\u1f9c"+
    "\0\u1fe0\0\u2024\0\u0110\0\u2068\0\u20ac\0\u0e14\0\u20f0\0\u2134"+
    "\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u0110\0\u0110"+
    "\0\u2310\0\u0110\0\u0110\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464"+
    "\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684"+
    "\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4"+
    "\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4"+
    "\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4"+
    "\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04"+
    "\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u309c\0\u30e0\0\u0110"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300"+
    "\0\u3344\0\u3388\0\u33cc\0\u0110\0\u3410\0\u3454\0\u3498\0\u34dc"+
    "\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\104\0\u1ed0\0\u3674"+
    "\0\u36b8\0\u36fc\0\u3740\0\u0110\0\u0110\0\u3784\0\u0110\0\u37c8"+
    "\0\u0110\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4"+
    "\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4"+
    "\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4"+
    "\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u0110\0\u0110\0\u0110"+
    "\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158"+
    "\0\u419c\0\u41e0\0\u4224\0\u0110\0\u4268\0\u42ac\0\u42f0\0\u4334"+
    "\0\u4378\0\u43bc\0\u4400\0\u4444\0\u4488\0\u44cc\0\u0110\0\u4510"+
    "\0\u4554\0\u4598\0\u45dc\0\u0110\0\u4620\0\u0110\0\u4664\0\u0110"+
    "\0\u46a8\0\u0110\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u47fc\0\u4840"+
    "\0\u4884\0\u48c8\0\u490c\0\u0110\0\u4950\0\u4994\0\u0110\0\u49d8"+
    "\0\u4a1c\0\u0110\0\u4a60\0\u4aa4\0\u0110\0\u4ae8\0\u0110\0\u4b2c"+
    "\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u0110\0\u0110"+
    "\0\u4d08\0\u4d4c\0\u4d90\0\u0110\0\u4dd4\0\u4e18\0\u4e5c\0\u0110"+
    "\0\u4ea0\0\u0110\0\u0110\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4"+
    "\0\u5038\0\u507c\0\u50c0\0\u0110\0\u5104\0\u0110\0\u5148\0\u0110"+
    "\0\u518c\0\u51d0\0\u5214\0\u5258\0\u529c\0\u52e0\0\u5324\0\u5368"+
    "\0\u53ac\0\u0110\0\u0110\0\u53f0\0\u5434\0\u5478\0\u0110\0\u54bc"+
    "\0\u5500\0\u5544\0\u5588\0\u55cc\0\u5610\0\u5654\0\u5698\0\u56dc"+
    "\0\u5720\0\u5764\0\u57a8\0\u57ec\0\u5830\0\u0110\0\u5874\0\u58b8"+
    "\0\u58fc\0\u0110\0\u5940\0\u0110\0\u5984\0\u0110\0\u0110\0\u59c8"+
    "\0\u0110\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c\0\u0110\0\u0110"+
    "\0\u5b60\0\u0110\0\u5ba4\0\u0110\0\u5be8\0\u0110\0\u0110\0\u5c2c"+
    "\0\u5c70\0\u0110\0\u5cb4\0\u0110\0\u5cf8\0\u5d3c\0\u5d80\0\u0110"+
    "\0\u5dc4\0\u5e08\0\u0110\0\u5e4c\0\u5e90\0\u5ed4\0\u5f18\0\u5f5c"+
    "\0\u5fa0\0\u5fe4\0\u6028\0\u606c\0\u0110\0\u0110\0\u0110\0\u60b0"+
    "\0\u60f4\0\u6138\0\u617c\0\u0110\0\u61c0\0\u0110\0\u6204\0\u0110"+
    "\0\u6248\0\u628c\0\u62d0\0\u6314\0\u0110\0\u0110\0\u6358\0\u639c"+
    "\0\u0110\0\u63e0\0\u0110\0\u0110\0\u0110\0\u6424\0\u0110\0\u6468"+
    "\0\u0110\0\u0110\0\u64ac\0\u64f0\0\u0110\0\u0110\0\u0110\0\u6534"+
    "\0\u0110\0\u6578\0\u65bc\0\u0110\0\u0110\0\u6600\0\u0110\0\u6644"+
    "\0\u6688\0\u66cc\0\u0110\0\u0110\0\u6710\0\u6754\0\u0110\0\u6798"+
    "\0\u67dc\0\u6820\0\u0110\0\u0110\0\u6864\0\u0110\0\u0110\0\u68a8"+
    "\0\u68ec\0\u0110\0\u6930\0\u6974\0\u69b8\0\u0110\0\u0110\0\u0110"+
    "\0\u69fc\0\u6a40\0\u6a84\0\u6ac8\0\u0110\0\u0110\0\u6b0c\0\u6b50"+
    "\0\u0110\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4\0\u0110\0\u6ce8"+
    "\0\u0110\0\u0110\0\u6d2c\0\u0110\0\u6d70\0\u6db4\0\u0110\0\u0110"+
    "\0\u6df8\0\u6e3c\0\u6e80\0\u6ec4\0\u0110\0\u0110\0\u0110\0\u6f08"+
    "\0\u0110\0\u6f4c\0\u0110\0\u6f90\0\u0110\0\u6fd4\0\u7018\0\u0110"+
    "\0\u705c\0\u0110\0\u70a0\0\u70e4\0\u7128\0\u716c\0\u0110\0\u0110"+
    "\0\u71b0\0\u71f4\0\u7238\0\u727c\0\u0110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[565];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\2\1\3"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\12\2\17\1\20\2\2\1\21\1\22\1\23\1\24"+
    "\1\2\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\2\37\2\40\1\41\1\42\1\43"+
    "\2\44\1\45\1\46\2\47\1\16\1\50\2\6\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\6\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\105\0\1\3\2\0"+
    "\1\3\2\0\1\3\77\0\1\66\105\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\35\6\12\0\1\67\104\0\1\10\1\70"+
    "\1\71\1\0\1\10\2\0\1\71\74\0\1\70\3\0"+
    "\1\70\73\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\72\2\6\1\0\1\6\2\0\1\6\17\0"+
    "\2\73\10\6\1\74\3\6\1\75\2\6\1\76\13\6"+
    "\13\0\1\10\1\70\1\71\1\0\1\10\1\77\1\0"+
    "\1\71\70\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\1\21\1\22\15\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\2\100\2\6"+
    "\1\101\1\102\27\6\7\0\3\103\1\0\1\103\1\0"+
    "\1\103\1\0\4\103\1\0\1\103\2\0\1\103\17\0"+
    "\35\103\13\0\1\20\3\0\1\20\6\0\2\20\56\0"+
    "\26\21\1\104\55\21\27\22\1\105\54\22\30\23\1\106"+
    "\53\23\32\24\1\107\51\24\34\0\1\110\103\0\1\111"+
    "\103\0\1\112\6\0\1\113\1\114\73\0\1\115\7\0"+
    "\1\116\44\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\1\117\1\6\1\0\1\6\2\0\1\6\17\0"+
    "\2\6\2\120\2\6\1\121\2\122\1\6\1\123\2\124"+
    "\1\117\1\125\2\6\1\126\1\6\1\127\11\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\130\1\0\3\6\1\130"+
    "\1\0\1\6\2\0\1\6\17\0\17\6\1\131\15\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\1\132\1\6\1\0\1\6\2\0\1\6\17\0\5\6"+
    "\1\133\4\6\1\134\2\6\1\132\5\6\1\135\11\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\136\1\0\3\6"+
    "\1\136\1\0\1\6\2\0\1\6\17\0\2\137\2\6"+
    "\1\140\30\6\7\0\3\6\1\0\1\6\1\0\1\141"+
    "\1\0\3\6\1\141\1\0\1\6\2\0\1\6\17\0"+
    "\2\142\2\6\1\143\1\144\14\6\1\145\12\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\2\146\2\6\1\147\1\150"+
    "\14\6\1\151\1\152\11\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\1\153\1\6\1\0\1\6"+
    "\2\0\1\6\17\0\12\6\1\154\2\6\1\153\3\6"+
    "\1\155\2\6\1\156\1\157\7\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\2\160\2\6\1\161\16\6\1\162\11\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\163\1\0\3\6"+
    "\1\163\1\0\1\6\2\0\1\6\17\0\2\164\3\6"+
    "\1\165\3\6\1\166\23\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\167\1\0\3\6\1\167\1\0\1\6\2\0"+
    "\1\6\17\0\11\6\1\170\23\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\171\1\0\3\6\1\171\1\0\1\6"+
    "\2\0\1\6\17\0\2\172\33\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\2\173\33\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\12\6\1\174\6\6\1\175\7\6\1\176\3\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\2\177\33\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\5\6\1\200\10\6\1\201"+
    "\16\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\11\6\1\202"+
    "\10\6\1\203\12\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\204\1\0\3\6\1\204\1\0\1\6\2\0\1\6"+
    "\17\0\35\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\5\6"+
    "\1\205\10\6\1\206\16\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\2\207\7\6\1\210\23\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\4\6\1\211\30\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\23\6\1\212\11\6\104\0\1\213\1\0"+
    "\3\66\1\214\100\66\4\67\1\0\77\67\11\0\1\70"+
    "\1\0\1\71\1\0\1\70\2\0\1\71\73\0\1\215"+
    "\1\216\2\0\1\215\1\216\73\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\7\6\2\217\1\220\17\6\1\221\3\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\7\6\2\222\24\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\13\6\2\223\20\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\21\6\1\224\13\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\7\6\2\225\24\6\13\0"+
    "\1\226\3\0\1\226\1\0\2\226\25\0\1\226\1\0"+
    "\1\226\4\0\1\226\3\0\1\226\27\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\11\6\1\227\23\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\5\6\1\230\27\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\4\6\1\231\30\6\30\0\1\21\104\0"+
    "\1\22\104\0\1\23\60\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\6\6\1\232\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\4\6\1\233\30\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\6\6\1\234\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\6\6\1\235\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\2\236\11\6\2\237\20\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\13\6\2\240\20\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\6\6\1\241\7\6\1\242\16\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\7\6\2\243\24\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\6\6\1\244\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\1\245\1\6"+
    "\1\0\1\6\2\0\1\6\17\0\6\6\1\246\6\6"+
    "\1\245\7\6\1\247\7\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\1\250\1\6\1\0\1\6"+
    "\2\0\1\6\17\0\15\6\1\250\17\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\13\6\2\251\20\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\6\6\1\252\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\1\253\1\6"+
    "\1\0\1\6\2\0\1\6\17\0\7\6\2\254\1\255"+
    "\1\256\2\6\1\253\1\257\2\6\1\260\3\6\1\261"+
    "\3\6\1\262\3\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\11\6\1\263\23\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\16\6\1\264\7\6\1\265\6\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\24\6\1\266\10\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\2\6\2\267\31\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\2\270\7\6\1\271\23\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\272\1\0\3\6\1\272\1\0"+
    "\1\6\2\0\1\6\17\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\21\6\1\273\13\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\12\6\1\274\3\6\1\275\5\6\1\276"+
    "\10\6\7\0\3\6\1\0\1\6\1\0\1\277\1\0"+
    "\3\6\1\277\1\0\1\6\2\0\1\6\17\0\4\6"+
    "\1\300\30\6\7\0\3\6\1\0\1\6\1\0\1\301"+
    "\1\0\3\6\1\301\1\0\1\6\2\0\1\6\17\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\5\6\1\302"+
    "\27\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\6\6\1\303"+
    "\2\6\1\304\1\305\2\306\4\6\1\307\13\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\12\6\1\310\22\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\24\6\1\311\10\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\12\6\1\312\22\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\6\6\1\313\26\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\6\6\1\314\26\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\16\6\1\315\16\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\2\6\1\316"+
    "\1\6\1\0\1\6\2\0\1\6\17\0\6\6\1\317"+
    "\6\6\1\316\1\320\2\6\1\321\13\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\6\6\1\322\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\4\6\1\323\30\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\21\6\1\324\13\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\1\325\1\6"+
    "\1\0\1\6\2\0\1\6\17\0\15\6\1\325\17\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\24\6\1\326\2\6"+
    "\1\327\5\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\6\6"+
    "\1\330\7\6\1\331\16\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\32\6\1\332\2\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\32\6\1\333\2\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\11\6\1\334\23\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\11\6\1\335\23\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\13\6\2\336\20\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\6\6\1\337\26\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\4\6\1\340\30\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\4\6\1\341\30\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\6\6\1\342\26\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\343\1\0\3\6\1\343\1\0\1\6\2\0"+
    "\1\6\17\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\17\6\1\344\15\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\2\345\7\6\1\346\23\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\2\347\33\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\7\6\2\350\5\6\1\351\16\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\352\1\0\3\6\1\352\1\0\1\6"+
    "\2\0\1\6\17\0\5\6\1\353\27\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\11\6\1\354\23\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\355\1\0\3\6\1\355\1\0"+
    "\1\6\2\0\1\6\17\0\35\6\2\0\2\66\1\356"+
    "\1\357\100\66\11\0\1\216\3\0\1\216\73\0\3\6"+
    "\1\0\1\6\1\0\1\360\1\0\3\6\1\360\1\0"+
    "\1\6\2\0\1\6\17\0\16\6\1\361\16\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\21\6\1\362\13\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\16\6\1\363\16\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\22\6\1\364\12\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\365\1\0\3\6\1\365"+
    "\1\0\1\6\2\0\1\6\17\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\2\366\33\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\16\6\1\367\16\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\370\1\0\3\6\1\370\1\0\1\6"+
    "\2\0\1\6\17\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\24\6\1\371\10\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\372\1\0\3\6\1\372\1\0\1\6\2\0"+
    "\1\6\17\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\5\6\1\373\27\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\2\374\33\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\11\6"+
    "\1\375\23\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\16\6"+
    "\1\376\16\6\7\0\3\6\1\0\1\6\1\0\1\377"+
    "\1\0\3\6\1\377\1\0\1\6\2\0\1\6\17\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\4\6\1\u0100"+
    "\30\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\4\6\1\u0101"+
    "\30\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\26\6\1\u0102"+
    "\6\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\11\6\1\u0103"+
    "\23\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\21\6\1\u0104"+
    "\13\6\7\0\3\6\1\0\1\6\1\0\1\u0105\1\0"+
    "\3\6\1\u0105\1\0\1\6\2\0\1\6\17\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u0106\1\0\3\6"+
    "\1\u0106\1\0\1\6\2\0\1\6\17\0\35\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\u0107\1\0\3\6\1\u0107"+
    "\1\0\1\6\2\0\1\6\17\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\23\6\1\u0108\11\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\12\6\1\u0109\22\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\2\u010a\33\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u010b\1\0\3\6\1\u010b\1\0\1\6"+
    "\2\0\1\6\17\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\6\6\1\u010c\26\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\u010d\1\0\3\6\1\u010d\1\0\1\6\2\0"+
    "\1\6\17\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\16\6\1\u010e\16\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\21\6\1\u010f\13\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\16\6\1\u0110\16\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\11\6\1\u0111\23\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\31\6\1\u0112\3\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\16\6\1\u0113\16\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\12\6\1\u0114\22\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\25\6\1\u0115\7\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\12\6\1\u0116\22\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u0117\1\0\3\6\1\u0117\1\0\1\6\2\0\1\6"+
    "\17\0\6\6\1\u0118\2\u0119\24\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\1\u011a\1\6\1\0"+
    "\1\6\2\0\1\6\17\0\15\6\1\u011a\3\6\1\u011b"+
    "\13\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\16\6\1\u011c"+
    "\4\6\1\u011d\11\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\24\6\1\u011e\10\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\2\u011f\33\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\21\6"+
    "\1\u0120\13\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\7\6"+
    "\2\u0121\24\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\5\6"+
    "\1\u0122\27\6\7\0\3\6\1\0\1\6\1\0\1\u0123"+
    "\1\0\3\6\1\u0123\1\0\1\6\2\0\1\6\17\0"+
    "\4\6\1\u0124\30\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\6\6\1\u0125\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u0126\1\0\3\6\1\u0126\1\0\1\6\2\0\1\6"+
    "\17\0\35\6\7\0\3\6\1\0\1\6\1\0\1\u0127"+
    "\1\0\3\6\1\u0127\1\0\1\6\2\0\1\6\17\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\u0128\1\0"+
    "\3\6\1\u0128\1\0\1\6\2\0\1\6\17\0\6\6"+
    "\1\u0129\26\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\23\6"+
    "\1\u012a\11\6\7\0\3\6\1\0\1\6\1\0\1\u012b"+
    "\1\0\3\6\1\u012b\1\0\1\6\2\0\1\6\17\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\4\6\1\u012c"+
    "\30\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\23\6\1\u012d"+
    "\11\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\12\6\1\u012e"+
    "\22\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\16\6\1\u012f"+
    "\16\6\7\0\3\6\1\0\1\6\1\0\1\u0130\1\0"+
    "\3\6\1\u0130\1\0\1\6\2\0\1\6\17\0\2\u0131"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\2\u0132\33\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u0133\1\0\3\6"+
    "\1\u0133\1\0\1\6\2\0\1\6\17\0\35\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\7\6\2\u0134\24\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\2\u0135\33\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\31\6\1\u0136\3\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\6\6\1\u0137\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\6\6\1\u0138\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\11\6\1\u0139\23\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\u013a\1\0\3\6\1\u013a\1\0"+
    "\1\6\2\0\1\6\17\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u013b\1\0\3\6\1\u013b\1\0\1\6"+
    "\2\0\1\6\17\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\u013c\1\0\3\6\1\u013c\1\0\1\6\2\0"+
    "\1\6\17\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\11\6\1\u013d\23\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\4\6\1\u013e\27\6\1\u013f\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\12\6\1\u0140\22\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\2\u0141\33\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\7\6\2\u0142\24\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\23\6\1\u0143\11\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\2\6\2\u0144\31\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\22\6\1\u0145\12\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\5\6\1\u0146\4\6\1\u0147\22\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\25\6\1\u0148\7\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\24\6\1\u0149\10\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\12\6\1\u014a\22\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\23\6\1\u014b\11\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\23\6\1\u014c\11\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\26\6\1\u014d\6\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\6\6\1\u014e\26\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\12\6\1\u014f\22\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\5\6\1\u0150\27\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\31\6\1\u0151\3\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\23\6\1\u0152\11\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\6\6\1\u0153\26\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\2\u0154\33\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\31\6\1\u0155\3\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\11\6\1\u0156\23\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\5\6\1\u0157\27\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\6\6\1\u0158\26\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\7\6\2\u0159\24\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\4\6\1\u015a\30\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\17\6\1\u015b\15\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\5\6\1\u015c\27\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\11\6\1\u015d\23\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\5\6\1\u015e\27\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\u015f\1\0\3\6\1\u015f\1\0\1\6\2\0"+
    "\1\6\17\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\12\6\1\u0160\22\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u0161\1\0\3\6\1\u0161\1\0\1\6\2\0\1\6"+
    "\17\0\35\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\5\6"+
    "\1\u0162\27\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\5\6"+
    "\1\u0163\27\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\5\6"+
    "\1\u0164\27\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\5\6"+
    "\1\u0165\27\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\13\6"+
    "\2\u0166\20\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\24\6"+
    "\1\u0167\10\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\2\u0168"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\5\6\1\u0169"+
    "\27\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\u016a\2\6\1\0\1\6\2\0\1\6\17\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\2\u016b\33\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u016c\1\0\3\6"+
    "\1\u016c\1\0\1\6\2\0\1\6\17\0\35\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\2\6\2\u016d\31\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\13\6\2\u016e\20\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\4\6\1\u016f\30\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\u0170\1\0\3\6\1\u0170"+
    "\1\0\1\6\2\0\1\6\17\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\21\6\1\u0171\13\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\25\6\1\u0172\7\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\2\u0173\33\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\16\6\1\u0174\16\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\6\6\1\u0175\26\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\2\u0176\33\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\24\6\1\u0177\10\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\11\6\1\u0178\23\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\6\6\1\u0179\26\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\21\6\1\u017a\13\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\27\6\1\u017b\5\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\u017c\1\0\3\6\1\u017c\1\0\1\6\2\0"+
    "\1\6\17\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\5\6\1\u017d\27\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\11\6\1\u017e\23\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\5\6\1\u017f\27\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\u0180\2\6\1\0\1\6\2\0"+
    "\1\6\17\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\5\6\1\u0181\27\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u0182\1\0\3\6\1\u0182\1\0\1\6\2\0\1\6"+
    "\17\0\35\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\16\6"+
    "\1\u0183\16\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\13\6"+
    "\2\u0184\20\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\5\6"+
    "\1\u0185\27\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\5\6"+
    "\1\u0186\27\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\23\6"+
    "\1\u0187\11\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\5\6"+
    "\1\u0188\27\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\23\6"+
    "\1\u0189\11\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\7\6"+
    "\2\u018a\24\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\6\6"+
    "\1\u018b\26\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\2\6"+
    "\2\u018c\31\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\11\6"+
    "\1\u018d\23\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\6\6"+
    "\1\u018e\26\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\7\6"+
    "\2\u018f\24\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\31\6"+
    "\1\u0190\3\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\12\6"+
    "\1\u0191\22\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\12\6"+
    "\1\u0192\22\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\23\6"+
    "\1\u0193\11\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\25\6"+
    "\1\u0194\7\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\6\6"+
    "\1\u0195\26\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\22\6"+
    "\1\u0196\12\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\31\6"+
    "\1\u0197\3\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\4\6"+
    "\1\u0198\30\6\7\0\3\6\1\0\1\6\1\0\1\u0199"+
    "\1\0\3\6\1\u0199\1\0\1\6\2\0\1\6\17\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\24\6\1\u019a"+
    "\10\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\2\u019b\33\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\23\6\1\u019c\11\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u019d\1\0\3\6"+
    "\1\u019d\1\0\1\6\2\0\1\6\17\0\35\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\23\6\1\u019e\11\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\17\6\1\u019f\15\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\6\6\1\u01a0\26\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\21\6\1\u01a1\13\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\21\6\1\u01a2\13\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\11\6\1\u01a3\23\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\u01a4\1\0\3\6\1\u01a4"+
    "\1\0\1\6\2\0\1\6\17\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\25\6\1\u01a5\7\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\22\6\1\u01a6\12\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\12\6\1\u01a7\22\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\20\6\1\u01a8\14\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\12\6\1\u01a9\22\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\u01aa\1\0\3\6\1\u01aa\1\0"+
    "\1\6\2\0\1\6\17\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u01ab\1\0\3\6\1\u01ab\1\0\1\6"+
    "\2\0\1\6\17\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\6\6\1\u01ac\26\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\u01ad\1\0\3\6\1\u01ad\1\0\1\6\2\0"+
    "\1\6\17\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\21\6\1\u01ae\13\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u01af\1\0\3\6\1\u01af\1\0\1\6\2\0\1\6"+
    "\17\0\35\6\7\0\3\6\1\0\1\6\1\0\1\u01b0"+
    "\1\0\3\6\1\u01b0\1\0\1\6\2\0\1\6\17\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\21\6\1\u01b1"+
    "\13\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\11\6\1\u01b2"+
    "\23\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\31\6\1\u01b3"+
    "\3\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\7\6\2\u01b4"+
    "\24\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\2\u01b5\33\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\5\6\1\u01b6\27\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\2\u01b7\33\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\u01b8\1\0\3\6\1\u01b8"+
    "\1\0\1\6\2\0\1\6\17\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\13\6\2\u01b9\20\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\11\6\1\u01ba\23\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\5\6\1\u01bb\27\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\6\6\1\u01bc\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\12\6\1\u01bd\22\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\6\6\1\u01be\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\u01bf\1\0\3\6\1\u01bf\1\0"+
    "\1\6\2\0\1\6\17\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\12\6\1\u01c0\22\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\21\6\1\u01c1\13\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\2\u01c2\33\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\u01c3\1\0\3\6\1\u01c3\1\0\1\6\2\0"+
    "\1\6\17\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\6\6\1\u01c4\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\2\u01c5\33\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\16\6"+
    "\1\u01c6\16\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\11\6"+
    "\1\u01c7\23\6\7\0\3\6\1\0\1\6\1\0\1\u01c8"+
    "\1\0\3\6\1\u01c8\1\0\1\6\2\0\1\6\17\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\2\u01c9\33\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\16\6\1\u01ca\16\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\5\6\1\u01cb\27\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\16\6\1\u01cc\16\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\22\6\1\u01cd\12\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u01ce\1\0\3\6"+
    "\1\u01ce\1\0\1\6\2\0\1\6\17\0\35\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\2\u01cf\33\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\12\6\1\u01d0\22\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\6\6\1\u01d1\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\4\6\1\u01d2\30\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\25\6\1\u01d3\7\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\u01d4\1\0\3\6\1\u01d4\1\0"+
    "\1\6\2\0\1\6\17\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u01d5\1\0\3\6\1\u01d5\1\0\1\6"+
    "\2\0\1\6\17\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\23\6\1\u01d6\11\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\2\u01d7\33\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\5\6\1\u01d8\27\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\24\6\1\u01d9\10\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\21\6\1\u01da\13\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\2\u01db\33\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\11\6"+
    "\1\u01dc\23\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\12\6"+
    "\1\u01dd\22\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\12\6"+
    "\1\u01de\22\6\7\0\3\6\1\0\1\6\1\0\1\u01df"+
    "\1\0\3\6\1\u01df\1\0\1\6\2\0\1\6\17\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\7\6\2\u01e0"+
    "\24\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\12\6\1\u01e1"+
    "\22\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\12\6\1\u01e2"+
    "\22\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\11\6\1\u01e3"+
    "\23\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\u01e4\2\6\1\0\1\6\2\0\1\6\17\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\u01e5\1\0"+
    "\3\6\1\u01e5\1\0\1\6\2\0\1\6\17\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\7\6\2\u01e6\24\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u01e7\1\0\3\6"+
    "\1\u01e7\1\0\1\6\2\0\1\6\17\0\35\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\7\6\2\u01e8\24\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\2\u01e9\33\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\7\6\2\u01ea\24\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\5\6\1\u01eb\27\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\u01ec\1\0\3\6\1\u01ec\1\0"+
    "\1\6\2\0\1\6\17\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\7\6\2\u01ed\24\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\2\u01ee\33\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\u01ef\1\0\3\6\1\u01ef\1\0\1\6\2\0"+
    "\1\6\17\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\2\0\1\6\17\0"+
    "\6\6\1\u01f0\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u01f1\1\0\3\6\1\u01f1\1\0\1\6\2\0\1\6"+
    "\17\0\35\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\16\6"+
    "\1\u01f2\16\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\13\6"+
    "\2\u01f3\20\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\13\6"+
    "\2\u01f4\20\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\2\u01f5"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\16\6\1\u01f6"+
    "\16\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\16\6\1\u01f7"+
    "\16\6\7\0\3\6\1\0\1\6\1\0\1\u01f8\1\0"+
    "\3\6\1\u01f8\1\0\1\6\2\0\1\6\17\0\2\u01f9"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\6\6\1\u01fa"+
    "\26\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\21\6\1\u01fb"+
    "\13\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\7\6\2\u01fc"+
    "\24\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\11\6\1\u01fd"+
    "\23\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\6\6\1\u01fe"+
    "\26\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\17\6\1\u01ff"+
    "\15\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\16\6\1\u0200"+
    "\16\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\32\6\1\u0201"+
    "\2\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\5\6\1\u0202"+
    "\27\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\7\6\2\u0203"+
    "\24\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\32\6\1\u0204"+
    "\2\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\6\6\1\u0205"+
    "\26\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\27\6\1\u0206"+
    "\5\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\5\6\1\u0207"+
    "\27\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\6\6\1\u0208"+
    "\26\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\6\6\1\u0209"+
    "\26\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\11\6\1\u020a"+
    "\23\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\30\6\1\u020b"+
    "\4\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\7\6\2\u020c"+
    "\24\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\16\6\1\u020d"+
    "\16\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\6\6\1\u020e"+
    "\26\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\13\6\2\u020f"+
    "\20\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\2\0\1\6\17\0\2\6\2\u0210"+
    "\31\6\7\0\3\6\1\0\1\6\1\0\1\u0211\1\0"+
    "\3\6\1\u0211\1\0\1\6\2\0\1\6\17\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\6\6\1\u0212\26\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\12\6\1\u0213\22\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u0214\1\0\3\6"+
    "\1\u0214\1\0\1\6\2\0\1\6\17\0\35\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\u0215\1\0\3\6\1\u0215"+
    "\1\0\1\6\2\0\1\6\17\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\u0216\1\0\3\6\1\u0216\1\0"+
    "\1\6\2\0\1\6\17\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u0217\1\0\3\6\1\u0217\1\0\1\6"+
    "\2\0\1\6\17\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\17\6\1\u0218\15\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\11\6\1\u0219\23\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\12\6\1\u021a\22\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\2\0\1\6"+
    "\17\0\6\6\1\u021b\4\6\2\u021c\20\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\6\6\1\u021d\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\2\0\1\6\17\0\17\6\1\u021e\15\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\u021f\1\0\3\6\1\u021f\1\0"+
    "\1\6\2\0\1\6\17\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\16\6\1\u0220\16\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\6\6\1\u0221\26\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\24\6\1\u0222\10\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\21\6\1\u0223\13\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\4\6\1\u0224\30\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\6\6\1\u0225\26\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\11\6\1\u0226\23\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\2\0"+
    "\1\6\17\0\2\u0227\33\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\u0228\1\0\3\6\1\u0228\1\0\1\6\2\0"+
    "\1\6\17\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u0229\1\0\3\6\1\u0229\1\0\1\6\2\0\1\6"+
    "\17\0\35\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\12\6"+
    "\1\u022a\22\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\24\6"+
    "\1\u022b\10\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\6\6"+
    "\1\u022c\26\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\2\0\1\6\17\0\12\6"+
    "\1\u022d\22\6\7\0\3\6\1\0\1\6\1\0\1\u022e"+
    "\1\0\3\6\1\u022e\1\0\1\6\2\0\1\6\17\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\u022f\1\0"+
    "\3\6\1\u022f\1\0\1\6\2\0\1\6\17\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\6\6\1\u0230\26\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\21\6\1\u0231\13\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\6\6\1\u0232\26\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\2\0\1\6\17\0\2\u0233\33\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\24\6\1\u0234\10\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\6\17\0\31\6\1\u0235\3\6\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\5\1\1\11\13\1\6\11"+
    "\30\1\1\11\3\1\1\0\5\1\1\0\7\1\10\11"+
    "\74\1\1\11\1\1\1\0\140\1\1\11\1\0\u0146\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[565];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _RoomSqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RoomSqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 164: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 165: break;
          case 3: 
            { return DIV;
            } 
            // fall through
          case 166: break;
          case 4: 
            { return STAR;
            } 
            // fall through
          case 167: break;
          case 5: 
            { return IDENTIFIER;
            } 
            // fall through
          case 168: break;
          case 6: 
            { return MINUS;
            } 
            // fall through
          case 169: break;
          case 7: 
            { return NUMERIC_LITERAL;
            } 
            // fall through
          case 170: break;
          case 8: 
            { return DOT;
            } 
            // fall through
          case 171: break;
          case 9: 
            { return PLUS;
            } 
            // fall through
          case 172: break;
          case 10: 
            { return NUMBERED_PARAMETER;
            } 
            // fall through
          case 173: break;
          case 11: 
            { return UNTERMINATED_SINGLE_QUOTE_STRING_LITERAL;
            } 
            // fall through
          case 174: break;
          case 12: 
            { return UNTERMINATED_DOUBLE_QUOTE_STRING_LITERAL;
            } 
            // fall through
          case 175: break;
          case 13: 
            { return UNTERMINATED_BACKTICK_LITERAL;
            } 
            // fall through
          case 176: break;
          case 14: 
            { return UNTERMINATED_BRACKET_LITERAL;
            } 
            // fall through
          case 177: break;
          case 15: 
            { return EQ;
            } 
            // fall through
          case 178: break;
          case 16: 
            { return MOD;
            } 
            // fall through
          case 179: break;
          case 17: 
            { return AMP;
            } 
            // fall through
          case 180: break;
          case 18: 
            { return LPAREN;
            } 
            // fall through
          case 181: break;
          case 19: 
            { return RPAREN;
            } 
            // fall through
          case 182: break;
          case 20: 
            { return COMMA;
            } 
            // fall through
          case 183: break;
          case 21: 
            { return SEMICOLON;
            } 
            // fall through
          case 184: break;
          case 22: 
            { return LT;
            } 
            // fall through
          case 185: break;
          case 23: 
            { return GT;
            } 
            // fall through
          case 186: break;
          case 24: 
            { return BAR;
            } 
            // fall through
          case 187: break;
          case 25: 
            { return TILDE;
            } 
            // fall through
          case 188: break;
          case 26: 
            { return COMMENT;
            } 
            // fall through
          case 189: break;
          case 27: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 190: break;
          case 28: 
            { return NAMED_PARAMETER;
            } 
            // fall through
          case 191: break;
          case 29: 
            { return SINGLE_QUOTE_STRING_LITERAL;
            } 
            // fall through
          case 192: break;
          case 30: 
            { return DOUBLE_QUOTE_STRING_LITERAL;
            } 
            // fall through
          case 193: break;
          case 31: 
            { return BACKTICK_LITERAL;
            } 
            // fall through
          case 194: break;
          case 32: 
            { return BRACKET_LITERAL;
            } 
            // fall through
          case 195: break;
          case 33: 
            { return NOT_EQ;
            } 
            // fall through
          case 196: break;
          case 34: 
            { return EQEQ;
            } 
            // fall through
          case 197: break;
          case 35: 
            { return LTE;
            } 
            // fall through
          case 198: break;
          case 36: 
            { return SHL;
            } 
            // fall through
          case 199: break;
          case 37: 
            { return UNEQ;
            } 
            // fall through
          case 200: break;
          case 38: 
            { return GTE;
            } 
            // fall through
          case 201: break;
          case 39: 
            { return SHR;
            } 
            // fall through
          case 202: break;
          case 40: 
            { return AS;
            } 
            // fall through
          case 203: break;
          case 41: 
            { return BY;
            } 
            // fall through
          case 204: break;
          case 42: 
            { return OF;
            } 
            // fall through
          case 205: break;
          case 43: 
            { return OR;
            } 
            // fall through
          case 206: break;
          case 44: 
            { return ON;
            } 
            // fall through
          case 207: break;
          case 45: 
            { return TO;
            } 
            // fall through
          case 208: break;
          case 46: 
            { return IF;
            } 
            // fall through
          case 209: break;
          case 47: 
            { return IN;
            } 
            // fall through
          case 210: break;
          case 48: 
            { return IS;
            } 
            // fall through
          case 211: break;
          case 49: 
            { return NO;
            } 
            // fall through
          case 212: break;
          case 50: 
            { return CONCAT;
            } 
            // fall through
          case 213: break;
          case 51: 
            { return END;
            } 
            // fall through
          case 214: break;
          case 52: 
            { return FOR;
            } 
            // fall through
          case 215: break;
          case 53: 
            { return AND;
            } 
            // fall through
          case 216: break;
          case 54: 
            { return ADD;
            } 
            // fall through
          case 217: break;
          case 55: 
            { return ALL;
            } 
            // fall through
          case 218: break;
          case 56: 
            { return ASC;
            } 
            // fall through
          case 219: break;
          case 57: 
            { return ROW;
            } 
            // fall through
          case 220: break;
          case 58: 
            { return NOT;
            } 
            // fall through
          case 221: break;
          case 59: 
            { return SET;
            } 
            // fall through
          case 222: break;
          case 60: 
            { return KEY;
            } 
            // fall through
          case 223: break;
          case 61: 
            { return EACH;
            } 
            // fall through
          case 224: break;
          case 62: 
            { return ELSE;
            } 
            // fall through
          case 225: break;
          case 63: 
            { return FAIL;
            } 
            // fall through
          case 226: break;
          case 64: 
            { return FROM;
            } 
            // fall through
          case 227: break;
          case 65: 
            { return TEMP;
            } 
            // fall through
          case 228: break;
          case 66: 
            { return THEN;
            } 
            // fall through
          case 229: break;
          case 67: 
            { return CASE;
            } 
            // fall through
          case 230: break;
          case 68: 
            { return CAST;
            } 
            // fall through
          case 231: break;
          case 69: 
            { return INTO;
            } 
            // fall through
          case 232: break;
          case 70: 
            { return NULL;
            } 
            // fall through
          case 233: break;
          case 71: 
            { return DESC;
            } 
            // fall through
          case 234: break;
          case 72: 
            { return DROP;
            } 
            // fall through
          case 235: break;
          case 73: 
            { return LEFT;
            } 
            // fall through
          case 236: break;
          case 74: 
            { return LIKE;
            } 
            // fall through
          case 237: break;
          case 75: 
            { return GLOB;
            } 
            // fall through
          case 238: break;
          case 76: 
            { return WITH;
            } 
            // fall through
          case 239: break;
          case 77: 
            { return WHEN;
            } 
            // fall through
          case 240: break;
          case 78: 
            { return PLAN;
            } 
            // fall through
          case 241: break;
          case 79: 
            { return VIEW;
            } 
            // fall through
          case 242: break;
          case 80: 
            { return JOIN;
            } 
            // fall through
          case 243: break;
          case 81: 
            { return AFTER;
            } 
            // fall through
          case 244: break;
          case 82: 
            { return ABORT;
            } 
            // fall through
          case 245: break;
          case 83: 
            { return ALTER;
            } 
            // fall through
          case 246: break;
          case 84: 
            { return BEGIN;
            } 
            // fall through
          case 247: break;
          case 85: 
            { return ORDER;
            } 
            // fall through
          case 248: break;
          case 86: 
            { return OUTER;
            } 
            // fall through
          case 249: break;
          case 87: 
            { return RAISE;
            } 
            // fall through
          case 250: break;
          case 88: 
            { return ROWID;
            } 
            // fall through
          case 251: break;
          case 89: 
            { return TABLE;
            } 
            // fall through
          case 252: break;
          case 90: 
            { return CROSS;
            } 
            // fall through
          case 253: break;
          case 91: 
            { return CHECK;
            } 
            // fall through
          case 254: break;
          case 92: 
            { return INNER;
            } 
            // fall through
          case 255: break;
          case 93: 
            { return INDEX;
            } 
            // fall through
          case 256: break;
          case 94: 
            { return LIMIT;
            } 
            // fall through
          case 257: break;
          case 95: 
            { return UNION;
            } 
            // fall through
          case 258: break;
          case 96: 
            { return USING;
            } 
            // fall through
          case 259: break;
          case 97: 
            { return MATCH;
            } 
            // fall through
          case 260: break;
          case 98: 
            { return GROUP;
            } 
            // fall through
          case 261: break;
          case 99: 
            { return WHERE;
            } 
            // fall through
          case 262: break;
          case 100: 
            { return QUERY;
            } 
            // fall through
          case 263: break;
          case 101: 
            { return EXCEPT;
            } 
            // fall through
          case 264: break;
          case 102: 
            { return EXISTS;
            } 
            // fall through
          case 265: break;
          case 103: 
            { return ESCAPE;
            } 
            // fall through
          case 266: break;
          case 104: 
            { return ATTACH;
            } 
            // fall through
          case 267: break;
          case 105: 
            { return ACTION;
            } 
            // fall through
          case 268: break;
          case 106: 
            { return BEFORE;
            } 
            // fall through
          case 269: break;
          case 107: 
            { return OFFSET;
            } 
            // fall through
          case 270: break;
          case 108: 
            { return RENAME;
            } 
            // fall through
          case 271: break;
          case 109: 
            { return REGEXP;
            } 
            // fall through
          case 272: break;
          case 110: 
            { return COLUMN;
            } 
            // fall through
          case 273: break;
          case 111: 
            { return COMMIT;
            } 
            // fall through
          case 274: break;
          case 112: 
            { return CREATE;
            } 
            // fall through
          case 275: break;
          case 113: 
            { return INSERT;
            } 
            // fall through
          case 276: break;
          case 114: 
            { return ISNULL;
            } 
            // fall through
          case 277: break;
          case 115: 
            { return IGNORE;
            } 
            // fall through
          case 278: break;
          case 116: 
            { return DETACH;
            } 
            // fall through
          case 279: break;
          case 117: 
            { return DELETE;
            } 
            // fall through
          case 280: break;
          case 118: 
            { return SELECT;
            } 
            // fall through
          case 281: break;
          case 119: 
            { return HAVING;
            } 
            // fall through
          case 282: break;
          case 120: 
            { return UNIQUE;
            } 
            // fall through
          case 283: break;
          case 121: 
            { return UPDATE;
            } 
            // fall through
          case 284: break;
          case 122: 
            { return PRAGMA;
            } 
            // fall through
          case 285: break;
          case 123: 
            { return VACUUM;
            } 
            // fall through
          case 286: break;
          case 124: 
            { return VALUES;
            } 
            // fall through
          case 287: break;
          case 125: 
            { return EXPLAIN;
            } 
            // fall through
          case 288: break;
          case 126: 
            { return FOREIGN;
            } 
            // fall through
          case 289: break;
          case 127: 
            { return ANALYZE;
            } 
            // fall through
          case 290: break;
          case 128: 
            { return BETWEEN;
            } 
            // fall through
          case 291: break;
          case 129: 
            { return REINDEX;
            } 
            // fall through
          case 292: break;
          case 130: 
            { return RELEASE;
            } 
            // fall through
          case 293: break;
          case 131: 
            { return REPLACE;
            } 
            // fall through
          case 294: break;
          case 132: 
            { return TRIGGER;
            } 
            // fall through
          case 295: break;
          case 133: 
            { return CASCADE;
            } 
            // fall through
          case 296: break;
          case 134: 
            { return COLLATE;
            } 
            // fall through
          case 297: break;
          case 135: 
            { return INDEXED;
            } 
            // fall through
          case 298: break;
          case 136: 
            { return INSTEAD;
            } 
            // fall through
          case 299: break;
          case 137: 
            { return NATURAL;
            } 
            // fall through
          case 300: break;
          case 138: 
            { return NOTNULL;
            } 
            // fall through
          case 301: break;
          case 139: 
            { return DEFAULT;
            } 
            // fall through
          case 302: break;
          case 140: 
            { return WITHOUT;
            } 
            // fall through
          case 303: break;
          case 141: 
            { return PRIMARY;
            } 
            // fall through
          case 304: break;
          case 142: 
            { return VIRTUAL;
            } 
            // fall through
          case 305: break;
          case 143: 
            { return RESTRICT;
            } 
            // fall through
          case 306: break;
          case 144: 
            { return ROLLBACK;
            } 
            // fall through
          case 307: break;
          case 145: 
            { return CONFLICT;
            } 
            // fall through
          case 308: break;
          case 146: 
            { return DEFERRED;
            } 
            // fall through
          case 309: break;
          case 147: 
            { return DATABASE;
            } 
            // fall through
          case 310: break;
          case 148: 
            { return DISTINCT;
            } 
            // fall through
          case 311: break;
          case 149: 
            { return EXCLUSIVE;
            } 
            // fall through
          case 312: break;
          case 150: 
            { return RECURSIVE;
            } 
            // fall through
          case 313: break;
          case 151: 
            { return TEMPORARY;
            } 
            // fall through
          case 314: break;
          case 152: 
            { return INTERSECT;
            } 
            // fall through
          case 315: break;
          case 153: 
            { return INITIALLY;
            } 
            // fall through
          case 316: break;
          case 154: 
            { return IMMEDIATE;
            } 
            // fall through
          case 317: break;
          case 155: 
            { return SAVEPOINT;
            } 
            // fall through
          case 318: break;
          case 156: 
            { return REFERENCES;
            } 
            // fall through
          case 319: break;
          case 157: 
            { return CONSTRAINT;
            } 
            // fall through
          case 320: break;
          case 158: 
            { return DEFERRABLE;
            } 
            // fall through
          case 321: break;
          case 159: 
            { return TRANSACTION;
            } 
            // fall through
          case 322: break;
          case 160: 
            { return CURRENT_TIME;
            } 
            // fall through
          case 323: break;
          case 161: 
            { return CURRENT_DATE;
            } 
            // fall through
          case 324: break;
          case 162: 
            { return AUTOINCREMENT;
            } 
            // fall through
          case 325: break;
          case 163: 
            { return CURRENT_TIMESTAMP;
            } 
            // fall through
          case 326: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
