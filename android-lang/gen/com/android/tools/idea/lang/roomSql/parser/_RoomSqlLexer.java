/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.tools.idea.lang.roomSql.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.android.tools.idea.lang.roomSql.psi.RoomPsiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_RoomSqlLexer.flex</tt>
 */
public class _RoomSqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14960 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\10\1\11\1\14\1"+
    "\15\3\0\1\16\1\17\1\20\1\21\2\22\1\23\3\22\1\23\7\22\1\24\10\22\1\25\50\22"+
    "\1\26\1\22\1\27\1\30\1\31\1\32\2\30\16\0\1\33\1\34\1\35\1\36\2\22\1\37\11"+
    "\22\1\40\21\22\1\41\1\42\23\22\1\30\1\43\3\22\1\23\1\44\1\43\4\22\1\45\1\46"+
    "\4\0\1\47\1\50\1\30\3\22\2\51\1\30\1\52\1\53\1\0\1\54\5\22\1\55\3\0\1\56\1"+
    "\57\13\22\1\60\1\47\1\61\1\62\1\0\1\63\1\30\1\64\1\65\3\22\3\0\1\66\12\22"+
    "\1\67\1\0\1\70\1\30\1\0\1\71\3\22\1\55\1\72\1\21\2\22\1\67\1\73\1\74\1\75"+
    "\2\30\3\22\1\76\10\30\1\77\1\31\6\30\1\100\2\0\1\101\1\102\6\22\1\103\2\0"+
    "\1\104\1\22\1\105\1\0\2\43\1\106\1\107\1\110\2\22\1\77\1\111\1\112\1\113\1"+
    "\114\1\64\1\115\1\105\1\0\1\116\1\53\1\106\1\117\1\110\2\22\1\77\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\1\0\1\127\1\30\1\106\1\40\1\37\2\22\1\77\1"+
    "\130\1\112\1\47\1\131\1\132\1\30\1\105\1\0\1\44\1\30\1\106\1\107\1\110\2\22"+
    "\1\77\1\130\1\112\1\113\1\123\1\126\1\115\1\105\1\0\1\44\1\30\1\133\1\134"+
    "\1\135\1\136\1\137\1\134\1\22\1\140\1\141\1\142\1\143\1\30\1\126\1\0\1\30"+
    "\1\44\1\106\1\33\1\77\2\22\1\77\1\144\1\145\1\146\1\142\1\147\1\27\1\105\1"+
    "\0\2\30\1\150\1\33\1\77\2\22\1\77\1\144\1\112\1\146\1\142\1\147\1\35\1\105"+
    "\1\0\1\151\1\30\1\150\1\33\1\77\4\22\1\152\1\146\1\153\1\64\1\30\1\105\1\0"+
    "\1\30\1\42\1\150\1\22\1\23\1\42\2\22\1\37\1\154\1\23\1\155\1\156\1\0\2\30"+
    "\1\157\1\30\1\43\5\22\1\160\1\161\1\162\1\101\1\0\1\163\4\30\1\164\1\165\1"+
    "\166\1\43\1\167\1\170\1\160\1\171\1\172\1\173\1\0\1\174\4\30\1\132\2\30\1"+
    "\163\1\0\1\163\1\175\1\176\1\22\1\43\3\22\1\31\1\46\1\0\1\146\1\177\1\0\1"+
    "\46\3\0\1\52\1\200\7\30\5\22\1\55\1\0\1\201\1\0\1\163\1\67\1\202\1\203\1\204"+
    "\1\205\1\22\1\206\1\207\1\0\1\173\4\22\1\40\1\20\5\22\1\210\51\22\1\135\1"+
    "\23\1\135\5\22\1\135\4\22\1\135\1\23\1\135\1\22\1\23\7\22\1\135\10\22\1\211"+
    "\4\30\2\22\2\30\12\22\1\31\1\30\1\43\114\22\1\107\2\22\1\212\2\22\1\51\11"+
    "\22\1\134\1\132\1\30\1\22\1\33\1\213\1\30\2\22\1\213\1\30\2\22\1\214\1\30"+
    "\1\22\1\33\1\215\1\30\6\22\1\216\3\0\1\217\1\220\1\0\1\163\3\30\1\221\1\0"+
    "\1\163\13\22\1\30\5\22\1\222\10\22\1\223\1\30\3\22\1\31\1\0\1\2\1\0\1\2\1"+
    "\126\1\0\3\22\1\223\1\31\1\30\5\22\1\116\2\0\1\57\1\163\1\0\1\163\4\30\2\22"+
    "\1\162\1\2\6\22\1\177\1\101\3\0\1\113\1\0\1\163\1\0\1\163\1\45\13\30\1\224"+
    "\5\22\1\216\1\0\1\224\1\116\1\0\1\163\1\30\1\225\1\2\1\30\1\226\3\22\1\104"+
    "\1\204\1\0\1\71\4\22\1\67\1\0\1\2\1\30\4\22\1\216\2\0\1\30\1\0\1\227\1\0\1"+
    "\71\3\22\1\223\12\30\1\230\2\0\1\231\1\232\1\30\30\22\4\0\1\101\2\30\1\100"+
    "\42\22\2\223\4\22\2\223\1\22\1\233\3\22\1\223\6\22\1\33\1\172\1\234\1\31\1"+
    "\235\1\116\1\22\1\31\1\234\1\31\1\236\1\237\3\30\1\240\1\30\1\45\1\132\1\30"+
    "\1\241\1\242\1\52\1\243\1\44\1\45\2\30\1\22\1\31\3\22\1\51\2\30\1\0\1\52\1"+
    "\244\1\0\1\245\1\30\1\246\1\42\1\154\1\247\1\32\1\250\1\22\1\251\1\252\1\253"+
    "\2\30\5\22\1\132\116\30\5\22\1\23\5\22\1\23\20\22\1\31\1\254\1\255\1\30\4"+
    "\22\1\40\1\20\7\22\1\45\1\30\1\64\2\22\1\23\1\30\10\23\4\0\5\30\1\45\72\30"+
    "\1\256\3\30\1\43\1\206\1\247\1\31\1\43\11\22\1\23\1\257\1\43\12\22\1\210\1"+
    "\252\4\22\1\223\1\43\12\22\1\23\2\30\3\22\1\51\6\30\170\22\1\223\11\30\71"+
    "\22\1\31\6\30\21\22\1\31\10\30\5\22\1\223\41\22\1\31\2\22\1\0\1\255\2\30\5"+
    "\22\1\162\1\100\1\260\3\22\1\64\12\22\1\163\3\30\1\45\1\22\1\42\14\22\1\261"+
    "\1\116\1\30\1\22\1\51\11\30\1\22\1\262\1\263\2\22\1\55\2\30\1\132\6\22\1\116"+
    "\1\30\1\71\5\22\1\216\1\0\1\52\1\30\1\0\1\163\2\0\1\71\1\53\1\0\1\71\2\22"+
    "\1\67\1\173\2\22\1\162\1\0\1\2\1\30\3\22\1\31\1\102\5\22\1\55\1\0\1\245\1"+
    "\45\1\0\1\163\4\30\5\22\1\104\1\101\1\30\1\263\1\264\1\0\1\163\2\22\1\23\1"+
    "\265\6\22\1\203\1\266\1\222\2\30\1\267\1\22\1\55\1\270\1\30\3\271\1\30\2\23"+
    "\22\30\4\22\1\55\1\272\1\0\1\163\64\22\1\116\1\30\2\22\1\23\1\273\5\22\1\116"+
    "\40\30\55\22\1\223\15\22\1\27\4\30\1\23\1\30\1\273\1\274\1\22\1\77\1\23\1"+
    "\172\1\275\15\22\1\27\3\30\1\273\54\22\1\223\2\30\10\22\1\42\6\22\5\30\1\22"+
    "\1\31\2\0\2\30\1\101\1\30\1\137\2\30\1\252\3\30\1\44\1\33\20\22\1\276\1\241"+
    "\1\30\1\0\1\163\1\43\2\22\1\117\1\43\2\22\1\51\1\277\12\22\1\23\3\42\1\300"+
    "\1\301\2\30\1\302\1\22\1\144\2\22\1\23\2\22\1\303\1\22\1\223\1\22\1\223\4"+
    "\30\17\22\1\51\10\30\6\22\1\31\20\30\1\304\20\30\3\22\1\31\6\22\1\132\5\30"+
    "\3\22\1\23\2\30\3\22\1\51\6\30\3\22\1\223\4\22\1\116\1\22\1\247\5\30\23\22"+
    "\1\223\1\0\1\163\52\30\1\223\1\77\4\22\1\40\1\305\2\22\1\223\25\30\2\22\1"+
    "\223\1\30\3\22\1\27\10\30\7\22\1\277\10\30\1\306\1\100\1\144\1\43\2\22\1\116"+
    "\1\122\4\30\3\22\1\31\20\30\6\22\1\223\1\30\2\22\1\223\1\30\2\22\1\51\21\30"+
    "\11\22\1\132\66\30\1\226\6\22\1\0\1\101\3\30\1\126\1\0\2\30\1\226\5\22\1\0"+
    "\1\307\2\30\3\22\1\132\1\0\1\163\1\226\3\22\1\162\1\0\1\146\1\0\10\30\1\226"+
    "\5\22\1\55\1\0\1\310\1\30\1\0\1\163\24\30\5\22\1\55\1\0\1\30\1\0\1\163\46"+
    "\30\55\22\1\23\22\30\14\22\1\51\63\30\5\22\1\23\72\30\7\22\1\132\130\30\10"+
    "\22\1\31\1\30\1\104\4\0\1\101\1\30\1\64\1\226\1\22\14\30\1\27\153\30\1\311"+
    "\1\312\2\0\1\313\1\2\3\30\1\314\22\30\1\315\67\30\12\22\1\33\10\22\1\33\1"+
    "\316\1\317\1\22\1\320\1\144\7\22\1\40\1\321\2\33\3\22\1\322\1\172\1\42\1\77"+
    "\51\22\1\223\3\22\1\77\2\22\1\210\3\22\1\210\2\22\1\33\3\22\1\33\2\22\1\23"+
    "\3\22\1\23\3\22\1\77\3\22\1\77\2\22\1\210\1\323\6\0\1\144\3\22\1\164\1\43"+
    "\1\210\1\324\1\246\1\325\1\164\1\233\1\164\2\210\1\125\1\22\1\37\1\22\1\116"+
    "\1\326\1\37\1\22\1\116\50\30\32\22\1\23\5\30\106\22\1\31\1\30\33\22\1\223"+
    "\74\30\1\124\3\30\14\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1720 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\6\1\1\1\4\2\1\1\4\6\6\4\0\1\1\1\27\1\23\1\0\1\6\1\31\1\32\1\22\1\33\1"+
    "\34\1\3\1\14\1\35\1\10\1\12\1\2\1\15\11\11\1\21\1\36\1\37\1\30\1\40\2\0\1"+
    "\41\1\43\1\50\1\54\1\13\1\56\1\66\1\63\1\52\1\74\1\70\1\57\1\65\1\53\1\45"+
    "\1\72\1\75\1\46\1\62\1\47\1\64\1\73\1\67\1\16\1\60\1\61\1\25\1\0\1\26\1\0"+
    "\1\71\1\24\1\42\1\44\1\51\1\55\1\20\1\17\1\66\1\16\1\60\1\61\1\0\1\76\1\0"+
    "\1\77\6\6\1\7\2\6\1\1\1\0\4\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0\17\5\1\0"+
    "\2\52\15\5\1\62\2\5\4\0\4\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\5\5\1\0\2\5\2\0\4"+
    "\5\10\0\1\5\1\0\3\5\1\0\1\5\1\0\4\5\1\0\13\5\1\0\3\5\1\0\5\6\2\0\6\5\1\0\7"+
    "\5\1\0\1\5\15\0\1\5\1\0\15\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\3\5\5\0\5\6\6"+
    "\0\1\5\4\0\3\6\5\0\3\5\7\6\4\0\2\5\1\6\13\5\1\0\1\5\7\6\2\5\2\6\1\0\4\6\2"+
    "\5\2\6\3\5\2\0\1\5\7\0\1\6\1\5\1\6\6\5\3\6\2\0\11\5\3\6\1\5\6\0\2\6\6\5\4"+
    "\6\2\5\2\0\2\6\1\5\11\6\1\5\3\6\1\5\5\6\2\0\1\5\3\6\4\0\1\5\1\0\6\5\4\0\13"+
    "\6\1\0\4\6\6\5\3\6\1\5\2\6\1\5\7\6\2\5\2\6\2\0\2\6\1\0\3\6\1\0\10\5\2\0\2"+
    "\5\2\0\6\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\1\5\5\0\2\5\1\0"+
    "\5\5\4\0\3\5\4\0\2\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3"+
    "\6\3\0\1\6\7\0\4\5\1\0\1\5\7\0\4\6\3\5\1\6\2\0\1\5\1\0\2\5\1\0\3\5\2\6\1\0"+
    "\3\6\2\0\1\5\11\0\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\2\5\3\0\2\5\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\5\6\0\1\6\4\5\1\0\5\5\3\0\1"+
    "\5\7\6\1\0\2\6\5\0\2\6\3\0\2\6\1\0\3\5\1\0\2\5\5\0\3\5\2\0\1\5\3\6\1\0\4\6"+
    "\1\5\1\0\4\5\1\0\1\5\4\0\1\6\4\0\6\6\1\0\1\6\3\0\2\6\4\0\1\5\1\6\2\5\7\6\4"+
    "\0\10\5\3\6\7\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\3\5\1\0\1"+
    "\5\1\0\1\5\2\0\2\5\1\0\3\5\2\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2\0\2\6"+
    "\2\0\4\5\5\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6\5\5\3\6\6\0\1\6\1\0\7\6\1\5\2\6\4"+
    "\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6\5\5\14\6\1\5\1\6\3\5\1\0\7\5\2\0\3\6\1\1\11"+
    "\5\3\6\3\0\2\5\2\6\4\0\1\5\1\0\2\6\4\0\4\5\10\6\3\0\1\5\3\0\2\5\1\6\5\0\3"+
    "\6\2\0\1\5\1\6\1\5\5\0\6\5\2\0\5\6\3\5\3\0\10\6\5\5\2\6\3\0\3\5\3\6\1\0\5"+
    "\6\4\5\1\6\4\5\3\6\2\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\2\0\3\5\1\0\6\5\2\0"+
    "\2\5\13\1\5\6\2\1\5\6\1\1\4\0\1\5\12\0\1\1\2\0\6\6\1\0\1\6\3\0\4\6\11\0\1"+
    "\5\4\0\1\5\1\0\5\5\2\0\1\5\1\0\1\70\3\5\1\0\3\5\2\0\4\5\5\0\5\5\4\0\1\5\4"+
    "\0\4\5\3\6\2\5\4\0\1\1\4\0\3\5\1\0\2\6\2\0\3\5\6\6\1\0\2\5\2\0\4\5\1\0\2\5"+
    "\1\6\3\5\1\6\4\5\1\6\10\5\2\6\4\0\1\5\1\6\4\0\1\6\5\5\2\6\3\0\3\5\4\0\3\5"+
    "\2\6\2\0\6\5\1\0\3\6\1\0\2\6\5\0\5\5\5\0\1\5\1\6\3\5\1\0\2\5\1\0\7\5\2\0\1"+
    "\6\6\0\2\5\2\0\3\5\3\0\2\5\3\0\2\5\2\0\3\6\4\0\3\5\1\0\2\5\1\0\1\5\5\0\1\6"+
    "\2\0\1\5\3\0\1\5\2\0\2\5\3\6\1\0\2\6\1\0\3\6\2\0\1\6\2\0\1\6\4\5\10\0\5\6"+
    "\3\0\6\6\2\0\3\6\2\0\4\6\4\0\3\6\5\0\1\5\2\0\2\5\2\0\4\5\1\0\4\5\1\0\1\5\1"+
    "\0\6\5\2\0\5\5\1\0\4\5\1\0\4\5\2\0\2\6\1\0\1\5\1\0\1\5\5\0\1\5\1\0\1\5\1\0"+
    "\3\5\1\0\3\5\1\0\3\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\5\1\11\1\7\2\5\6\1\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\25\5"+
    "\1\23\1\24\1\25\1\26\1\7\1\0\5\5\1\0"+
    "\3\5\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\7\5\1\43\2\5"+
    "\1\44\1\45\1\46\1\47\6\5\1\50\7\5\1\51"+
    "\1\52\1\53\3\5\1\54\31\5\1\55\1\25\1\0"+
    "\1\7\4\5\1\56\2\5\1\7\1\5\1\57\6\5"+
    "\1\60\1\61\1\5\1\62\1\63\21\5\1\64\26\5"+
    "\1\65\13\5\1\66\13\5\1\67\11\5\1\25\1\0"+
    "\4\5\1\70\1\71\1\5\1\72\1\5\1\73\30\5"+
    "\1\74\3\5\1\75\1\76\1\77\13\5\1\100\12\5"+
    "\1\101\4\5\1\102\1\5\1\103\1\5\1\104\1\5"+
    "\1\105\11\5\1\106\1\107\1\5\1\110\2\5\1\111"+
    "\2\5\1\112\1\5\1\113\7\5\1\114\1\115\3\5"+
    "\1\116\3\5\1\117\1\5\1\120\1\121\10\5\1\122"+
    "\1\5\1\123\1\5\1\124\11\5\1\125\1\126\3\5"+
    "\1\127\1\130\15\5\1\131\3\5\1\132\1\5\1\133"+
    "\1\5\1\134\1\135\1\5\1\136\5\5\1\137\1\140"+
    "\1\5\1\141\1\5\1\142\1\5\1\143\1\144\2\5"+
    "\1\145\1\5\1\146\3\5\1\147\2\5\1\150\11\5"+
    "\1\151\1\152\1\153\4\5\1\154\1\5\1\155\1\5"+
    "\1\156\4\5\1\157\1\160\2\5\1\161\1\5\1\162"+
    "\1\163\1\164\1\5\1\165\1\5\1\166\1\167\2\5"+
    "\1\170\1\171\1\172\1\5\1\173\2\5\1\174\1\175"+
    "\1\5\1\176\3\5\1\177\1\200\2\5\1\201\3\5"+
    "\1\202\1\203\1\5\1\204\1\205\2\5\1\206\3\5"+
    "\1\207\1\210\1\211\4\5\1\212\1\213\2\5\1\214"+
    "\5\5\1\215\1\5\1\216\1\217\1\5\1\220\2\5"+
    "\1\221\1\222\4\5\1\223\1\224\1\225\1\5\1\226"+
    "\1\5\1\227\1\5\1\230\2\5\1\231\1\5\1\232"+
    "\3\5\1\233\1\234\1\235\4\5\1\236";

  private static int [] zzUnpackAction() {
    int [] result = new int[564];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\100\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\u0200\0\100\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340"+
    "\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0"+
    "\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0"+
    "\0\u0a00\0\u0a40\0\u0a80\0\100\0\u0ac0\0\u0b00\0\u0b40\0\u0b80"+
    "\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80"+
    "\0\u0dc0\0\u0300\0\u0e00\0\u0e40\0\u0e80\0\100\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u0100"+
    "\0\u1140\0\u1180\0\u0100\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0"+
    "\0\u1300\0\u0100\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u0100\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640"+
    "\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840"+
    "\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40"+
    "\0\u1c80\0\100\0\u1cc0\0\u1d00\0\u1d00\0\u1d40\0\u1d80\0\u1dc0"+
    "\0\u1e00\0\u0100\0\u1e40\0\u1e80\0\u0d00\0\u1ec0\0\u1f00\0\u1f40"+
    "\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u0100\0\u0100\0\u20c0"+
    "\0\u0100\0\u0100\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240"+
    "\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440"+
    "\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840"+
    "\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40"+
    "\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40"+
    "\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u0100\0\u2e00"+
    "\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000"+
    "\0\u3040\0\u3080\0\u0100\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0"+
    "\0\u3200\0\u3240\0\u3280\0\u32c0\0\100\0\u1cc0\0\u3300\0\u3340"+
    "\0\u3380\0\u33c0\0\u0100\0\u0100\0\u3400\0\u0100\0\u3440\0\u0100"+
    "\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640"+
    "\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840"+
    "\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00\0\u3a40"+
    "\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u0100\0\u0100\0\u0100\0\u3b80"+
    "\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u3d00\0\u3d40\0\u3d80"+
    "\0\u3dc0\0\u3e00\0\u0100\0\u3e40\0\u3e80\0\u3ec0\0\u3f00\0\u3f40"+
    "\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u0100\0\u40c0\0\u4100"+
    "\0\u4140\0\u4180\0\u0100\0\u41c0\0\u0100\0\u4200\0\u0100\0\u4240"+
    "\0\u0100\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400"+
    "\0\u4440\0\u4480\0\u0100\0\u44c0\0\u4500\0\u0100\0\u4540\0\u4580"+
    "\0\u0100\0\u45c0\0\u4600\0\u0100\0\u4640\0\u0100\0\u4680\0\u46c0"+
    "\0\u4700\0\u4740\0\u4780\0\u47c0\0\u4800\0\u0100\0\u0100\0\u4840"+
    "\0\u4880\0\u48c0\0\u0100\0\u4900\0\u4940\0\u4980\0\u0100\0\u49c0"+
    "\0\u0100\0\u0100\0\u4a00\0\u4a40\0\u4a80\0\u4ac0\0\u4b00\0\u4b40"+
    "\0\u4b80\0\u4bc0\0\u0100\0\u4c00\0\u0100\0\u4c40\0\u0100\0\u4c80"+
    "\0\u4cc0\0\u4d00\0\u4d40\0\u4d80\0\u4dc0\0\u4e00\0\u4e40\0\u4e80"+
    "\0\u0100\0\u0100\0\u4ec0\0\u4f00\0\u4f40\0\u0100\0\u4f80\0\u4fc0"+
    "\0\u5000\0\u5040\0\u5080\0\u50c0\0\u5100\0\u5140\0\u5180\0\u51c0"+
    "\0\u5200\0\u5240\0\u5280\0\u52c0\0\u0100\0\u5300\0\u5340\0\u5380"+
    "\0\u0100\0\u53c0\0\u0100\0\u5400\0\u0100\0\u0100\0\u5440\0\u0100"+
    "\0\u5480\0\u54c0\0\u5500\0\u5540\0\u5580\0\u0100\0\u0100\0\u55c0"+
    "\0\u0100\0\u5600\0\u0100\0\u5640\0\u0100\0\u0100\0\u5680\0\u56c0"+
    "\0\u0100\0\u5700\0\u0100\0\u5740\0\u5780\0\u57c0\0\u0100\0\u5800"+
    "\0\u5840\0\u0100\0\u5880\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0"+
    "\0\u5a00\0\u5a40\0\u5a80\0\u0100\0\u0100\0\u0100\0\u5ac0\0\u5b00"+
    "\0\u5b40\0\u5b80\0\u0100\0\u5bc0\0\u0100\0\u5c00\0\u0100\0\u5c40"+
    "\0\u5c80\0\u5cc0\0\u5d00\0\u0100\0\u0100\0\u5d40\0\u5d80\0\u0100"+
    "\0\u5dc0\0\u0100\0\u0100\0\u0100\0\u5e00\0\u0100\0\u5e40\0\u0100"+
    "\0\u0100\0\u5e80\0\u5ec0\0\u0100\0\u0100\0\u0100\0\u5f00\0\u0100"+
    "\0\u5f40\0\u5f80\0\u0100\0\u0100\0\u5fc0\0\u0100\0\u6000\0\u6040"+
    "\0\u6080\0\u0100\0\u0100\0\u60c0\0\u6100\0\u0100\0\u6140\0\u6180"+
    "\0\u61c0\0\u0100\0\u0100\0\u6200\0\u0100\0\u0100\0\u6240\0\u6280"+
    "\0\u0100\0\u62c0\0\u6300\0\u6340\0\u0100\0\u0100\0\u0100\0\u6380"+
    "\0\u63c0\0\u6400\0\u6440\0\u0100\0\u0100\0\u6480\0\u64c0\0\u0100"+
    "\0\u6500\0\u6540\0\u6580\0\u65c0\0\u6600\0\u0100\0\u6640\0\u0100"+
    "\0\u0100\0\u6680\0\u0100\0\u66c0\0\u6700\0\u0100\0\u0100\0\u6740"+
    "\0\u6780\0\u67c0\0\u6800\0\u0100\0\u0100\0\u0100\0\u6840\0\u0100"+
    "\0\u6880\0\u0100\0\u68c0\0\u0100\0\u6900\0\u6940\0\u0100\0\u6980"+
    "\0\u0100\0\u69c0\0\u6a00\0\u6a40\0\u6a80\0\u0100\0\u0100\0\u6ac0"+
    "\0\u6b00\0\u6b40\0\u6b80\0\u0100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[564];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\2\1\3"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\12\1\17\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\2\36\2\37\1\40\1\41\1\42\2\43\1\44"+
    "\1\45\2\46\1\16\1\47\2\6\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\6\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\101\0\1\3\2\0\1\3\2\0"+
    "\1\3\73\0\1\65\101\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\35\6\12\0\1\66\100\0"+
    "\1\10\1\67\1\70\1\0\1\10\2\0\1\70\70\0"+
    "\1\67\3\0\1\67\67\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\71\2\6\20\0\2\72\10\6"+
    "\1\73\3\6\1\74\2\6\1\75\13\6\13\0\1\10"+
    "\1\67\1\70\1\0\1\10\1\76\1\0\1\70\64\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\1\20\1\21\15\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\2\77\2\6\1\100"+
    "\1\101\27\6\7\0\3\102\1\0\1\102\1\0\1\102"+
    "\1\0\4\102\20\0\35\102\2\0\22\20\1\103\55\20"+
    "\23\21\1\104\54\21\24\22\1\105\53\22\26\23\1\106"+
    "\51\23\30\0\1\107\77\0\1\110\77\0\1\111\6\0"+
    "\1\112\1\113\67\0\1\114\7\0\1\115\44\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\1\116\1\6"+
    "\20\0\2\6\2\117\2\6\1\120\2\121\1\6\1\122"+
    "\2\123\1\116\1\124\2\6\1\125\1\6\1\126\11\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\127\1\0\3\6"+
    "\1\127\20\0\17\6\1\130\15\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\1\131\1\6\20\0"+
    "\5\6\1\132\4\6\1\133\2\6\1\131\5\6\1\134"+
    "\11\6\7\0\3\6\1\0\1\6\1\0\1\135\1\0"+
    "\3\6\1\135\20\0\2\136\2\6\1\137\30\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\140\1\0\3\6\1\140"+
    "\20\0\2\141\2\6\1\142\1\143\14\6\1\144\12\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\2\145\2\6\1\146\1\147\14\6\1\150\1\151"+
    "\11\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\1\152\1\6\20\0\12\6\1\153\2\6\1\152"+
    "\3\6\1\154\2\6\1\155\1\156\7\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\2\157"+
    "\2\6\1\160\16\6\1\161\11\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\162\1\0\3\6\1\162\20\0\2\163"+
    "\3\6\1\164\3\6\1\165\23\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\166\1\0\3\6\1\166\20\0\11\6"+
    "\1\167\23\6\7\0\3\6\1\0\1\6\1\0\1\170"+
    "\1\0\3\6\1\170\20\0\2\171\33\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\2\172"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\12\6\1\173\6\6\1\174\7\6\1\175"+
    "\3\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\2\176\33\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\5\6\1\177\10\6"+
    "\1\200\16\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\11\6\1\201\10\6\1\202\12\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\203\1\0\3\6"+
    "\1\203\20\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\5\6\1\204\10\6\1\205"+
    "\16\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\2\206\7\6\1\207\23\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\4\6"+
    "\1\210\30\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\23\6\1\211\11\6\100\0\1\212"+
    "\1\0\3\65\1\213\74\65\4\66\1\0\73\66\11\0"+
    "\1\67\1\0\1\70\1\0\1\67\2\0\1\70\67\0"+
    "\1\214\1\215\2\0\1\214\1\215\67\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\7\6\2\216"+
    "\1\217\17\6\1\220\3\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\7\6\2\221\24\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\13\6\2\222\20\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\21\6\1\223\13\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\7\6\2\224\24\6\13\0\1\225\3\0\1\225"+
    "\1\0\2\225\21\0\1\225\1\0\1\225\4\0\1\225"+
    "\3\0\1\225\27\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\11\6\1\226\23\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\5\6"+
    "\1\227\27\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\4\6\1\230\30\6\24\0\1\20"+
    "\100\0\1\21\100\0\1\22\60\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\6\6\1\231\26\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\4\6\1\232\30\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\6\6\1\233\26\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\6\6\1\234\26\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\2\235\11\6\2\236"+
    "\20\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\13\6\2\237\20\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\6\6\1\240"+
    "\7\6\1\241\16\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\7\6\2\242\24\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\6\6\1\243\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\2\6\1\244\1\6\20\0\6\6\1\245"+
    "\6\6\1\244\7\6\1\246\7\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\1\247\1\6\20\0"+
    "\15\6\1\247\17\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\13\6\2\250\20\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\6\6\1\251\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\2\6\1\252\1\6\20\0\7\6\2\253"+
    "\1\254\1\255\2\6\1\252\1\256\2\6\1\257\3\6"+
    "\1\260\3\6\1\261\3\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\11\6\1\262\23\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\16\6\1\263\7\6\1\264\6\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\24\6"+
    "\1\265\10\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\2\6\2\266\31\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\2\267"+
    "\7\6\1\270\23\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\271\1\0\3\6\1\271\20\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\21\6"+
    "\1\272\13\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\12\6\1\273\3\6\1\274\5\6"+
    "\1\275\10\6\7\0\3\6\1\0\1\6\1\0\1\276"+
    "\1\0\3\6\1\276\20\0\4\6\1\277\30\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\300\1\0\3\6\1\300"+
    "\20\0\35\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\5\6\1\301\27\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\6\6"+
    "\1\302\2\6\1\303\1\304\2\305\4\6\1\306\13\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\12\6\1\307\22\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\24\6\1\310\10\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\12\6\1\311\22\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\6\6\1\312\26\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\6\6\1\313\26\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\16\6\1\314\16\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\2\6"+
    "\1\315\1\6\20\0\6\6\1\316\6\6\1\315\1\317"+
    "\2\6\1\320\13\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\6\6\1\321\26\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\4\6\1\322\30\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\21\6\1\323\13\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\2\6\1\324"+
    "\1\6\20\0\15\6\1\324\17\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\24\6\1\325"+
    "\2\6\1\326\5\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\6\6\1\327\7\6\1\330"+
    "\16\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\32\6\1\331\2\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\32\6\1\332"+
    "\2\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\11\6\1\333\23\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\11\6\1\334"+
    "\23\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\13\6\2\335\20\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\6\6\1\336"+
    "\26\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\4\6\1\337\30\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\4\6\1\340"+
    "\30\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\6\6\1\341\26\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\342\1\0\3\6\1\342\20\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\17\6\1\343\15\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\2\344\7\6\1\345"+
    "\23\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\2\346\33\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\7\6\2\347\5\6"+
    "\1\350\16\6\7\0\3\6\1\0\1\6\1\0\1\351"+
    "\1\0\3\6\1\351\20\0\5\6\1\352\27\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\11\6\1\353\23\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\354\1\0\3\6\1\354\20\0\35\6\2\0\2\65"+
    "\1\355\1\356\74\65\11\0\1\215\3\0\1\215\67\0"+
    "\3\6\1\0\1\6\1\0\1\357\1\0\3\6\1\357"+
    "\20\0\16\6\1\360\16\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\21\6\1\361\13\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\16\6\1\362\16\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\22\6\1\363\12\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\364\1\0\3\6"+
    "\1\364\20\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\2\365\33\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\16\6"+
    "\1\366\16\6\7\0\3\6\1\0\1\6\1\0\1\367"+
    "\1\0\3\6\1\367\20\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\24\6\1\370"+
    "\10\6\7\0\3\6\1\0\1\6\1\0\1\371\1\0"+
    "\3\6\1\371\20\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\5\6\1\372\27\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\2\373\33\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\11\6\1\374\23\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\16\6\1\375\16\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\376\1\0\3\6\1\376\20\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\4\6"+
    "\1\377\30\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\4\6\1\u0100\30\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\26\6"+
    "\1\u0101\6\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\11\6\1\u0102\23\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\21\6"+
    "\1\u0103\13\6\7\0\3\6\1\0\1\6\1\0\1\u0104"+
    "\1\0\3\6\1\u0104\20\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u0105\1\0\3\6\1\u0105\20\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u0106\1\0\3\6"+
    "\1\u0106\20\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\23\6\1\u0107\11\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\12\6\1\u0108\22\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\2\u0109\33\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\u010a\1\0\3\6\1\u010a\20\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\6\6\1\u010b\26\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u010c\1\0\3\6\1\u010c\20\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\16\6\1\u010d\16\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\21\6\1\u010e\13\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\16\6\1\u010f\16\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\11\6\1\u0110\23\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\31\6\1\u0111\3\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\16\6\1\u0112\16\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\12\6\1\u0113\22\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\25\6\1\u0114\7\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\12\6\1\u0115\22\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\u0116\1\0\3\6\1\u0116\20\0\6\6\1\u0117"+
    "\2\u0118\24\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\1\u0119\1\6\20\0\15\6\1\u0119\3\6"+
    "\1\u011a\13\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\16\6\1\u011b\4\6\1\u011c\11\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\24\6\1\u011d\10\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\2\u011e\33\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\21\6\1\u011f\13\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\7\6\2\u0120\24\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\5\6\1\u0121\27\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u0122\1\0\3\6\1\u0122\20\0\4\6\1\u0123\30\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\6\6\1\u0124\26\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\u0125\1\0\3\6\1\u0125\20\0\35\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\u0126\1\0\3\6\1\u0126"+
    "\20\0\35\6\7\0\3\6\1\0\1\6\1\0\1\u0127"+
    "\1\0\3\6\1\u0127\20\0\6\6\1\u0128\26\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\23\6\1\u0129\11\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u012a\1\0\3\6\1\u012a\20\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\4\6"+
    "\1\u012b\30\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\23\6\1\u012c\11\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\12\6"+
    "\1\u012d\22\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\16\6\1\u012e\16\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\u012f\1\0\3\6\1\u012f\20\0"+
    "\2\u0130\33\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\2\u0131\33\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u0132\1\0\3\6\1\u0132\20\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\7\6\2\u0133\24\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\2\u0134\33\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\31\6\1\u0135\3\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\6\6\1\u0136\26\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\6\6\1\u0137\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\11\6\1\u0138\23\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\u0139\1\0\3\6\1\u0139"+
    "\20\0\35\6\7\0\3\6\1\0\1\6\1\0\1\u013a"+
    "\1\0\3\6\1\u013a\20\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u013b\1\0\3\6\1\u013b\20\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\11\6\1\u013c\23\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\4\6\1\u013d\27\6"+
    "\1\u013e\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\12\6\1\u013f\22\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\2\u0140\33\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\7\6\2\u0141\24\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\23\6\1\u0142\11\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\2\6\2\u0143\31\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\22\6\1\u0144\12\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\5\6\1\u0145\4\6\1\u0146\22\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\25\6"+
    "\1\u0147\7\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\24\6\1\u0148\10\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\12\6"+
    "\1\u0149\22\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\23\6\1\u014a\11\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\23\6"+
    "\1\u014b\11\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\26\6\1\u014c\6\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\6\6"+
    "\1\u014d\26\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\12\6\1\u014e\22\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\5\6"+
    "\1\u014f\27\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\31\6\1\u0150\3\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\23\6"+
    "\1\u0151\11\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\6\6\1\u0152\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\2\u0153"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\31\6\1\u0154\3\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\11\6\1\u0155"+
    "\23\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\5\6\1\u0156\27\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\6\6\1\u0157"+
    "\26\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\7\6\2\u0158\24\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\4\6\1\u0159"+
    "\30\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\17\6\1\u015a\15\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\5\6\1\u015b"+
    "\27\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\11\6\1\u015c\23\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\5\6\1\u015d"+
    "\27\6\7\0\3\6\1\0\1\6\1\0\1\u015e\1\0"+
    "\3\6\1\u015e\20\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\12\6\1\u015f\22\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u0160\1\0\3\6"+
    "\1\u0160\20\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\5\6\1\u0161\27\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\5\6\1\u0162\27\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\5\6\1\u0163\27\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\5\6\1\u0164\27\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\13\6\2\u0165\20\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\24\6\1\u0166\10\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\2\u0167\33\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\5\6"+
    "\1\u0168\27\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\u0169\2\6\20\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\2\u016a"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\u016b\1\0"+
    "\3\6\1\u016b\20\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\2\6\2\u016c\31\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\13\6\2\u016d\20\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\4\6\1\u016e\30\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u016f\1\0\3\6"+
    "\1\u016f\20\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\21\6\1\u0170\13\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\25\6\1\u0171\7\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\2\u0172\33\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\16\6"+
    "\1\u0173\16\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\6\6\1\u0174\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\2\u0175"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\24\6\1\u0176\10\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\11\6\1\u0177"+
    "\23\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\6\6\1\u0178\26\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\21\6\1\u0179"+
    "\13\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\27\6\1\u017a\5\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u017b\1\0\3\6\1\u017b\20\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\5\6\1\u017c\27\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\11\6\1\u017d\23\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\5\6\1\u017e\27\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\u017f\2\6\20\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\5\6\1\u0180\27\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\u0181\1\0\3\6\1\u0181\20\0\35\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\16\6\1\u0182\16\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\13\6\2\u0183\20\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\5\6\1\u0184\27\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\5\6\1\u0185\27\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\23\6\1\u0186\11\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\5\6\1\u0187\27\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\23\6\1\u0188\11\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\7\6\2\u0189\24\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\6\6\1\u018a\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\2\6\2\u018b\31\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\11\6\1\u018c\23\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\6\6\1\u018d\26\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\7\6\2\u018e\24\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\31\6\1\u018f\3\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\12\6\1\u0190\22\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\12\6\1\u0191\22\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\23\6\1\u0192\11\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\25\6\1\u0193\7\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\6\6\1\u0194\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\22\6\1\u0195\12\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\31\6\1\u0196\3\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\4\6\1\u0197\30\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\u0198\1\0\3\6\1\u0198"+
    "\20\0\35\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\24\6\1\u0199\10\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\2\u019a"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\23\6\1\u019b\11\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u019c\1\0\3\6\1\u019c\20\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\23\6\1\u019d\11\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\17\6\1\u019e\15\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\6\6\1\u019f\26\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\21\6\1\u01a0\13\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\21\6\1\u01a1\13\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\11\6\1\u01a2\23\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u01a3\1\0\3\6"+
    "\1\u01a3\20\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\25\6\1\u01a4\7\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\22\6\1\u01a5\12\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\12\6\1\u01a6\22\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\20\6\1\u01a7\14\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\12\6\1\u01a8\22\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\u01a9\1\0\3\6\1\u01a9"+
    "\20\0\35\6\7\0\3\6\1\0\1\6\1\0\1\u01aa"+
    "\1\0\3\6\1\u01aa\20\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\6\6\1\u01ab"+
    "\26\6\7\0\3\6\1\0\1\6\1\0\1\u01ac\1\0"+
    "\3\6\1\u01ac\20\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\21\6\1\u01ad\13\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u01ae\1\0\3\6"+
    "\1\u01ae\20\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u01af\1\0\3\6\1\u01af\20\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\21\6"+
    "\1\u01b0\13\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\11\6\1\u01b1\23\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\31\6"+
    "\1\u01b2\3\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\7\6\2\u01b3\24\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\2\u01b4"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\5\6\1\u01b5\27\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\2\u01b6\33\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u01b7\1\0\3\6"+
    "\1\u01b7\20\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\13\6\2\u01b8\20\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\11\6\1\u01b9\23\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\5\6\1\u01ba\27\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\6\6\1\u01bb\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\12\6\1\u01bc\22\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\6\6\1\u01bd\26\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u01be\1\0\3\6\1\u01be\20\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\12\6"+
    "\1\u01bf\22\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\21\6\1\u01c0\13\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\2\u01c1"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\u01c2\1\0"+
    "\3\6\1\u01c2\20\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\6\6\1\u01c3\26\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\2\u01c4\33\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\16\6\1\u01c5\16\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\11\6\1\u01c6\23\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u01c7\1\0\3\6\1\u01c7\20\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\2\u01c8"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\16\6\1\u01c9\16\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\5\6\1\u01ca"+
    "\27\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\16\6\1\u01cb\16\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\22\6\1\u01cc"+
    "\12\6\7\0\3\6\1\0\1\6\1\0\1\u01cd\1\0"+
    "\3\6\1\u01cd\20\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\2\u01ce\33\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\12\6\1\u01cf\22\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\6\6\1\u01d0\26\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\4\6\1\u01d1\30\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\25\6\1\u01d2\7\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\u01d3\1\0\3\6\1\u01d3"+
    "\20\0\35\6\7\0\3\6\1\0\1\6\1\0\1\u01d4"+
    "\1\0\3\6\1\u01d4\20\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\23\6\1\u01d5"+
    "\11\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\2\u01d6\33\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\5\6\1\u01d7\27\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\24\6\1\u01d8\10\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\21\6\1\u01d9\13\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\2\u01da\33\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\11\6\1\u01db\23\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\12\6\1\u01dc\22\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\12\6\1\u01dd\22\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\u01de\1\0\3\6\1\u01de"+
    "\20\0\35\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\7\6\2\u01df\24\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\12\6"+
    "\1\u01e0\22\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\12\6\1\u01e1\22\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\11\6"+
    "\1\u01e2\23\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\u01e3\2\6\20\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\u01e4\1\0\3\6\1\u01e4\20\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\7\6\2\u01e5\24\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u01e6\1\0\3\6\1\u01e6\20\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\7\6\2\u01e7\24\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\2\u01e8\33\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\7\6\2\u01e9\24\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\5\6\1\u01ea\27\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\u01eb\1\0\3\6\1\u01eb"+
    "\20\0\35\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\7\6\2\u01ec\24\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\2\u01ed"+
    "\33\6\7\0\3\6\1\0\1\6\1\0\1\u01ee\1\0"+
    "\3\6\1\u01ee\20\0\35\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\6\6\1\u01ef\26\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u01f0\1\0\3\6"+
    "\1\u01f0\20\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\16\6\1\u01f1\16\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\13\6\2\u01f2\20\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\13\6\2\u01f3\20\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\2\u01f4\33\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\16\6\1\u01f5\16\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\16\6"+
    "\1\u01f6\16\6\7\0\3\6\1\0\1\6\1\0\1\u01f7"+
    "\1\0\3\6\1\u01f7\20\0\2\u01f8\33\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\6\6"+
    "\1\u01f9\26\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\21\6\1\u01fa\13\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\7\6"+
    "\2\u01fb\24\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\11\6\1\u01fc\23\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\6\6"+
    "\1\u01fd\26\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\17\6\1\u01fe\15\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\16\6"+
    "\1\u01ff\16\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\32\6\1\u0200\2\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\5\6"+
    "\1\u0201\27\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\7\6\2\u0202\24\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\32\6"+
    "\1\u0203\2\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\6\6\1\u0204\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\27\6"+
    "\1\u0205\5\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\5\6\1\u0206\27\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\6\6"+
    "\1\u0207\26\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\6\6\1\u0208\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\11\6"+
    "\1\u0209\23\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\30\6\1\u020a\4\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\7\6"+
    "\2\u020b\24\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\16\6\1\u020c\16\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\6\6"+
    "\1\u020d\26\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\13\6\2\u020e\20\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\2\6"+
    "\2\u020f\31\6\7\0\3\6\1\0\1\6\1\0\1\u0210"+
    "\1\0\3\6\1\u0210\20\0\35\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\6\6\1\u0211"+
    "\26\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\12\6\1\u0212\22\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u0213\1\0\3\6\1\u0213\20\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u0214\1\0\3\6"+
    "\1\u0214\20\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u0215\1\0\3\6\1\u0215\20\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\u0216\1\0\3\6\1\u0216\20\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\17\6\1\u0217\15\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\11\6\1\u0218"+
    "\23\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\12\6\1\u0219\22\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\6\6\1\u021a"+
    "\4\6\2\u021b\20\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\6\6\1\u021c\26\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\17\6\1\u021d\15\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u021e\1\0\3\6\1\u021e\20\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\16\6"+
    "\1\u021f\16\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\6\6\1\u0220\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\24\6"+
    "\1\u0221\10\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\21\6\1\u0222\13\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\4\6"+
    "\1\u0223\30\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\6\6\1\u0224\26\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\20\0\11\6"+
    "\1\u0225\23\6\7\0\3\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\20\0\2\u0226\33\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\u0227\1\0\3\6\1\u0227\20\0\35\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\u0228\1\0\3\6"+
    "\1\u0228\20\0\35\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\12\6\1\u0229\22\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\24\6\1\u022a\10\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\20\0\6\6\1\u022b\26\6\7\0"+
    "\3\6\1\0\1\6\1\0\1\6\1\0\4\6\20\0"+
    "\12\6\1\u022c\22\6\7\0\3\6\1\0\1\6\1\0"+
    "\1\u022d\1\0\3\6\1\u022d\20\0\35\6\7\0\3\6"+
    "\1\0\1\6\1\0\1\u022e\1\0\3\6\1\u022e\20\0"+
    "\35\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\6\6\1\u022f\26\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\21\6\1\u0230"+
    "\13\6\7\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\20\0\6\6\1\u0231\26\6\7\0\3\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\20\0\2\u0232\33\6"+
    "\7\0\3\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\20\0\24\6\1\u0233\10\6\7\0\3\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\20\0\31\6\1\u0234\3\6"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27584];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\5\1\1\11\12\1\6\11"+
    "\30\1\1\11\3\1\1\0\5\1\1\0\7\1\10\11"+
    "\74\1\1\11\1\1\1\0\140\1\1\11\1\0\u0146\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[564];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _RoomSqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RoomSqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 159: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 160: break;
          case 3: 
            { return DIV;
            } 
            // fall through
          case 161: break;
          case 4: 
            { return STAR;
            } 
            // fall through
          case 162: break;
          case 5: 
            { return IDENTIFIER;
            } 
            // fall through
          case 163: break;
          case 6: 
            { return MINUS;
            } 
            // fall through
          case 164: break;
          case 7: 
            { return NUMERIC_LITERAL;
            } 
            // fall through
          case 165: break;
          case 8: 
            { return DOT;
            } 
            // fall through
          case 166: break;
          case 9: 
            { return PLUS;
            } 
            // fall through
          case 167: break;
          case 10: 
            { return EQ;
            } 
            // fall through
          case 168: break;
          case 11: 
            { return MOD;
            } 
            // fall through
          case 169: break;
          case 12: 
            { return AMP;
            } 
            // fall through
          case 170: break;
          case 13: 
            { return LPAREN;
            } 
            // fall through
          case 171: break;
          case 14: 
            { return RPAREN;
            } 
            // fall through
          case 172: break;
          case 15: 
            { return COMMA;
            } 
            // fall through
          case 173: break;
          case 16: 
            { return SEMICOLON;
            } 
            // fall through
          case 174: break;
          case 17: 
            { return LT;
            } 
            // fall through
          case 175: break;
          case 18: 
            { return GT;
            } 
            // fall through
          case 176: break;
          case 19: 
            { return BAR;
            } 
            // fall through
          case 177: break;
          case 20: 
            { return TILDE;
            } 
            // fall through
          case 178: break;
          case 21: 
            { return COMMENT;
            } 
            // fall through
          case 179: break;
          case 22: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 180: break;
          case 23: 
            { return PARAMETER_NAME;
            } 
            // fall through
          case 181: break;
          case 24: 
            { return SINGLE_QUOTE_STRING_LITERAL;
            } 
            // fall through
          case 182: break;
          case 25: 
            { return DOUBLE_QUOTE_STRING_LITERAL;
            } 
            // fall through
          case 183: break;
          case 26: 
            { return BACKTICK_LITERAL;
            } 
            // fall through
          case 184: break;
          case 27: 
            { return BRACKET_LITERAL;
            } 
            // fall through
          case 185: break;
          case 28: 
            { return NOT_EQ;
            } 
            // fall through
          case 186: break;
          case 29: 
            { return EQEQ;
            } 
            // fall through
          case 187: break;
          case 30: 
            { return LTE;
            } 
            // fall through
          case 188: break;
          case 31: 
            { return SHL;
            } 
            // fall through
          case 189: break;
          case 32: 
            { return UNEQ;
            } 
            // fall through
          case 190: break;
          case 33: 
            { return GTE;
            } 
            // fall through
          case 191: break;
          case 34: 
            { return SHR;
            } 
            // fall through
          case 192: break;
          case 35: 
            { return AS;
            } 
            // fall through
          case 193: break;
          case 36: 
            { return BY;
            } 
            // fall through
          case 194: break;
          case 37: 
            { return OF;
            } 
            // fall through
          case 195: break;
          case 38: 
            { return OR;
            } 
            // fall through
          case 196: break;
          case 39: 
            { return ON;
            } 
            // fall through
          case 197: break;
          case 40: 
            { return TO;
            } 
            // fall through
          case 198: break;
          case 41: 
            { return IF;
            } 
            // fall through
          case 199: break;
          case 42: 
            { return IN;
            } 
            // fall through
          case 200: break;
          case 43: 
            { return IS;
            } 
            // fall through
          case 201: break;
          case 44: 
            { return NO;
            } 
            // fall through
          case 202: break;
          case 45: 
            { return CONCAT;
            } 
            // fall through
          case 203: break;
          case 46: 
            { return END;
            } 
            // fall through
          case 204: break;
          case 47: 
            { return FOR;
            } 
            // fall through
          case 205: break;
          case 48: 
            { return AND;
            } 
            // fall through
          case 206: break;
          case 49: 
            { return ADD;
            } 
            // fall through
          case 207: break;
          case 50: 
            { return ALL;
            } 
            // fall through
          case 208: break;
          case 51: 
            { return ASC;
            } 
            // fall through
          case 209: break;
          case 52: 
            { return ROW;
            } 
            // fall through
          case 210: break;
          case 53: 
            { return NOT;
            } 
            // fall through
          case 211: break;
          case 54: 
            { return SET;
            } 
            // fall through
          case 212: break;
          case 55: 
            { return KEY;
            } 
            // fall through
          case 213: break;
          case 56: 
            { return EACH;
            } 
            // fall through
          case 214: break;
          case 57: 
            { return ELSE;
            } 
            // fall through
          case 215: break;
          case 58: 
            { return FAIL;
            } 
            // fall through
          case 216: break;
          case 59: 
            { return FROM;
            } 
            // fall through
          case 217: break;
          case 60: 
            { return TEMP;
            } 
            // fall through
          case 218: break;
          case 61: 
            { return THEN;
            } 
            // fall through
          case 219: break;
          case 62: 
            { return CASE;
            } 
            // fall through
          case 220: break;
          case 63: 
            { return CAST;
            } 
            // fall through
          case 221: break;
          case 64: 
            { return INTO;
            } 
            // fall through
          case 222: break;
          case 65: 
            { return NULL;
            } 
            // fall through
          case 223: break;
          case 66: 
            { return DESC;
            } 
            // fall through
          case 224: break;
          case 67: 
            { return DROP;
            } 
            // fall through
          case 225: break;
          case 68: 
            { return LEFT;
            } 
            // fall through
          case 226: break;
          case 69: 
            { return LIKE;
            } 
            // fall through
          case 227: break;
          case 70: 
            { return GLOB;
            } 
            // fall through
          case 228: break;
          case 71: 
            { return WITH;
            } 
            // fall through
          case 229: break;
          case 72: 
            { return WHEN;
            } 
            // fall through
          case 230: break;
          case 73: 
            { return PLAN;
            } 
            // fall through
          case 231: break;
          case 74: 
            { return VIEW;
            } 
            // fall through
          case 232: break;
          case 75: 
            { return JOIN;
            } 
            // fall through
          case 233: break;
          case 76: 
            { return AFTER;
            } 
            // fall through
          case 234: break;
          case 77: 
            { return ABORT;
            } 
            // fall through
          case 235: break;
          case 78: 
            { return ALTER;
            } 
            // fall through
          case 236: break;
          case 79: 
            { return BEGIN;
            } 
            // fall through
          case 237: break;
          case 80: 
            { return ORDER;
            } 
            // fall through
          case 238: break;
          case 81: 
            { return OUTER;
            } 
            // fall through
          case 239: break;
          case 82: 
            { return RAISE;
            } 
            // fall through
          case 240: break;
          case 83: 
            { return ROWID;
            } 
            // fall through
          case 241: break;
          case 84: 
            { return TABLE;
            } 
            // fall through
          case 242: break;
          case 85: 
            { return CROSS;
            } 
            // fall through
          case 243: break;
          case 86: 
            { return CHECK;
            } 
            // fall through
          case 244: break;
          case 87: 
            { return INNER;
            } 
            // fall through
          case 245: break;
          case 88: 
            { return INDEX;
            } 
            // fall through
          case 246: break;
          case 89: 
            { return LIMIT;
            } 
            // fall through
          case 247: break;
          case 90: 
            { return UNION;
            } 
            // fall through
          case 248: break;
          case 91: 
            { return USING;
            } 
            // fall through
          case 249: break;
          case 92: 
            { return MATCH;
            } 
            // fall through
          case 250: break;
          case 93: 
            { return GROUP;
            } 
            // fall through
          case 251: break;
          case 94: 
            { return WHERE;
            } 
            // fall through
          case 252: break;
          case 95: 
            { return QUERY;
            } 
            // fall through
          case 253: break;
          case 96: 
            { return EXCEPT;
            } 
            // fall through
          case 254: break;
          case 97: 
            { return EXISTS;
            } 
            // fall through
          case 255: break;
          case 98: 
            { return ESCAPE;
            } 
            // fall through
          case 256: break;
          case 99: 
            { return ATTACH;
            } 
            // fall through
          case 257: break;
          case 100: 
            { return ACTION;
            } 
            // fall through
          case 258: break;
          case 101: 
            { return BEFORE;
            } 
            // fall through
          case 259: break;
          case 102: 
            { return OFFSET;
            } 
            // fall through
          case 260: break;
          case 103: 
            { return RENAME;
            } 
            // fall through
          case 261: break;
          case 104: 
            { return REGEXP;
            } 
            // fall through
          case 262: break;
          case 105: 
            { return COLUMN;
            } 
            // fall through
          case 263: break;
          case 106: 
            { return COMMIT;
            } 
            // fall through
          case 264: break;
          case 107: 
            { return CREATE;
            } 
            // fall through
          case 265: break;
          case 108: 
            { return INSERT;
            } 
            // fall through
          case 266: break;
          case 109: 
            { return ISNULL;
            } 
            // fall through
          case 267: break;
          case 110: 
            { return IGNORE;
            } 
            // fall through
          case 268: break;
          case 111: 
            { return DETACH;
            } 
            // fall through
          case 269: break;
          case 112: 
            { return DELETE;
            } 
            // fall through
          case 270: break;
          case 113: 
            { return SELECT;
            } 
            // fall through
          case 271: break;
          case 114: 
            { return HAVING;
            } 
            // fall through
          case 272: break;
          case 115: 
            { return UNIQUE;
            } 
            // fall through
          case 273: break;
          case 116: 
            { return UPDATE;
            } 
            // fall through
          case 274: break;
          case 117: 
            { return PRAGMA;
            } 
            // fall through
          case 275: break;
          case 118: 
            { return VACUUM;
            } 
            // fall through
          case 276: break;
          case 119: 
            { return VALUES;
            } 
            // fall through
          case 277: break;
          case 120: 
            { return EXPLAIN;
            } 
            // fall through
          case 278: break;
          case 121: 
            { return FOREIGN;
            } 
            // fall through
          case 279: break;
          case 122: 
            { return ANALYZE;
            } 
            // fall through
          case 280: break;
          case 123: 
            { return BETWEEN;
            } 
            // fall through
          case 281: break;
          case 124: 
            { return REINDEX;
            } 
            // fall through
          case 282: break;
          case 125: 
            { return RELEASE;
            } 
            // fall through
          case 283: break;
          case 126: 
            { return REPLACE;
            } 
            // fall through
          case 284: break;
          case 127: 
            { return TRIGGER;
            } 
            // fall through
          case 285: break;
          case 128: 
            { return CASCADE;
            } 
            // fall through
          case 286: break;
          case 129: 
            { return COLLATE;
            } 
            // fall through
          case 287: break;
          case 130: 
            { return INDEXED;
            } 
            // fall through
          case 288: break;
          case 131: 
            { return INSTEAD;
            } 
            // fall through
          case 289: break;
          case 132: 
            { return NATURAL;
            } 
            // fall through
          case 290: break;
          case 133: 
            { return NOTNULL;
            } 
            // fall through
          case 291: break;
          case 134: 
            { return DEFAULT;
            } 
            // fall through
          case 292: break;
          case 135: 
            { return WITHOUT;
            } 
            // fall through
          case 293: break;
          case 136: 
            { return PRIMARY;
            } 
            // fall through
          case 294: break;
          case 137: 
            { return VIRTUAL;
            } 
            // fall through
          case 295: break;
          case 138: 
            { return RESTRICT;
            } 
            // fall through
          case 296: break;
          case 139: 
            { return ROLLBACK;
            } 
            // fall through
          case 297: break;
          case 140: 
            { return CONFLICT;
            } 
            // fall through
          case 298: break;
          case 141: 
            { return DEFERRED;
            } 
            // fall through
          case 299: break;
          case 142: 
            { return DATABASE;
            } 
            // fall through
          case 300: break;
          case 143: 
            { return DISTINCT;
            } 
            // fall through
          case 301: break;
          case 144: 
            { return EXCLUSIVE;
            } 
            // fall through
          case 302: break;
          case 145: 
            { return RECURSIVE;
            } 
            // fall through
          case 303: break;
          case 146: 
            { return TEMPORARY;
            } 
            // fall through
          case 304: break;
          case 147: 
            { return INTERSECT;
            } 
            // fall through
          case 305: break;
          case 148: 
            { return INITIALLY;
            } 
            // fall through
          case 306: break;
          case 149: 
            { return IMMEDIATE;
            } 
            // fall through
          case 307: break;
          case 150: 
            { return SAVEPOINT;
            } 
            // fall through
          case 308: break;
          case 151: 
            { return REFERENCES;
            } 
            // fall through
          case 309: break;
          case 152: 
            { return CONSTRAINT;
            } 
            // fall through
          case 310: break;
          case 153: 
            { return DEFERRABLE;
            } 
            // fall through
          case 311: break;
          case 154: 
            { return TRANSACTION;
            } 
            // fall through
          case 312: break;
          case 155: 
            { return CURRENT_TIME;
            } 
            // fall through
          case 313: break;
          case 156: 
            { return CURRENT_DATE;
            } 
            // fall through
          case 314: break;
          case 157: 
            { return AUTOINCREMENT;
            } 
            // fall through
          case 315: break;
          case 158: 
            { return CURRENT_TIMESTAMP;
            } 
            // fall through
          case 316: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
