<?xml version="1.0"?>
<!--
  ~ Copyright (C) 2018 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<tutorialBundle
    name="What's New in 3.2"
    logo="core/whats_new_logo.png"
    resourceRoot="/">
  <feature
      name="What's New in 3.2">
    <tutorial
        key="whats-new"
        label=""
        icon="core/whats_new_logo.png"
        remoteLink="https://developer.android.com/studio/releases/index.html"
        remoteLinkLabel="">
      <description>
        <![CDATA[

          You're now running Android Studio 3.2. You can learn more about new features and behavior changes
          below, or read about them
          <a href="https://d.android.com/r/studio-ui/whats-new-assistant/canary-release-notes.html">in a browser</a>.
          <br><br>
          To open this panel again later, select <b>Help &gt; What's New in Android Studio</b> from the main menu.

        <div style="padding-left: 10px; padding-right: 10px;">
          <h1>New code shrinker</h1>

          R8 is a new tool for code shrinking and obfuscation that replaces ProGuard. You can start using a
          <em>preview</em> version of R8 by including the following in your project’s
          <code>gradle.properties</code> file:

          <br><br>
          <div style="border: solid gray 1px; padding-left: 10px;">
            <pre>android.enableR8 = true</pre>
          </div>

          <br>
          <h1>Editor features for CMake scripts</h1>

          If you use CMake to
          <a href="https://d.android.com/studio/projects/add-native-code.html?utm_source=android-studio&utm_medium=studio-assistant">
          add C and C++ code to your project</a>, Android Studio now includes improved features to help you edit your CMake build scripts.
          <br><br>
          <div align="center">
            <img src="https://d.android.com/studio/releases/assistant/3.2.0/cmake-ide-features.gif">
          </div>
          <br>
          Features include the following:
          <br><br>
          <ul>
            <li><b>Syntax highlighting and code-completion:</b> The IDE now highlights and suggests code completion for common CMake
            commands. Additionally, you can navigate to a file by clicking it while pressing the Control key (or Command on MacOS).
            </li>
            <li><b>Code reformatting:</b> You can now use the
            <a href="https://www.jetbrains.com/help/idea/editor-basics.html#reformat_rearrange_code"><b>Reformat Code</b></a> option
            to apply code styles to your CMake build scripts.
            </li>
            <li><b>Safe refactoring:</b> The IDE’s built-in refactoring tools now also check if you are renaming or deleting files that you
            reference in your CMake build scripts.
            </li>
          </ul>

          <h1>Inspect JNI references</h1>

          If you deploy your app to a device running Android 8.0 (API level 26) or higher,
          you can now inspect memory allocations for your app’s JNI code using
          <a href="https://d.android.com/studio/profile/memory-profiler.html?utm_source=android-studio&utm_medium=studio-assistant">
          the Memory Profiler</a>.
          <br><br>
          While your app is
          running, select a portion of the timeline that you want to inspect and select
          <b>JNI heap</b> from the drop-down menu above the class list.
          <br><br>
          <div align="center">
            <img src="https://d.android.com/studio/releases/assistant/3.2.0/memory-profiler-jni-heap.png">
          </div>
          <br>
          You can then inspect objects in the heap as you normally would and double-click objects
          in the <b>Allocation Call Stack</b> tab to see where the JNI references are
          allocated and released by your code.

          <br><br>
          <h1>Changed set of default ABIs</h1>

          When <a href="https://d.android.com/studio/build/configure-apk-splits.html?utm_source=android-studio&utm_medium=studio-assistant">
          building multiple APKs</a> that each target a different ABI, Android plugin for Gradle 3.2.0 no longer generates APKs for the
          following ABIs by default: <code>mips</code>, <code>mips64</code>, and <code>armeabi</code>.

          <br><br>
          If you want to build APKs that target these ABIs, you must use
          <a href="https://d.android.com/ndk/downloads/revision_history.html?utm_source=android-studio&utm_medium=studio-assistant">
          NDK r16b or lower</a> and specify the ABIs in your <code>build.gradle</code> file, as shown below:

          <br><br>
          <div style="border: solid gray 1px; padding-left: 10px;">
          <pre>splits {
    abi {
        include 'armeabi', 'mips', 'mips64'
        ...
    }
}</pre>
          </div>
        </div>
        ]]>
      </description>
    </tutorial>
  </feature>
</tutorialBundle>