/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.tools.idea.lang.roomSql.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.android.tools.idea.lang.roomSql.psi.RoomPsiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_RoomSqlLexer.flex</tt>
 */
public class _RoomSqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13952 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\3"+
    "\13\1\15\3\13\1\16\24\13\1\17\1\20\1\21\10\1\1\22\1\23\1\13\1\24\4\13\1\25"+
    "\10\13\1\26\12\13\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13"+
    "\1\32\1\1\1\34\1\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1"+
    "\43\1\44\1\13\1\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52"+
    "\2\13\1\53\1\1\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\20\1\64"+
    "\1\57\1\60\1\65\1\1\1\66\1\67\1\70\1\71\1\24\1\60\1\72\1\1\1\73\1\55\1\74"+
    "\1\75\1\57\1\60\1\72\1\1\1\63\1\55\1\43\1\76\1\77\1\100\1\101\1\1\1\73\1\67"+
    "\1\1\1\102\1\40\1\60\1\53\1\1\1\103\1\55\1\1\1\102\1\40\1\60\1\104\1\1\1\62"+
    "\1\55\1\105\1\102\1\40\1\13\1\106\1\62\1\107\1\55\1\110\1\111\1\112\1\13\1"+
    "\113\1\114\1\1\1\67\1\1\1\27\2\13\1\115\1\114\1\116\2\1\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\2\1\1\73\1\1\1\116\1\1\1\125\1\13\1\126\1\1\1\127\7\1\2"+
    "\13\1\32\1\107\1\116\1\130\1\131\1\132\1\133\1\116\2\13\1\134\2\13\1\135\24"+
    "\13\1\136\1\137\2\13\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\32\2\1"+
    "\1\13\1\1\5\13\1\142\1\27\45\13\1\143\1\13\1\144\1\32\4\13\1\32\1\145\1\146"+
    "\1\20\1\13\1\20\1\13\1\20\1\146\1\73\3\13\1\147\1\1\1\150\1\116\2\1\1\116"+
    "\5\13\1\31\2\13\1\151\4\13\1\42\1\13\1\152\2\1\1\67\1\13\1\153\1\51\2\13\1"+
    "\154\1\13\1\101\1\116\2\1\1\13\1\114\3\13\1\51\2\1\2\116\1\155\5\1\1\111\2"+
    "\13\1\147\1\156\1\116\2\1\1\157\1\13\1\160\1\44\2\13\1\42\1\1\2\13\1\147\1"+
    "\1\1\161\1\44\1\13\1\153\6\1\1\162\1\163\14\13\4\1\21\13\1\142\2\13\1\142"+
    "\1\164\1\13\1\153\3\13\1\165\1\166\1\167\1\126\1\166\1\170\1\1\1\171\2\1\1"+
    "\172\1\1\1\173\1\1\1\126\6\1\1\174\1\175\1\176\1\177\1\200\3\1\1\201\147\1"+
    "\2\13\1\152\2\13\1\152\10\13\1\202\1\203\2\13\1\134\3\13\1\204\1\1\1\13\1"+
    "\114\4\205\4\1\1\107\35\1\1\206\2\1\1\207\1\27\4\13\1\210\1\27\4\13\1\135"+
    "\1\111\1\13\1\153\1\27\4\13\1\152\1\1\1\13\1\32\3\1\1\13\40\1\133\13\1\42"+
    "\4\1\135\13\1\42\2\1\10\13\1\126\4\1\2\13\1\153\20\13\1\126\1\13\1\211\1\1"+
    "\2\13\1\152\1\107\1\13\1\153\4\13\1\42\2\1\1\212\1\213\5\13\1\214\1\13\1\153"+
    "\1\31\3\1\1\212\1\215\1\13\1\33\1\1\3\13\1\147\1\213\2\13\1\147\1\1\1\116"+
    "\1\1\1\216\1\44\1\13\1\42\1\13\1\114\1\1\1\13\1\126\1\52\2\13\1\33\1\107\1"+
    "\116\1\217\1\220\2\13\1\50\1\1\1\221\1\116\1\13\1\222\3\13\1\223\1\224\1\225"+
    "\1\32\1\70\1\226\1\227\1\205\2\13\1\135\1\42\7\13\1\33\1\116\72\13\1\147\1"+
    "\13\1\230\2\13\1\154\20\1\26\13\1\153\6\13\1\101\2\1\1\114\1\231\1\60\1\232"+
    "\1\233\6\13\1\20\1\1\1\157\25\13\1\153\1\1\4\13\1\213\2\13\1\31\2\1\1\154"+
    "\7\1\1\217\7\13\1\126\1\1\1\116\1\27\1\32\1\27\1\32\1\234\4\13\1\152\1\235"+
    "\1\236\2\1\1\237\1\13\1\14\1\240\2\153\2\1\7\13\1\32\30\1\1\13\1\126\3\13"+
    "\1\73\2\1\2\13\1\1\1\13\1\241\2\13\1\42\1\13\1\153\2\13\1\242\3\1\11\13\1"+
    "\153\1\116\5\1\2\13\1\31\3\13\1\147\11\1\23\13\1\114\1\13\1\42\1\31\11\1\1"+
    "\243\2\13\1\244\1\13\1\42\1\13\1\114\1\13\1\152\4\1\1\13\1\245\1\13\1\42\1"+
    "\13\1\101\4\1\3\13\1\246\4\1\1\73\1\247\1\13\1\147\2\1\1\13\1\126\1\13\1\126"+
    "\2\1\1\125\1\13\1\51\1\1\3\13\1\42\1\13\1\42\1\13\1\33\1\13\1\20\6\1\4\13"+
    "\1\50\3\1\3\13\1\33\3\13\1\33\60\1\1\157\2\13\1\31\2\1\1\67\1\1\1\157\2\13"+
    "\2\1\1\13\1\50\1\116\1\157\1\13\1\114\1\67\1\1\2\13\1\250\1\157\2\13\1\33"+
    "\1\251\1\252\2\1\1\13\1\24\1\154\5\1\1\253\1\254\1\50\2\13\1\152\1\1\1\116"+
    "\1\75\1\57\1\60\1\72\1\1\1\255\1\20\21\1\3\13\1\1\1\256\1\116\12\1\2\13\1"+
    "\152\2\1\1\257\2\1\3\13\1\1\1\260\1\116\2\1\2\13\1\32\1\1\1\116\3\1\1\13\1"+
    "\101\1\1\1\116\26\1\4\13\1\116\1\107\34\1\3\13\1\50\20\1\71\13\1\101\16\1"+
    "\14\13\1\147\53\1\2\13\1\152\75\1\44\13\1\114\33\1\43\13\1\50\1\13\1\152\1"+
    "\116\6\1\1\13\1\153\1\1\3\13\1\1\1\147\1\116\1\157\1\261\1\13\67\1\4\13\1"+
    "\51\1\73\3\1\1\157\6\1\1\20\77\1\6\13\1\32\1\126\1\50\1\101\66\1\5\13\1\217"+
    "\3\13\1\146\1\262\1\263\1\264\3\13\1\265\1\266\1\13\1\267\1\270\1\40\24\13"+
    "\1\271\1\13\1\40\1\135\1\13\1\135\1\13\1\217\1\13\1\217\1\152\1\13\1\152\1"+
    "\13\1\60\1\13\1\60\1\13\1\272\3\273\14\13\1\51\123\1\1\264\1\13\1\274\1\275"+
    "\1\276\1\277\1\300\1\301\1\302\1\154\1\303\1\154\24\1\55\13\1\114\2\1\103"+
    "\13\1\51\15\13\1\153\150\13\1\20\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\6\2\1\1\6\22\0\1\1\1\26\1\25\2\0\1\30\1\31\1\24\1\32\1\33\1\5"+
    "\1\16\1\34\1\12\1\14\1\4\1\17\11\13\1\23\1\35\1\36\1\27\1\37\2\0\1\40\1\42"+
    "\1\47\1\53\1\15\1\55\1\65\1\62\1\51\1\72\1\67\1\56\1\64\1\52\1\44\1\70\1\73"+
    "\1\45\1\61\1\46\1\63\1\71\1\66\1\20\1\57\1\60\1\2\1\0\1\3\1\0\1\10\1\0\1\41"+
    "\1\43\1\50\1\54\1\22\1\21\1\65\1\62\1\51\1\72\1\67\1\56\1\64\1\52\1\44\1\70"+
    "\1\73\1\45\1\61\1\46\1\63\1\71\1\66\1\20\1\57\1\60\1\0\1\74\1\0\1\75\6\0\1"+
    "\1\12\0\1\1\11\0\1\7\12\0\1\7\4\0\1\7\5\0\27\7\1\0\10\7\2\51\35\7\1\61\2\7"+
    "\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\1\0\5\7\1\0\2\7\2\0\4\7\1\0\1\7\6\0\1\7"+
    "\1\0\3\7\1\0\1\7\1\0\4\7\1\0\23\7\1\0\13\7\10\0\6\7\1\0\26\7\2\0\1\7\6\0\10"+
    "\7\10\0\13\7\5\0\3\7\15\0\12\11\4\0\6\7\1\0\1\7\17\0\2\7\7\0\2\7\12\11\3\7"+
    "\2\0\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\11\6\7\4\0\2\7\4\0\1\7\5\0\6"+
    "\7\4\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\17\0\26\7\3\0\1\7\2\0\1\7\7\0"+
    "\12\7\4\0\12\11\1\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7\3\0"+
    "\1\7\20\0\1\7\15\0\2\7\1\0\1\7\5\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7\1\0\2\7\17"+
    "\0\4\7\1\0\1\7\7\0\12\11\2\0\3\7\20\0\11\7\1\0\2\7\1\0\2\7\1\0\5\7\3\0\1\7"+
    "\2\0\1\7\30\0\1\7\13\0\10\7\2\0\1\7\3\0\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2"+
    "\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\13\0\10\7\1\0\2\7\10\0\3\7\5\0"+
    "\4\7\1\0\5\7\3\0\1\7\3\0\2\7\15\0\13\7\2\0\1\7\21\0\1\7\12\0\6\7\5\0\22\7"+
    "\3\0\10\7\1\0\11\7\1\0\1\7\2\0\7\7\11\0\1\7\1\0\2\7\14\0\12\11\7\0\2\7\1\0"+
    "\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2"+
    "\7\1\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1\7\11\0\12\11\2\0\14\7\1\0\24\7\13"+
    "\0\5\7\3\0\6\7\4\0\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0\1\7\1\0\6\7\1"+
    "\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\1\7\1"+
    "\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\16\7\2\0\6\7\2\0\15\7\2\0\1\7\1\1\17\7"+
    "\1\0\10\7\7\0\15\7\1\0\6\7\23\0\1\7\4\0\1\7\3\0\11\7\1\0\1\7\5\0\17\7\1\0"+
    "\16\7\2\0\14\7\13\0\1\7\15\0\7\7\7\0\16\7\15\0\2\7\12\11\3\0\3\7\11\0\4\7"+
    "\1\0\4\7\3\0\2\7\11\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6\7\1\0\7\7\1\0\1\7"+
    "\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0\13\1\15\0\2\1\5\0\1\1\17\0\1\1\1\0\1"+
    "\7\15\0\1\7\2\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0\1"+
    "\7\1\0\1\67\3\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\2\7\13\0\5\7\6\0\4\7"+
    "\3\0\2\7\14\0\10\7\7\0\10\7\1\0\7\7\1\0\1\1\4\0\2\7\12\0\5\7\5\0\2\7\3\0\7"+
    "\7\6\0\3\7\12\11\2\7\13\0\11\7\2\0\27\7\2\0\7\7\1\0\3\7\1\0\4\7\1\0\4\7\2"+
    "\0\6\7\3\0\1\7\1\0\1\7\2\0\5\7\1\0\12\7\12\11\5\7\1\0\3\7\1\0\10\7\4\0\7\7"+
    "\3\0\1\7\3\0\2\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\0\3\7\3\0\6\7"+
    "\2\0\6\7\2\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0\1\7\1\0\10\7\1\0\5\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\0\12\7\6\0\12\7\2\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0\14"+
    "\7\1\0\16\7\1\0\2\7\1\0\2\7\1\0\10\7\6\0\4\7\4\0\16\7\2\0\1\7\1\0\14\7\1\0"+
    "\2\7\3\0\1\7\2\0\4\7\1\0\2\7\12\0\10\7\6\0\6\7\1\0\3\7\1\0\12\7\3\0\1\7\12"+
    "\0\4\7\13\0\12\11\1\7\1\0\1\7\3\0\7\7\1\0\1\7\1\0\4\7\1\0\17\7\1\0\2\7\14"+
    "\0\3\7\4\0\2\7\1\0\1\7\20\0\4\7\10\0\1\7\13\0\10\7\5\0\3\7\2\0\1\7\2\0\2\7"+
    "\2\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7\1\0\4\7\2\0\10\7\1\0\7\7\1\0\14"+
    "\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7\2\0\13\7\1\0\10\7\2\0\22\11\1\0\2\7\1"+
    "\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7\1\0\1\7\1"+
    "\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7\1\0\12\7\1\0\5\7\1\0"+
    "\3\7\1\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\5\1\11\1\7\2\5\4\1\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\25\5\1\23\1\24\1\0\1\25\1\26\1\27\1\7"+
    "\1\0\5\5\3\0\3\5\1\30\2\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\7\5\1\41\2\5"+
    "\1\42\1\43\1\44\1\45\6\5\1\46\7\5\1\47"+
    "\1\50\1\51\3\5\1\52\31\5\1\53\1\26\1\0"+
    "\1\7\4\5\1\54\2\5\1\7\1\5\1\55\6\5"+
    "\1\56\1\57\1\5\1\60\1\61\21\5\1\62\26\5"+
    "\1\63\13\5\1\64\13\5\1\65\11\5\1\26\1\0"+
    "\4\5\1\66\1\67\1\5\1\70\1\5\1\71\30\5"+
    "\1\72\3\5\1\73\1\74\1\75\13\5\1\76\12\5"+
    "\1\77\4\5\1\100\1\5\1\101\1\5\1\102\1\5"+
    "\1\103\11\5\1\104\1\105\1\5\1\106\2\5\1\107"+
    "\2\5\1\110\1\5\1\111\7\5\1\112\1\113\3\5"+
    "\1\114\3\5\1\115\1\5\1\116\1\117\10\5\1\120"+
    "\1\5\1\121\1\5\1\122\11\5\1\123\1\124\3\5"+
    "\1\125\1\126\15\5\1\127\3\5\1\130\1\5\1\131"+
    "\1\5\1\132\1\133\1\5\1\134\5\5\1\135\1\136"+
    "\1\5\1\137\1\5\1\140\1\5\1\141\1\142\2\5"+
    "\1\143\1\5\1\144\3\5\1\145\2\5\1\146\11\5"+
    "\1\147\1\150\1\151\4\5\1\152\1\5\1\153\1\5"+
    "\1\154\4\5\1\155\1\156\2\5\1\157\1\5\1\160"+
    "\1\161\1\162\1\5\1\163\1\5\1\164\1\165\2\5"+
    "\1\166\1\167\1\170\1\5\1\171\2\5\1\172\1\173"+
    "\1\5\1\174\3\5\1\175\1\176\2\5\1\177\3\5"+
    "\1\200\1\201\1\5\1\202\1\203\2\5\1\204\3\5"+
    "\1\205\1\206\1\207\4\5\1\210\1\211\2\5\1\212"+
    "\5\5\1\213\1\5\1\214\1\215\1\5\1\216\2\5"+
    "\1\217\1\220\4\5\1\221\1\222\1\223\1\5\1\224"+
    "\1\5\1\225\1\5\1\226\2\5\1\227\1\5\1\230"+
    "\3\5\1\231\1\232\1\233\4\5\1\234";

  private static int [] zzUnpackAction() {
    int [] result = new int[565];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\76\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\76\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\76\0\76\0\76\0\76"+
    "\0\76\0\76\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782"+
    "\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972"+
    "\0\u09b0\0\u09ee\0\76\0\272\0\76\0\u0a2c\0\u0a6a\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0364"+
    "\0\u03a2\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\76\0\u0e0c\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u0136\0\u1078\0\u10b6\0\u0136\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u11ec\0\u122a\0\u0136\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u0136\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702"+
    "\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2"+
    "\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2"+
    "\0\u1b20\0\u1b5e\0\76\0\u1b9c\0\u1bda\0\u1bda\0\u1c18\0\u1c56"+
    "\0\u1c94\0\u1cd2\0\u0136\0\u1d10\0\u1d4e\0\u0c5a\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u0136\0\u0136"+
    "\0\u1f7c\0\u0136\0\u0136\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2"+
    "\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2"+
    "\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492"+
    "\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682"+
    "\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872"+
    "\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62"+
    "\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u0136"+
    "\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04"+
    "\0\u2e42\0\u2e80\0\u2ebe\0\u0136\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6"+
    "\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\76\0\u1b9c\0\u312a"+
    "\0\u3168\0\u31a6\0\u31e4\0\u0136\0\u0136\0\u3222\0\u0136\0\u3260"+
    "\0\u0136\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412"+
    "\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602"+
    "\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2"+
    "\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u0136\0\u0136\0\u0136"+
    "\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18"+
    "\0\u3b56\0\u3b94\0\u3bd2\0\u0136\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca"+
    "\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u0136\0\u3e7c"+
    "\0\u3eba\0\u3ef8\0\u3f36\0\u0136\0\u3f74\0\u0136\0\u3fb2\0\u0136"+
    "\0\u3ff0\0\u0136\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164"+
    "\0\u41a2\0\u41e0\0\u421e\0\u0136\0\u425c\0\u429a\0\u0136\0\u42d8"+
    "\0\u4316\0\u0136\0\u4354\0\u4392\0\u0136\0\u43d0\0\u0136\0\u440e"+
    "\0\u444c\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u0136\0\u0136"+
    "\0\u45c0\0\u45fe\0\u463c\0\u0136\0\u467a\0\u46b8\0\u46f6\0\u0136"+
    "\0\u4734\0\u0136\0\u0136\0\u4772\0\u47b0\0\u47ee\0\u482c\0\u486a"+
    "\0\u48a8\0\u48e6\0\u4924\0\u0136\0\u4962\0\u0136\0\u49a0\0\u0136"+
    "\0\u49de\0\u4a1c\0\u4a5a\0\u4a98\0\u4ad6\0\u4b14\0\u4b52\0\u4b90"+
    "\0\u4bce\0\u0136\0\u0136\0\u4c0c\0\u4c4a\0\u4c88\0\u0136\0\u4cc6"+
    "\0\u4d04\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78\0\u4eb6"+
    "\0\u4ef4\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\u0136\0\u502a\0\u5068"+
    "\0\u50a6\0\u0136\0\u50e4\0\u0136\0\u5122\0\u0136\0\u0136\0\u5160"+
    "\0\u0136\0\u519e\0\u51dc\0\u521a\0\u5258\0\u5296\0\u0136\0\u0136"+
    "\0\u52d4\0\u0136\0\u5312\0\u0136\0\u5350\0\u0136\0\u0136\0\u538e"+
    "\0\u53cc\0\u0136\0\u540a\0\u0136\0\u5448\0\u5486\0\u54c4\0\u0136"+
    "\0\u5502\0\u5540\0\u0136\0\u557e\0\u55bc\0\u55fa\0\u5638\0\u5676"+
    "\0\u56b4\0\u56f2\0\u5730\0\u576e\0\u0136\0\u0136\0\u0136\0\u57ac"+
    "\0\u57ea\0\u5828\0\u5866\0\u0136\0\u58a4\0\u0136\0\u58e2\0\u0136"+
    "\0\u5920\0\u595e\0\u599c\0\u59da\0\u0136\0\u0136\0\u5a18\0\u5a56"+
    "\0\u0136\0\u5a94\0\u0136\0\u0136\0\u0136\0\u5ad2\0\u0136\0\u5b10"+
    "\0\u0136\0\u0136\0\u5b4e\0\u5b8c\0\u0136\0\u0136\0\u0136\0\u5bca"+
    "\0\u0136\0\u5c08\0\u5c46\0\u0136\0\u0136\0\u5c84\0\u0136\0\u5cc2"+
    "\0\u5d00\0\u5d3e\0\u0136\0\u0136\0\u5d7c\0\u5dba\0\u0136\0\u5df8"+
    "\0\u5e36\0\u5e74\0\u0136\0\u0136\0\u5eb2\0\u0136\0\u0136\0\u5ef0"+
    "\0\u5f2e\0\u0136\0\u5f6c\0\u5faa\0\u5fe8\0\u0136\0\u0136\0\u0136"+
    "\0\u6026\0\u6064\0\u60a2\0\u60e0\0\u0136\0\u0136\0\u611e\0\u615c"+
    "\0\u0136\0\u619a\0\u61d8\0\u6216\0\u6254\0\u6292\0\u0136\0\u62d0"+
    "\0\u0136\0\u0136\0\u630e\0\u0136\0\u634c\0\u638a\0\u0136\0\u0136"+
    "\0\u63c8\0\u6406\0\u6444\0\u6482\0\u0136\0\u0136\0\u0136\0\u64c0"+
    "\0\u0136\0\u64fe\0\u0136\0\u653c\0\u0136\0\u657a\0\u65b8\0\u0136"+
    "\0\u65f6\0\u0136\0\u6634\0\u6672\0\u66b0\0\u66ee\0\u0136\0\u0136"+
    "\0\u672c\0\u676a\0\u67a8\0\u67e6\0\u0136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[565];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\3\2\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\13\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\2\35"+
    "\2\36\1\37\1\40\1\41\2\42\1\43\1\44\2\45"+
    "\1\17\1\46\2\7\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\77\0\1\3\4\0\1\3\67\0\3\64\1\65\72\64"+
    "\5\0\1\66\77\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\34\7\14\0\1\67\76\0\1\11"+
    "\1\70\1\71\1\0\1\11\2\0\1\71\66\0\1\70"+
    "\3\0\1\70\65\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\72\2\7\15\0\2\73\10\7\1\74"+
    "\3\7\1\75\2\7\1\76\12\7\15\0\1\11\1\70"+
    "\1\71\1\0\1\11\1\77\1\0\1\71\62\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\1\0\1\100"+
    "\1\101\12\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\2\102\2\7\1\103\1\104"+
    "\26\7\11\0\2\105\4\0\1\105\2\0\3\105\15\0"+
    "\34\105\2\0\24\100\1\106\51\100\25\101\1\107\50\101"+
    "\27\0\1\110\75\0\1\111\75\0\1\112\6\0\1\113"+
    "\1\114\65\0\1\115\7\0\1\116\45\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\117\1\7\15\0"+
    "\2\7\2\120\2\7\1\121\2\122\1\7\1\123\2\124"+
    "\1\117\1\125\2\7\1\126\1\7\1\127\10\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\130\1\0\3\7\1\130"+
    "\15\0\17\7\1\131\14\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\132\1\7\15\0\5\7"+
    "\1\133\4\7\1\134\2\7\1\132\5\7\1\135\10\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\136\1\0\3\7"+
    "\1\136\15\0\2\137\2\7\1\140\27\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\141\1\0\3\7\1\141\15\0"+
    "\2\142\2\7\1\143\1\144\14\7\1\145\11\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\2\146\2\7\1\147\1\150\14\7\1\151\1\152\10\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\153\1\7\15\0\12\7\1\154\2\7\1\153\3\7"+
    "\1\155\2\7\1\156\1\157\6\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\2\160\2\7"+
    "\1\161\16\7\1\162\10\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\163\1\0\3\7\1\163\15\0\2\164\3\7"+
    "\1\165\3\7\1\166\22\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\167\1\0\3\7\1\167\15\0\11\7\1\170"+
    "\22\7\11\0\3\7\1\0\1\7\1\0\1\171\1\0"+
    "\3\7\1\171\15\0\2\172\32\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\2\173\32\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\12\7\1\174\6\7\1\175\6\7\1\176\3\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\2\177\32\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\5\7\1\200\10\7\1\201"+
    "\15\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\11\7\1\202\10\7\1\203\11\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\204\1\0\3\7\1\204"+
    "\15\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\5\7\1\205\10\7\1\206\15\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\2\207\7\7\1\210\22\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\4\7\1\211"+
    "\27\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\23\7\1\212\10\7\76\0\1\213\1\0"+
    "\5\66\1\214\70\66\6\67\1\0\67\67\13\0\1\70"+
    "\1\0\1\71\1\0\1\70\2\0\1\71\65\0\1\215"+
    "\1\216\2\0\1\215\1\216\65\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\7\7\2\217\1\220"+
    "\16\7\1\221\3\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\7\7\2\222\23\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\13\7\2\223\17\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\21\7\1\224\12\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\7\7\2\225\23\7\15\0\1\226\3\0\1\226\1\0"+
    "\2\226\16\0\1\226\1\0\1\226\4\0\1\226\3\0"+
    "\1\226\30\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\11\7\1\227\22\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\5\7\1\230"+
    "\26\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\4\7\1\231\27\7\11\0\3\105\1\0"+
    "\1\105\1\0\1\105\1\0\4\105\15\0\34\105\26\0"+
    "\1\100\76\0\1\101\57\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\6\7\1\232\25\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\4\7\1\233\27\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\6\7\1\234\25\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\6\7\1\235\25\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\2\236\11\7\2\237\17\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\13\7\2\240\17\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\6\7\1\241\7\7"+
    "\1\242\15\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\7\7\2\243\23\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\6\7"+
    "\1\244\25\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\245\1\7\15\0\6\7\1\246\6\7"+
    "\1\245\7\7\1\247\6\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\250\1\7\15\0\15\7"+
    "\1\250\16\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\13\7\2\251\17\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\6\7"+
    "\1\252\25\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\253\1\7\15\0\7\7\2\254\1\255"+
    "\1\256\2\7\1\253\1\257\2\7\1\260\3\7\1\261"+
    "\2\7\1\262\3\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\11\7\1\263\22\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\16\7\1\264\7\7\1\265\5\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\24\7\1\266"+
    "\7\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\2\7\2\267\30\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\2\270\7\7"+
    "\1\271\22\7\11\0\3\7\1\0\1\7\1\0\1\272"+
    "\1\0\3\7\1\272\15\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\21\7\1\273"+
    "\12\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\12\7\1\274\3\7\1\275\5\7\1\276"+
    "\7\7\11\0\3\7\1\0\1\7\1\0\1\277\1\0"+
    "\3\7\1\277\15\0\4\7\1\300\27\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\301\1\0\3\7\1\301\15\0"+
    "\34\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\5\7\1\302\26\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\6\7\1\303"+
    "\2\7\1\304\1\305\2\306\4\7\1\307\12\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\12\7\1\310\21\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\24\7\1\311\7\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\12\7\1\312\21\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\6\7\1\313\25\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\6\7\1\314\25\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\16\7\1\315\15\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\316"+
    "\1\7\15\0\6\7\1\317\6\7\1\316\1\320\2\7"+
    "\1\321\12\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\6\7\1\322\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\4\7"+
    "\1\323\27\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\21\7\1\324\12\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\325\1\7"+
    "\15\0\15\7\1\325\16\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\24\7\1\326\2\7"+
    "\1\327\4\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\6\7\1\330\7\7\1\331\15\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\31\7\1\332\2\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\31\7\1\333\2\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\11\7\1\334\22\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\11\7\1\335\22\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\13\7\2\336\17\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\6\7\1\337\25\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\4\7\1\340\27\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\4\7\1\341\27\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\6\7\1\342\25\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\343\1\0\3\7\1\343\15\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\17\7\1\344\14\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\2\345\7\7\1\346\22\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\2\347\32\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\7\7\2\350\5\7\1\351"+
    "\15\7\11\0\3\7\1\0\1\7\1\0\1\352\1\0"+
    "\3\7\1\352\15\0\5\7\1\353\26\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\11\7"+
    "\1\354\22\7\11\0\3\7\1\0\1\7\1\0\1\355"+
    "\1\0\3\7\1\355\15\0\34\7\2\0\4\66\1\356"+
    "\1\357\70\66\13\0\1\216\3\0\1\216\65\0\3\7"+
    "\1\0\1\7\1\0\1\360\1\0\3\7\1\360\15\0"+
    "\16\7\1\361\15\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\21\7\1\362\12\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\16\7\1\363\15\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\22\7\1\364\11\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\365\1\0\3\7\1\365"+
    "\15\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\2\366\32\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\16\7\1\367"+
    "\15\7\11\0\3\7\1\0\1\7\1\0\1\370\1\0"+
    "\3\7\1\370\15\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\24\7\1\371\7\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\372\1\0\3\7"+
    "\1\372\15\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\5\7\1\373\26\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\2\374\32\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\11\7\1\375\22\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\16\7"+
    "\1\376\15\7\11\0\3\7\1\0\1\7\1\0\1\377"+
    "\1\0\3\7\1\377\15\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\4\7\1\u0100"+
    "\27\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\4\7\1\u0101\27\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\26\7\1\u0102"+
    "\5\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\11\7\1\u0103\22\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\21\7\1\u0104"+
    "\12\7\11\0\3\7\1\0\1\7\1\0\1\u0105\1\0"+
    "\3\7\1\u0105\15\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\u0106\1\0\3\7\1\u0106\15\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u0107\1\0\3\7\1\u0107"+
    "\15\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\23\7\1\u0108\10\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\12\7"+
    "\1\u0109\21\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\2\u010a\32\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u010b\1\0\3\7\1\u010b\15\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\6\7\1\u010c\25\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\u010d\1\0\3\7\1\u010d\15\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\16\7\1\u010e\15\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\21\7\1\u010f\12\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\16\7\1\u0110\15\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\11\7\1\u0111\22\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\30\7\1\u0112\3\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\16\7\1\u0113\15\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\12\7\1\u0114\21\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\25\7\1\u0115\6\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\12\7\1\u0116\21\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\u0117\1\0\3\7\1\u0117\15\0\6\7\1\u0118\2\u0119"+
    "\23\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\u011a\1\7\15\0\15\7\1\u011a\3\7\1\u011b"+
    "\12\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\16\7\1\u011c\4\7\1\u011d\10\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\24\7\1\u011e\7\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\2\u011f\32\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\21\7"+
    "\1\u0120\12\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\7\7\2\u0121\23\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\5\7"+
    "\1\u0122\26\7\11\0\3\7\1\0\1\7\1\0\1\u0123"+
    "\1\0\3\7\1\u0123\15\0\4\7\1\u0124\27\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\6\7\1\u0125\25\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\u0126\1\0\3\7\1\u0126\15\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\u0127\1\0\3\7\1\u0127\15\0"+
    "\34\7\11\0\3\7\1\0\1\7\1\0\1\u0128\1\0"+
    "\3\7\1\u0128\15\0\6\7\1\u0129\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\23\7"+
    "\1\u012a\10\7\11\0\3\7\1\0\1\7\1\0\1\u012b"+
    "\1\0\3\7\1\u012b\15\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\4\7\1\u012c"+
    "\27\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\23\7\1\u012d\10\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\12\7\1\u012e"+
    "\21\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\16\7\1\u012f\15\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u0130\1\0\3\7\1\u0130\15\0\2\u0131"+
    "\32\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\2\u0132\32\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\u0133\1\0\3\7\1\u0133\15\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\7\7\2\u0134\23\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\2\u0135\32\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\30\7"+
    "\1\u0136\3\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\6\7\1\u0137\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\6\7"+
    "\1\u0138\25\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\11\7\1\u0139\22\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\u013a\1\0\3\7\1\u013a\15\0"+
    "\34\7\11\0\3\7\1\0\1\7\1\0\1\u013b\1\0"+
    "\3\7\1\u013b\15\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\u013c\1\0\3\7\1\u013c\15\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\11\7\1\u013d\22\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\4\7\1\u013e\26\7\1\u013f"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\12\7\1\u0140\21\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\2\u0141\32\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\7\7\2\u0142\23\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\23\7\1\u0143\10\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\2\7\2\u0144\30\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\22\7\1\u0145\11\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\5\7\1\u0146\4\7\1\u0147\21\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\25\7\1\u0148"+
    "\6\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\24\7\1\u0149\7\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\12\7\1\u014a"+
    "\21\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\23\7\1\u014b\10\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\23\7\1\u014c"+
    "\10\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\26\7\1\u014d\5\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\6\7\1\u014e"+
    "\25\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\12\7\1\u014f\21\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\5\7\1\u0150"+
    "\26\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\30\7\1\u0151\3\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\23\7\1\u0152"+
    "\10\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\6\7\1\u0153\25\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\2\u0154\32\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\30\7\1\u0155\3\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\11\7\1\u0156\22\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\5\7\1\u0157\26\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\6\7\1\u0158\25\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\7\7\2\u0159\23\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\4\7\1\u015a\27\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\17\7\1\u015b\14\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\5\7\1\u015c\26\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\11\7\1\u015d\22\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\5\7\1\u015e\26\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u015f\1\0\3\7"+
    "\1\u015f\15\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\12\7\1\u0160\21\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u0161\1\0\3\7\1\u0161"+
    "\15\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\5\7\1\u0162\26\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\5\7"+
    "\1\u0163\26\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\5\7\1\u0164\26\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\5\7"+
    "\1\u0165\26\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\13\7\2\u0166\17\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\24\7"+
    "\1\u0167\7\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\2\u0168\32\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\5\7\1\u0169"+
    "\26\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\u016a\2\7\15\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\2\u016b\32\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u016c\1\0\3\7"+
    "\1\u016c\15\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\2\7\2\u016d\30\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\13\7\2\u016e\17\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\4\7\1\u016f\27\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u0170\1\0\3\7\1\u0170"+
    "\15\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\21\7\1\u0171\12\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\25\7"+
    "\1\u0172\6\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\2\u0173\32\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\16\7\1\u0174"+
    "\15\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\6\7\1\u0175\25\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\2\u0176\32\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\24\7\1\u0177\7\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\11\7\1\u0178\22\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\6\7\1\u0179\25\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\21\7\1\u017a\12\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\27\7\1\u017b\4\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\u017c\1\0\3\7\1\u017c\15\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\5\7\1\u017d\26\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\11\7\1\u017e\22\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\5\7\1\u017f\26\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\u0180\2\7\15\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\5\7\1\u0181\26\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\u0182\1\0\3\7\1\u0182\15\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\16\7"+
    "\1\u0183\15\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\13\7\2\u0184\17\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\5\7"+
    "\1\u0185\26\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\5\7\1\u0186\26\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\23\7"+
    "\1\u0187\10\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\5\7\1\u0188\26\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\23\7"+
    "\1\u0189\10\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\7\7\2\u018a\23\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\6\7"+
    "\1\u018b\25\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\2\7\2\u018c\30\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\11\7"+
    "\1\u018d\22\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\6\7\1\u018e\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\7\7"+
    "\2\u018f\23\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\30\7\1\u0190\3\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\12\7"+
    "\1\u0191\21\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\12\7\1\u0192\21\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\23\7"+
    "\1\u0193\10\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\25\7\1\u0194\6\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\6\7"+
    "\1\u0195\25\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\22\7\1\u0196\11\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\30\7"+
    "\1\u0197\3\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\4\7\1\u0198\27\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\u0199\1\0\3\7\1\u0199\15\0"+
    "\34\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\24\7\1\u019a\7\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\2\u019b\32\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\23\7\1\u019c\10\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\u019d\1\0\3\7\1\u019d\15\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\23\7\1\u019e\10\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\17\7\1\u019f\14\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\6\7\1\u01a0\25\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\21\7\1\u01a1\12\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\21\7\1\u01a2\12\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\11\7\1\u01a3\22\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u01a4\1\0\3\7\1\u01a4"+
    "\15\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\25\7\1\u01a5\6\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\22\7"+
    "\1\u01a6\11\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\12\7\1\u01a7\21\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\20\7"+
    "\1\u01a8\13\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\12\7\1\u01a9\21\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\u01aa\1\0\3\7\1\u01aa\15\0"+
    "\34\7\11\0\3\7\1\0\1\7\1\0\1\u01ab\1\0"+
    "\3\7\1\u01ab\15\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\6\7\1\u01ac\25\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u01ad\1\0\3\7"+
    "\1\u01ad\15\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\21\7\1\u01ae\12\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u01af\1\0\3\7\1\u01af"+
    "\15\0\34\7\11\0\3\7\1\0\1\7\1\0\1\u01b0"+
    "\1\0\3\7\1\u01b0\15\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\21\7\1\u01b1"+
    "\12\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\11\7\1\u01b2\22\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\30\7\1\u01b3"+
    "\3\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\7\7\2\u01b4\23\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\2\u01b5\32\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\5\7\1\u01b6\26\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\2\u01b7\32\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u01b8\1\0\3\7\1\u01b8"+
    "\15\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\13\7\2\u01b9\17\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\11\7"+
    "\1\u01ba\22\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\5\7\1\u01bb\26\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\6\7"+
    "\1\u01bc\25\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\12\7\1\u01bd\21\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\6\7"+
    "\1\u01be\25\7\11\0\3\7\1\0\1\7\1\0\1\u01bf"+
    "\1\0\3\7\1\u01bf\15\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\12\7\1\u01c0"+
    "\21\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\21\7\1\u01c1\12\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\2\u01c2\32\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u01c3\1\0\3\7"+
    "\1\u01c3\15\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\6\7\1\u01c4\25\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\2\u01c5\32\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\16\7\1\u01c6\15\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\11\7"+
    "\1\u01c7\22\7\11\0\3\7\1\0\1\7\1\0\1\u01c8"+
    "\1\0\3\7\1\u01c8\15\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\2\u01c9\32\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\16\7\1\u01ca\15\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\5\7\1\u01cb\26\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\16\7\1\u01cc\15\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\22\7\1\u01cd\11\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u01ce\1\0\3\7"+
    "\1\u01ce\15\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\2\u01cf\32\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\12\7"+
    "\1\u01d0\21\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\6\7\1\u01d1\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\4\7"+
    "\1\u01d2\27\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\25\7\1\u01d3\6\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\u01d4\1\0\3\7\1\u01d4\15\0"+
    "\34\7\11\0\3\7\1\0\1\7\1\0\1\u01d5\1\0"+
    "\3\7\1\u01d5\15\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\23\7\1\u01d6\10\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\2\u01d7\32\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\5\7\1\u01d8\26\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\24\7\1\u01d9\7\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\21\7\1\u01da\12\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\2\u01db\32\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\11\7\1\u01dc\22\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\12\7"+
    "\1\u01dd\21\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\12\7\1\u01de\21\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\u01df\1\0\3\7\1\u01df\15\0"+
    "\34\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\7\7\2\u01e0\23\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\12\7\1\u01e1"+
    "\21\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\12\7\1\u01e2\21\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\11\7\1\u01e3"+
    "\22\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\u01e4\2\7\15\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u01e5\1\0\3\7\1\u01e5\15\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\7\7\2\u01e6\23\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\u01e7\1\0\3\7\1\u01e7\15\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\7\7\2\u01e8\23\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\2\u01e9\32\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\7\7"+
    "\2\u01ea\23\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\5\7\1\u01eb\26\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\u01ec\1\0\3\7\1\u01ec\15\0"+
    "\34\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\7\7\2\u01ed\23\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\2\u01ee\32\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u01ef\1\0\3\7"+
    "\1\u01ef\15\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\6\7\1\u01f0\25\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u01f1\1\0\3\7\1\u01f1"+
    "\15\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\16\7\1\u01f2\15\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\13\7"+
    "\2\u01f3\17\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\13\7\2\u01f4\17\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\2\u01f5"+
    "\32\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\16\7\1\u01f6\15\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\16\7\1\u01f7"+
    "\15\7\11\0\3\7\1\0\1\7\1\0\1\u01f8\1\0"+
    "\3\7\1\u01f8\15\0\2\u01f9\32\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\6\7\1\u01fa"+
    "\25\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\21\7\1\u01fb\12\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\7\7\2\u01fc"+
    "\23\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\11\7\1\u01fd\22\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\6\7\1\u01fe"+
    "\25\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\17\7\1\u01ff\14\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\16\7\1\u0200"+
    "\15\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\31\7\1\u0201\2\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\5\7\1\u0202"+
    "\26\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\7\7\2\u0203\23\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\31\7\1\u0204"+
    "\2\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\6\7\1\u0205\25\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\27\7\1\u0206"+
    "\4\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\5\7\1\u0207\26\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\6\7\1\u0208"+
    "\25\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\6\7\1\u0209\25\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\11\7\1\u020a"+
    "\22\7\11\0\1\7\1\u020b\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\7\7\2\u020c"+
    "\23\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\16\7\1\u020d\15\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\6\7\1\u020e"+
    "\25\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\13\7\2\u020f\17\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\2\7\2\u0210"+
    "\30\7\11\0\3\7\1\0\1\7\1\0\1\u0211\1\0"+
    "\3\7\1\u0211\15\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\6\7\1\u0212\25\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\12\7\1\u0213\21\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\u0214\1\0\3\7\1\u0214\15\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u0215\1\0\3\7\1\u0215"+
    "\15\0\34\7\11\0\3\7\1\0\1\7\1\0\1\u0216"+
    "\1\0\3\7\1\u0216\15\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u0217\1\0\3\7\1\u0217\15\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\17\7\1\u0218\14\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\11\7\1\u0219\22\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\12\7\1\u021a\21\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\6\7\1\u021b\4\7"+
    "\2\u021c\17\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\6\7\1\u021d\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\17\7"+
    "\1\u021e\14\7\11\0\3\7\1\0\1\7\1\0\1\u021f"+
    "\1\0\3\7\1\u021f\15\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\16\7\1\u0220"+
    "\15\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\6\7\1\u0221\25\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\24\7\1\u0222"+
    "\7\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\21\7\1\u0223\12\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\4\7\1\u0224"+
    "\27\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\6\7\1\u0225\25\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\15\0\11\7\1\u0226"+
    "\22\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\15\0\2\u0227\32\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\u0228\1\0\3\7\1\u0228\15\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u0229\1\0\3\7\1\u0229"+
    "\15\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\12\7\1\u022a\21\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\24\7"+
    "\1\u022b\7\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\15\0\6\7\1\u022c\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\15\0\12\7"+
    "\1\u022d\21\7\11\0\3\7\1\0\1\7\1\0\1\u022e"+
    "\1\0\3\7\1\u022e\15\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u022f\1\0\3\7\1\u022f\15\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\6\7\1\u0230\25\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\21\7\1\u0231\12\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\15\0\6\7\1\u0232\25\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\15\0\2\u0233\32\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\15\0"+
    "\24\7\1\u0234\7\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\15\0\30\7\1\u0235\3\7\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\5\1\1\11\10\1\6\11"+
    "\30\1\1\11\1\0\1\11\3\1\1\0\5\1\3\0"+
    "\6\1\7\11\74\1\1\11\1\1\1\0\140\1\1\11"+
    "\1\0\u0146\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[565];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _RoomSqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RoomSqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 157: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 158: break;
          case 3: 
            { return DIV;
            }
          case 159: break;
          case 4: 
            { return STAR;
            }
          case 160: break;
          case 5: 
            { return IDENTIFIER;
            }
          case 161: break;
          case 6: 
            { return MINUS;
            }
          case 162: break;
          case 7: 
            { return NUMERIC_LITERAL;
            }
          case 163: break;
          case 8: 
            { return DOT;
            }
          case 164: break;
          case 9: 
            { return PLUS;
            }
          case 165: break;
          case 10: 
            { return EQ;
            }
          case 166: break;
          case 11: 
            { return MOD;
            }
          case 167: break;
          case 12: 
            { return AMP;
            }
          case 168: break;
          case 13: 
            { return LPAREN;
            }
          case 169: break;
          case 14: 
            { return RPAREN;
            }
          case 170: break;
          case 15: 
            { return COMMA;
            }
          case 171: break;
          case 16: 
            { return SEMICOLON;
            }
          case 172: break;
          case 17: 
            { return LT;
            }
          case 173: break;
          case 18: 
            { return GT;
            }
          case 174: break;
          case 19: 
            { return BAR;
            }
          case 175: break;
          case 20: 
            { return TILDE;
            }
          case 176: break;
          case 21: 
            { return BRACKET_LITERAL;
            }
          case 177: break;
          case 22: 
            { return COMMENT;
            }
          case 178: break;
          case 23: 
            { return LINE_COMMENT;
            }
          case 179: break;
          case 24: 
            { return PARAMETER_NAME;
            }
          case 180: break;
          case 25: 
            { return STRING_LITERAL;
            }
          case 181: break;
          case 26: 
            { return NOT_EQ;
            }
          case 182: break;
          case 27: 
            { return EQEQ;
            }
          case 183: break;
          case 28: 
            { return LTE;
            }
          case 184: break;
          case 29: 
            { return SHL;
            }
          case 185: break;
          case 30: 
            { return UNEQ;
            }
          case 186: break;
          case 31: 
            { return GTE;
            }
          case 187: break;
          case 32: 
            { return SHR;
            }
          case 188: break;
          case 33: 
            { return AS;
            }
          case 189: break;
          case 34: 
            { return BY;
            }
          case 190: break;
          case 35: 
            { return OF;
            }
          case 191: break;
          case 36: 
            { return OR;
            }
          case 192: break;
          case 37: 
            { return ON;
            }
          case 193: break;
          case 38: 
            { return TO;
            }
          case 194: break;
          case 39: 
            { return IF;
            }
          case 195: break;
          case 40: 
            { return IN;
            }
          case 196: break;
          case 41: 
            { return IS;
            }
          case 197: break;
          case 42: 
            { return NO;
            }
          case 198: break;
          case 43: 
            { return CONCAT;
            }
          case 199: break;
          case 44: 
            { return END;
            }
          case 200: break;
          case 45: 
            { return FOR;
            }
          case 201: break;
          case 46: 
            { return AND;
            }
          case 202: break;
          case 47: 
            { return ADD;
            }
          case 203: break;
          case 48: 
            { return ALL;
            }
          case 204: break;
          case 49: 
            { return ASC;
            }
          case 205: break;
          case 50: 
            { return ROW;
            }
          case 206: break;
          case 51: 
            { return NOT;
            }
          case 207: break;
          case 52: 
            { return SET;
            }
          case 208: break;
          case 53: 
            { return KEY;
            }
          case 209: break;
          case 54: 
            { return EACH;
            }
          case 210: break;
          case 55: 
            { return ELSE;
            }
          case 211: break;
          case 56: 
            { return FAIL;
            }
          case 212: break;
          case 57: 
            { return FROM;
            }
          case 213: break;
          case 58: 
            { return TEMP;
            }
          case 214: break;
          case 59: 
            { return THEN;
            }
          case 215: break;
          case 60: 
            { return CASE;
            }
          case 216: break;
          case 61: 
            { return CAST;
            }
          case 217: break;
          case 62: 
            { return INTO;
            }
          case 218: break;
          case 63: 
            { return NULL;
            }
          case 219: break;
          case 64: 
            { return DESC;
            }
          case 220: break;
          case 65: 
            { return DROP;
            }
          case 221: break;
          case 66: 
            { return LEFT;
            }
          case 222: break;
          case 67: 
            { return LIKE;
            }
          case 223: break;
          case 68: 
            { return GLOB;
            }
          case 224: break;
          case 69: 
            { return WITH;
            }
          case 225: break;
          case 70: 
            { return WHEN;
            }
          case 226: break;
          case 71: 
            { return PLAN;
            }
          case 227: break;
          case 72: 
            { return VIEW;
            }
          case 228: break;
          case 73: 
            { return JOIN;
            }
          case 229: break;
          case 74: 
            { return AFTER;
            }
          case 230: break;
          case 75: 
            { return ABORT;
            }
          case 231: break;
          case 76: 
            { return ALTER;
            }
          case 232: break;
          case 77: 
            { return BEGIN;
            }
          case 233: break;
          case 78: 
            { return ORDER;
            }
          case 234: break;
          case 79: 
            { return OUTER;
            }
          case 235: break;
          case 80: 
            { return RAISE;
            }
          case 236: break;
          case 81: 
            { return ROWID;
            }
          case 237: break;
          case 82: 
            { return TABLE;
            }
          case 238: break;
          case 83: 
            { return CROSS;
            }
          case 239: break;
          case 84: 
            { return CHECK;
            }
          case 240: break;
          case 85: 
            { return INNER;
            }
          case 241: break;
          case 86: 
            { return INDEX;
            }
          case 242: break;
          case 87: 
            { return LIMIT;
            }
          case 243: break;
          case 88: 
            { return UNION;
            }
          case 244: break;
          case 89: 
            { return USING;
            }
          case 245: break;
          case 90: 
            { return MATCH;
            }
          case 246: break;
          case 91: 
            { return GROUP;
            }
          case 247: break;
          case 92: 
            { return WHERE;
            }
          case 248: break;
          case 93: 
            { return QUERY;
            }
          case 249: break;
          case 94: 
            { return EXCEPT;
            }
          case 250: break;
          case 95: 
            { return EXISTS;
            }
          case 251: break;
          case 96: 
            { return ESCAPE;
            }
          case 252: break;
          case 97: 
            { return ATTACH;
            }
          case 253: break;
          case 98: 
            { return ACTION;
            }
          case 254: break;
          case 99: 
            { return BEFORE;
            }
          case 255: break;
          case 100: 
            { return OFFSET;
            }
          case 256: break;
          case 101: 
            { return RENAME;
            }
          case 257: break;
          case 102: 
            { return REGEXP;
            }
          case 258: break;
          case 103: 
            { return COLUMN;
            }
          case 259: break;
          case 104: 
            { return COMMIT;
            }
          case 260: break;
          case 105: 
            { return CREATE;
            }
          case 261: break;
          case 106: 
            { return INSERT;
            }
          case 262: break;
          case 107: 
            { return ISNULL;
            }
          case 263: break;
          case 108: 
            { return IGNORE;
            }
          case 264: break;
          case 109: 
            { return DETACH;
            }
          case 265: break;
          case 110: 
            { return DELETE;
            }
          case 266: break;
          case 111: 
            { return SELECT;
            }
          case 267: break;
          case 112: 
            { return HAVING;
            }
          case 268: break;
          case 113: 
            { return UNIQUE;
            }
          case 269: break;
          case 114: 
            { return UPDATE;
            }
          case 270: break;
          case 115: 
            { return PRAGMA;
            }
          case 271: break;
          case 116: 
            { return VACUUM;
            }
          case 272: break;
          case 117: 
            { return VALUES;
            }
          case 273: break;
          case 118: 
            { return EXPLAIN;
            }
          case 274: break;
          case 119: 
            { return FOREIGN;
            }
          case 275: break;
          case 120: 
            { return ANALYZE;
            }
          case 276: break;
          case 121: 
            { return BETWEEN;
            }
          case 277: break;
          case 122: 
            { return REINDEX;
            }
          case 278: break;
          case 123: 
            { return RELEASE;
            }
          case 279: break;
          case 124: 
            { return REPLACE;
            }
          case 280: break;
          case 125: 
            { return TRIGGER;
            }
          case 281: break;
          case 126: 
            { return CASCADE;
            }
          case 282: break;
          case 127: 
            { return COLLATE;
            }
          case 283: break;
          case 128: 
            { return INDEXED;
            }
          case 284: break;
          case 129: 
            { return INSTEAD;
            }
          case 285: break;
          case 130: 
            { return NATURAL;
            }
          case 286: break;
          case 131: 
            { return NOTNULL;
            }
          case 287: break;
          case 132: 
            { return DEFAULT;
            }
          case 288: break;
          case 133: 
            { return WITHOUT;
            }
          case 289: break;
          case 134: 
            { return PRIMARY;
            }
          case 290: break;
          case 135: 
            { return VIRTUAL;
            }
          case 291: break;
          case 136: 
            { return RESTRICT;
            }
          case 292: break;
          case 137: 
            { return ROLLBACK;
            }
          case 293: break;
          case 138: 
            { return CONFLICT;
            }
          case 294: break;
          case 139: 
            { return DEFERRED;
            }
          case 295: break;
          case 140: 
            { return DATABASE;
            }
          case 296: break;
          case 141: 
            { return DISTINCT;
            }
          case 297: break;
          case 142: 
            { return EXCLUSIVE;
            }
          case 298: break;
          case 143: 
            { return RECURSIVE;
            }
          case 299: break;
          case 144: 
            { return TEMPORARY;
            }
          case 300: break;
          case 145: 
            { return INTERSECT;
            }
          case 301: break;
          case 146: 
            { return INITIALLY;
            }
          case 302: break;
          case 147: 
            { return IMMEDIATE;
            }
          case 303: break;
          case 148: 
            { return SAVEPOINT;
            }
          case 304: break;
          case 149: 
            { return REFERENCES;
            }
          case 305: break;
          case 150: 
            { return CONSTRAINT;
            }
          case 306: break;
          case 151: 
            { return DEFERRABLE;
            }
          case 307: break;
          case 152: 
            { return TRANSACTION;
            }
          case 308: break;
          case 153: 
            { return CURRENT_TIME;
            }
          case 309: break;
          case 154: 
            { return CURRENT_DATE;
            }
          case 310: break;
          case 155: 
            { return AUTOINCREMENT;
            }
          case 311: break;
          case 156: 
            { return CURRENT_TIMESTAMP;
            }
          case 312: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
