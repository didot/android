/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.tools.idea.lang.roomSql.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.android.tools.idea.lang.roomSql.psi.RoomPsiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_RoomSqlLexer.flex</tt>
 */
public class _RoomSqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13952 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\3"+
    "\13\1\15\3\13\1\16\24\13\1\17\1\20\1\21\10\1\1\22\1\23\1\13\1\24\4\13\1\25"+
    "\10\13\1\26\12\13\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13"+
    "\1\32\1\1\1\34\1\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1"+
    "\43\1\44\1\13\1\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52"+
    "\2\13\1\53\1\1\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\20\1\64"+
    "\1\57\1\60\1\65\1\1\1\66\1\67\1\70\1\71\1\24\1\60\1\72\1\1\1\73\1\55\1\74"+
    "\1\75\1\57\1\60\1\72\1\1\1\63\1\55\1\43\1\76\1\77\1\100\1\101\1\1\1\73\1\67"+
    "\1\1\1\102\1\40\1\60\1\53\1\1\1\103\1\55\1\1\1\102\1\40\1\60\1\104\1\1\1\62"+
    "\1\55\1\105\1\102\1\40\1\13\1\106\1\62\1\107\1\55\1\110\1\111\1\112\1\13\1"+
    "\113\1\114\1\1\1\67\1\1\1\27\2\13\1\115\1\114\1\116\2\1\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\2\1\1\73\1\1\1\116\1\1\1\125\1\13\1\126\1\1\1\127\7\1\2"+
    "\13\1\32\1\107\1\116\1\130\1\131\1\132\1\133\1\116\2\13\1\134\2\13\1\135\24"+
    "\13\1\136\1\137\2\13\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\32\2\1"+
    "\1\13\1\1\5\13\1\142\1\27\45\13\1\143\1\13\1\144\1\32\4\13\1\32\1\145\1\146"+
    "\1\20\1\13\1\20\1\13\1\20\1\146\1\73\3\13\1\147\1\1\1\150\1\116\2\1\1\116"+
    "\5\13\1\31\2\13\1\151\4\13\1\42\1\13\1\152\2\1\1\67\1\13\1\153\1\51\2\13\1"+
    "\154\1\13\1\101\1\116\2\1\1\13\1\114\3\13\1\51\2\1\2\116\1\155\5\1\1\111\2"+
    "\13\1\147\1\156\1\116\2\1\1\157\1\13\1\160\1\44\2\13\1\42\1\1\2\13\1\147\1"+
    "\1\1\161\1\44\1\13\1\153\6\1\1\162\1\163\14\13\4\1\21\13\1\142\2\13\1\142"+
    "\1\164\1\13\1\153\3\13\1\165\1\166\1\167\1\126\1\166\1\170\1\1\1\171\2\1\1"+
    "\172\1\1\1\173\1\1\1\126\6\1\1\174\1\175\1\176\1\177\1\200\3\1\1\201\147\1"+
    "\2\13\1\152\2\13\1\152\10\13\1\202\1\203\2\13\1\134\3\13\1\204\1\1\1\13\1"+
    "\114\4\205\4\1\1\107\35\1\1\206\2\1\1\207\1\27\4\13\1\210\1\27\4\13\1\135"+
    "\1\111\1\13\1\153\1\27\4\13\1\152\1\1\1\13\1\32\3\1\1\13\40\1\133\13\1\42"+
    "\4\1\135\13\1\42\2\1\10\13\1\126\4\1\2\13\1\153\20\13\1\126\1\13\1\211\1\1"+
    "\2\13\1\152\1\107\1\13\1\153\4\13\1\42\2\1\1\212\1\213\5\13\1\214\1\13\1\153"+
    "\1\31\3\1\1\212\1\215\1\13\1\33\1\1\3\13\1\147\1\213\2\13\1\147\1\1\1\116"+
    "\1\1\1\216\1\44\1\13\1\42\1\13\1\114\1\1\1\13\1\126\1\52\2\13\1\33\1\107\1"+
    "\116\1\217\1\220\2\13\1\50\1\1\1\221\1\116\1\13\1\222\3\13\1\223\1\224\1\225"+
    "\1\32\1\70\1\226\1\227\1\205\2\13\1\135\1\42\7\13\1\33\1\116\72\13\1\147\1"+
    "\13\1\230\2\13\1\154\20\1\26\13\1\153\6\13\1\101\2\1\1\114\1\231\1\60\1\232"+
    "\1\233\6\13\1\20\1\1\1\157\25\13\1\153\1\1\4\13\1\213\2\13\1\31\2\1\1\154"+
    "\7\1\1\217\7\13\1\126\1\1\1\116\1\27\1\32\1\27\1\32\1\234\4\13\1\152\1\235"+
    "\1\236\2\1\1\237\1\13\1\14\1\240\2\153\2\1\7\13\1\32\30\1\1\13\1\126\3\13"+
    "\1\73\2\1\2\13\1\1\1\13\1\241\2\13\1\42\1\13\1\153\2\13\1\242\3\1\11\13\1"+
    "\153\1\116\5\1\2\13\1\31\3\13\1\147\11\1\23\13\1\114\1\13\1\42\1\31\11\1\1"+
    "\243\2\13\1\244\1\13\1\42\1\13\1\114\1\13\1\152\4\1\1\13\1\245\1\13\1\42\1"+
    "\13\1\101\4\1\3\13\1\246\4\1\1\73\1\247\1\13\1\147\2\1\1\13\1\126\1\13\1\126"+
    "\2\1\1\125\1\13\1\51\1\1\3\13\1\42\1\13\1\42\1\13\1\33\1\13\1\20\6\1\4\13"+
    "\1\50\3\1\3\13\1\33\3\13\1\33\60\1\1\157\2\13\1\31\2\1\1\67\1\1\1\157\2\13"+
    "\2\1\1\13\1\50\1\116\1\157\1\13\1\114\1\67\1\1\2\13\1\250\1\157\2\13\1\33"+
    "\1\251\1\252\2\1\1\13\1\24\1\154\5\1\1\253\1\254\1\50\2\13\1\152\1\1\1\116"+
    "\1\75\1\57\1\60\1\72\1\1\1\255\1\20\21\1\3\13\1\1\1\256\1\116\12\1\2\13\1"+
    "\152\2\1\1\257\2\1\3\13\1\1\1\260\1\116\2\1\2\13\1\32\1\1\1\116\3\1\1\13\1"+
    "\101\1\1\1\116\26\1\4\13\1\116\1\107\34\1\3\13\1\50\20\1\71\13\1\101\16\1"+
    "\14\13\1\147\53\1\2\13\1\152\75\1\44\13\1\114\33\1\43\13\1\50\1\13\1\152\1"+
    "\116\6\1\1\13\1\153\1\1\3\13\1\1\1\147\1\116\1\157\1\261\1\13\67\1\4\13\1"+
    "\51\1\73\3\1\1\157\6\1\1\20\77\1\6\13\1\32\1\126\1\50\1\101\66\1\5\13\1\217"+
    "\3\13\1\146\1\262\1\263\1\264\3\13\1\265\1\266\1\13\1\267\1\270\1\40\24\13"+
    "\1\271\1\13\1\40\1\135\1\13\1\135\1\13\1\217\1\13\1\217\1\152\1\13\1\152\1"+
    "\13\1\60\1\13\1\60\1\13\1\272\3\273\14\13\1\51\123\1\1\264\1\13\1\274\1\275"+
    "\1\276\1\277\1\300\1\301\1\302\1\154\1\303\1\154\24\1\55\13\1\114\2\1\103"+
    "\13\1\51\15\13\1\153\150\13\1\20\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\22\2\1\1\22\22\0\1\1\1\23\1\14\2\0\1\25\1\26\1\13\1\27\1\30\1"+
    "\21\1\5\1\31\1\6\1\3\1\20\1\7\11\2\1\17\1\32\1\33\1\24\1\34\2\0\1\36\1\40"+
    "\1\45\1\51\1\4\1\52\1\62\1\57\1\46\1\70\1\64\1\53\1\61\1\47\1\41\1\66\1\71"+
    "\1\42\1\56\1\43\1\60\1\67\1\63\1\10\1\54\1\55\4\0\1\65\1\0\1\35\1\37\1\44"+
    "\1\50\1\12\1\11\1\62\1\57\1\46\1\70\1\64\1\53\1\61\1\47\1\41\1\66\1\71\1\42"+
    "\1\56\1\43\1\60\1\67\1\63\1\10\1\54\1\55\1\0\1\72\1\0\1\73\6\0\1\1\12\0\1"+
    "\1\11\0\1\15\12\0\1\15\4\0\1\15\5\0\27\15\1\0\10\15\2\46\35\15\1\56\2\15\4"+
    "\0\14\15\16\0\5\15\7\0\1\15\1\0\1\15\1\0\5\15\1\0\2\15\2\0\4\15\1\0\1\15\6"+
    "\0\1\15\1\0\3\15\1\0\1\15\1\0\4\15\1\0\23\15\1\0\13\15\10\0\6\15\1\0\26\15"+
    "\2\0\1\15\6\0\10\15\10\0\13\15\5\0\3\15\15\0\12\16\4\0\6\15\1\0\1\15\17\0"+
    "\2\15\7\0\2\15\12\16\3\15\2\0\2\15\1\0\16\15\15\0\11\15\13\0\1\15\16\0\12"+
    "\16\6\15\4\0\2\15\4\0\1\15\5\0\6\15\4\0\1\15\11\0\1\15\3\0\1\15\7\0\11\15"+
    "\7\0\5\15\17\0\26\15\3\0\1\15\2\0\1\15\7\0\12\15\4\0\12\16\1\15\4\0\10\15"+
    "\2\0\2\15\2\0\26\15\1\0\7\15\1\0\1\15\3\0\4\15\3\0\1\15\20\0\1\15\15\0\2\15"+
    "\1\0\1\15\5\0\6\15\4\0\2\15\1\0\2\15\1\0\2\15\1\0\2\15\17\0\4\15\1\0\1\15"+
    "\7\0\12\16\2\0\3\15\20\0\11\15\1\0\2\15\1\0\2\15\1\0\5\15\3\0\1\15\2\0\1\15"+
    "\30\0\1\15\13\0\10\15\2\0\1\15\3\0\1\15\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15"+
    "\1\0\1\15\1\0\2\15\3\0\2\15\3\0\3\15\3\0\14\15\13\0\10\15\1\0\2\15\10\0\3"+
    "\15\5\0\4\15\1\0\5\15\3\0\1\15\3\0\2\15\15\0\13\15\2\0\1\15\21\0\1\15\12\0"+
    "\6\15\5\0\22\15\3\0\10\15\1\0\11\15\1\0\1\15\2\0\7\15\11\0\1\15\1\0\2\15\14"+
    "\0\12\16\7\0\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15\6\0\4\15\1\0\7\15\1"+
    "\0\3\15\1\0\1\15\1\0\1\15\2\0\2\15\1\0\4\15\1\0\2\15\11\0\1\15\2\0\5\15\1"+
    "\0\1\15\11\0\12\16\2\0\14\15\1\0\24\15\13\0\5\15\3\0\6\15\4\0\4\15\3\0\1\15"+
    "\3\0\2\15\7\0\3\15\4\0\15\15\14\0\1\15\1\0\6\15\1\0\1\15\5\0\1\15\2\0\13\15"+
    "\1\0\15\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\1\15\1\0\4\15\2\0\7\15"+
    "\1\0\1\15\1\0\4\15\2\0\16\15\2\0\6\15\2\0\15\15\2\0\1\15\1\1\17\15\1\0\10"+
    "\15\7\0\15\15\1\0\6\15\23\0\1\15\4\0\1\15\3\0\11\15\1\0\1\15\5\0\17\15\1\0"+
    "\16\15\2\0\14\15\13\0\1\15\15\0\7\15\7\0\16\15\15\0\2\15\12\16\3\0\3\15\11"+
    "\0\4\15\1\0\4\15\3\0\2\15\11\0\10\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\6\15\1"+
    "\0\7\15\1\0\1\15\3\0\3\15\1\0\7\15\3\0\4\15\2\0\6\15\4\0\13\1\15\0\2\1\5\0"+
    "\1\1\17\0\1\1\1\0\1\15\15\0\1\15\2\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3\0"+
    "\5\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0\1\64\3\15\1\0\13\15\2\0\4\15\5\0\5\15"+
    "\4\0\1\15\4\0\2\15\13\0\5\15\6\0\4\15\3\0\2\15\14\0\10\15\7\0\10\15\1\0\7"+
    "\15\1\0\1\1\4\0\2\15\12\0\5\15\5\0\2\15\3\0\7\15\6\0\3\15\12\16\2\15\13\0"+
    "\11\15\2\0\27\15\2\0\7\15\1\0\3\15\1\0\4\15\1\0\4\15\2\0\6\15\3\0\1\15\1\0"+
    "\1\15\2\0\5\15\1\0\12\15\12\16\5\15\1\0\3\15\1\0\10\15\4\0\7\15\3\0\1\15\3"+
    "\0\2\15\1\0\1\15\3\0\2\15\2\0\5\15\2\0\1\15\1\0\1\15\30\0\3\15\3\0\6\15\2"+
    "\0\6\15\2\0\6\15\11\0\7\15\4\0\5\15\3\0\5\15\5\0\1\15\1\0\10\15\1\0\5\15\1"+
    "\0\1\15\1\0\2\15\1\0\2\15\1\0\12\15\6\0\12\15\2\0\6\15\2\0\6\15\2\0\6\15\2"+
    "\0\3\15\3\0\14\15\1\0\16\15\1\0\2\15\1\0\2\15\1\0\10\15\6\0\4\15\4\0\16\15"+
    "\2\0\1\15\1\0\14\15\1\0\2\15\3\0\1\15\2\0\4\15\1\0\2\15\12\0\10\15\6\0\6\15"+
    "\1\0\3\15\1\0\12\15\3\0\1\15\12\0\4\15\13\0\12\16\1\15\1\0\1\15\3\0\7\15\1"+
    "\0\1\15\1\0\4\15\1\0\17\15\1\0\2\15\14\0\3\15\4\0\2\15\1\0\1\15\20\0\4\15"+
    "\10\0\1\15\13\0\10\15\5\0\3\15\2\0\1\15\2\0\2\15\2\0\4\15\1\0\14\15\1\0\1"+
    "\15\1\0\7\15\1\0\21\15\1\0\4\15\2\0\10\15\1\0\7\15\1\0\14\15\1\0\4\15\1\0"+
    "\5\15\1\0\1\15\3\0\14\15\2\0\13\15\1\0\10\15\2\0\22\16\1\0\2\15\1\0\1\15\2"+
    "\0\1\15\1\0\12\15\1\0\4\15\1\0\1\15\1\0\1\15\6\0\1\15\4\0\1\15\1\0\1\15\1"+
    "\0\1\15\1\0\3\15\1\0\2\15\1\0\1\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0"+
    "\1\15\1\0\2\15\1\0\1\15\2\0\4\15\1\0\7\15\1\0\4\15\1\0\4\15\1\0\1\15\1\0\12"+
    "\15\1\0\5\15\1\0\3\15\1\0\5\15\1\0\5\15");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\3\2\5\2\1\1\5\1\1\1\10\1\11\1\1"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\25\5\1\23\1\24\1\3\1\0\5\5\1\25"+
    "\3\0\3\5\2\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\7\5\1\40\2\5\1\41"+
    "\1\42\1\43\1\44\6\5\1\45\7\5\1\46\1\47"+
    "\1\50\3\5\1\51\31\5\1\52\1\3\1\0\4\5"+
    "\1\53\2\5\1\3\1\5\1\54\1\5\1\30\5\5"+
    "\1\55\1\56\1\5\1\57\1\60\21\5\1\61\26\5"+
    "\1\62\13\5\1\63\13\5\1\64\15\5\1\65\1\66"+
    "\1\5\1\67\1\5\1\70\1\30\1\0\30\5\1\71"+
    "\3\5\1\72\1\73\1\74\13\5\1\75\12\5\1\76"+
    "\4\5\1\77\1\5\1\100\1\5\1\101\1\5\1\102"+
    "\11\5\1\103\1\104\1\5\1\105\2\5\1\106\2\5"+
    "\1\107\1\5\1\110\7\5\1\111\1\112\3\5\1\113"+
    "\3\5\1\114\1\5\1\115\1\116\10\5\1\117\1\5"+
    "\1\120\1\5\1\121\11\5\1\122\1\123\3\5\1\124"+
    "\1\125\15\5\1\126\3\5\1\127\1\5\1\130\1\5"+
    "\1\131\1\132\1\5\1\133\5\5\1\134\1\135\1\5"+
    "\1\136\1\5\1\137\1\5\1\140\1\141\2\5\1\142"+
    "\1\5\1\143\3\5\1\144\2\5\1\145\11\5\1\146"+
    "\1\147\1\150\4\5\1\151\1\5\1\152\1\5\1\153"+
    "\4\5\1\154\1\155\2\5\1\156\1\5\1\157\1\160"+
    "\1\161\1\5\1\162\1\5\1\163\1\164\2\5\1\165"+
    "\1\166\1\167\1\5\1\170\2\5\1\171\1\172\1\5"+
    "\1\173\3\5\1\174\1\175\2\5\1\176\3\5\1\177"+
    "\1\200\1\5\1\201\1\202\2\5\1\203\3\5\1\204"+
    "\1\205\1\206\4\5\1\207\1\210\2\5\1\211\1\5"+
    "\1\0\3\5\1\212\1\5\1\213\1\214\1\5\1\215"+
    "\2\5\1\216\1\217\2\5\2\0\1\220\1\221\1\222"+
    "\1\5\1\223\1\5\1\224\1\5\1\225\2\0\1\226"+
    "\1\5\1\227\2\0\1\5\1\230\1\231\1\232\4\0"+
    "\1\233";

  private static int [] zzUnpackAction() {
    int [] result = new int[562];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\74\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\74\0\u0384\0\u03c0\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\74\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u0258\0\u0294\0\u0bb8\0\u0bf4\0\u0c30"+
    "\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u02d0\0\u0fb4\0\u0ff0"+
    "\0\u02d0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u02d0"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u02d0"+
    "\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"+
    "\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c"+
    "\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\74"+
    "\0\u1a7c\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u02d0\0\u1ba8"+
    "\0\u1be4\0\u0b7c\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c"+
    "\0\u1d88\0\u1dc4\0\u1e00\0\u02d0\0\u02d0\0\u1e3c\0\u02d0\0\u02d0"+
    "\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c"+
    "\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc"+
    "\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc"+
    "\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc"+
    "\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c"+
    "\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u02d0\0\u2aa8\0\u2ae4\0\u2b20"+
    "\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00"+
    "\0\u02d0\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4"+
    "\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u02d0\0\u02d0"+
    "\0\u3048\0\u02d0\0\u3084\0\u02d0\0\74\0\u1cd4\0\u30c0\0\u30fc"+
    "\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc"+
    "\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc"+
    "\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660\0\u369c"+
    "\0\u36d8\0\u3714\0\u02d0\0\u02d0\0\u02d0\0\u3750\0\u378c\0\u37c8"+
    "\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8"+
    "\0\u02d0\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c"+
    "\0\u3b88\0\u3bc4\0\u3c00\0\u02d0\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0"+
    "\0\u02d0\0\u3d2c\0\u02d0\0\u3d68\0\u02d0\0\u3da4\0\u02d0\0\u3de0"+
    "\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0"+
    "\0\u02d0\0\u3ffc\0\u4038\0\u02d0\0\u4074\0\u40b0\0\u02d0\0\u40ec"+
    "\0\u4128\0\u02d0\0\u4164\0\u02d0\0\u41a0\0\u41dc\0\u4218\0\u4254"+
    "\0\u4290\0\u42cc\0\u4308\0\u02d0\0\u02d0\0\u4344\0\u4380\0\u43bc"+
    "\0\u02d0\0\u43f8\0\u4434\0\u4470\0\u02d0\0\u44ac\0\u02d0\0\u02d0"+
    "\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614\0\u4650\0\u468c"+
    "\0\u02d0\0\u46c8\0\u02d0\0\u4704\0\u02d0\0\u4740\0\u477c\0\u47b8"+
    "\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u02d0\0\u02d0"+
    "\0\u495c\0\u4998\0\u49d4\0\u02d0\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4"+
    "\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4"+
    "\0\u4ce0\0\u4d1c\0\u02d0\0\u4d58\0\u4d94\0\u4dd0\0\u02d0\0\u4e0c"+
    "\0\u02d0\0\u4e48\0\u02d0\0\u02d0\0\u4e84\0\u02d0\0\u4ec0\0\u4efc"+
    "\0\u4f38\0\u4f74\0\u4fb0\0\u02d0\0\u02d0\0\u4fec\0\u02d0\0\u5028"+
    "\0\u02d0\0\u5064\0\u02d0\0\u02d0\0\u50a0\0\u50dc\0\u02d0\0\u5118"+
    "\0\u02d0\0\u5154\0\u5190\0\u51cc\0\u02d0\0\u5208\0\u5244\0\u02d0"+
    "\0\u5280\0\u52bc\0\u52f8\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424"+
    "\0\u5460\0\u02d0\0\u02d0\0\u02d0\0\u549c\0\u54d8\0\u5514\0\u5550"+
    "\0\u02d0\0\u558c\0\u02d0\0\u55c8\0\u02d0\0\u5604\0\u5640\0\u567c"+
    "\0\u56b8\0\u02d0\0\u02d0\0\u56f4\0\u5730\0\u02d0\0\u576c\0\u02d0"+
    "\0\u02d0\0\u02d0\0\u57a8\0\u02d0\0\u57e4\0\u02d0\0\u02d0\0\u5820"+
    "\0\u585c\0\u02d0\0\u02d0\0\u02d0\0\u5898\0\u02d0\0\u58d4\0\u5910"+
    "\0\u02d0\0\u02d0\0\u594c\0\u02d0\0\u5988\0\u59c4\0\u5a00\0\u02d0"+
    "\0\u02d0\0\u5a3c\0\u5a78\0\u02d0\0\u5ab4\0\u5af0\0\u5b2c\0\u02d0"+
    "\0\u02d0\0\u5b68\0\u02d0\0\u02d0\0\u5ba4\0\u5be0\0\u02d0\0\u5c1c"+
    "\0\u5c58\0\u5c94\0\u02d0\0\u02d0\0\u02d0\0\u5cd0\0\u5d0c\0\u5d48"+
    "\0\u5d84\0\u02d0\0\u02d0\0\u5dc0\0\u5dfc\0\u02d0\0\u5e38\0\u5e74"+
    "\0\u5eb0\0\u5eec\0\u5f28\0\u02d0\0\u5f64\0\u02d0\0\u02d0\0\u5fa0"+
    "\0\u02d0\0\u5fdc\0\u6018\0\u02d0\0\u02d0\0\u6054\0\u6090\0\u60cc"+
    "\0\u6108\0\u02d0\0\u02d0\0\u02d0\0\u6144\0\u02d0\0\u6180\0\u02d0"+
    "\0\u61bc\0\u02d0\0\u61f8\0\u6234\0\u02d0\0\u6270\0\u02d0\0\u62ac"+
    "\0\u62e8\0\u6324\0\u6360\0\74\0\u02d0\0\u639c\0\u63d8\0\u6414"+
    "\0\u6450\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[562];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\6\1\14\1\15\1\16\1\2\1\17"+
    "\1\20\1\21\1\3\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\34\2\35\1\36"+
    "\1\37\1\40\2\41\1\42\1\43\2\44\1\13\1\45"+
    "\2\16\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\2\1\55\1\56\1\57\1\60\1\61\1\62\75\0"+
    "\1\3\20\0\1\3\53\0\1\4\1\63\1\64\2\0"+
    "\1\4\2\0\1\64\63\0\1\63\4\0\1\63\66\0"+
    "\1\16\1\0\1\16\2\0\1\16\1\65\2\16\2\0"+
    "\2\16\16\0\2\66\10\16\1\67\3\16\1\70\2\16"+
    "\1\71\6\16\1\0\4\16\10\0\1\72\67\0\1\4"+
    "\1\63\1\64\2\0\1\4\1\73\1\0\1\64\63\0"+
    "\1\16\1\0\1\16\2\0\4\16\1\74\1\75\2\16"+
    "\16\0\30\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\2\76\2\16\1\77"+
    "\1\100\22\16\1\0\4\16\2\0\13\74\1\101\60\74"+
    "\14\75\1\102\57\75\2\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\30\16\1\0\4\16\6\0"+
    "\1\103\3\0\3\103\2\0\1\103\17\0\30\103\1\0"+
    "\4\103\23\0\1\104\76\0\1\105\73\0\1\106\73\0"+
    "\1\107\6\0\1\110\1\111\63\0\1\112\7\0\1\113"+
    "\41\0\1\16\1\0\1\16\2\0\2\16\1\114\1\16"+
    "\2\0\2\16\16\0\2\16\2\115\2\16\1\116\2\117"+
    "\1\16\1\120\2\121\1\114\1\122\2\16\1\123\1\16"+
    "\1\124\4\16\1\0\4\16\4\0\1\16\1\0\1\125"+
    "\2\0\3\16\1\125\2\0\2\16\16\0\17\16\1\126"+
    "\10\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\2\16\1\127\1\16\2\0\2\16\16\0\5\16\1\130"+
    "\4\16\1\131\2\16\1\127\5\16\1\132\4\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\133\2\0\3\16\1\133"+
    "\2\0\2\16\16\0\2\134\2\16\1\135\23\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\136\2\0\3\16\1\136"+
    "\2\0\2\16\16\0\2\137\2\16\1\140\1\141\14\16"+
    "\1\142\5\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\2\143\2\16\1\144"+
    "\1\145\14\16\1\146\1\147\4\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\2\16\1\150\1\16\2\0"+
    "\2\16\16\0\12\16\1\151\2\16\1\150\3\16\1\152"+
    "\2\16\1\153\1\154\2\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\2\155"+
    "\2\16\1\156\16\16\1\157\4\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\160\2\0\3\16\1\160\2\0\2\16"+
    "\16\0\2\161\3\16\1\162\3\16\1\163\16\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\164\2\0\3\16\1\164"+
    "\2\0\2\16\16\0\11\16\1\165\16\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\166\2\0\3\16\1\166\2\0"+
    "\2\16\16\0\2\167\26\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\2\170"+
    "\26\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\12\16\1\171\6\16\1\172"+
    "\6\16\1\0\1\173\3\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\2\174\26\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\5\16\1\175\10\16\1\176\11\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\11\16\1\177\10\16\1\200\5\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\201\2\0\3\16\1\201"+
    "\2\0\2\16\16\0\30\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\5\16"+
    "\1\202\10\16\1\203\11\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\2\204"+
    "\7\16\1\205\16\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\4\16\1\206"+
    "\23\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\23\16\1\207\4\16\1\0"+
    "\4\16\74\0\1\210\3\0\1\63\1\0\1\64\2\0"+
    "\1\63\2\0\1\64\63\0\1\211\2\0\2\212\1\211"+
    "\66\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\7\16\2\213\1\214\16\16\1\0\1\215\3\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\7\16\2\216\17\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\13\16"+
    "\2\217\13\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\21\16\1\220\6\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\7\16\2\221\17\16\1\0\4\16"+
    "\2\0\22\72\1\0\51\72\2\0\1\222\4\0\1\222"+
    "\1\0\2\222\22\0\1\222\1\0\1\222\4\0\1\222"+
    "\3\0\1\222\25\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\11\16\1\223\16\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\5\16\1\224\22\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\4\16"+
    "\1\225\23\16\1\0\4\16\15\0\1\74\74\0\1\75"+
    "\61\0\1\103\1\0\1\103\2\0\4\103\2\0\2\103"+
    "\16\0\30\103\1\0\4\103\2\0\21\104\1\226\52\104"+
    "\2\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\6\16\1\227\21\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\4\16"+
    "\1\230\23\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\6\16\1\231\21\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\6\16\1\232\21\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\2\233\11\16\2\234\13\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\13\16\2\235\13\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\6\16\1\236"+
    "\7\16\1\237\11\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\7\16\2\240"+
    "\17\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\6\16\1\241\21\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\2\16\1\242"+
    "\1\16\2\0\2\16\16\0\6\16\1\243\6\16\1\242"+
    "\7\16\1\244\2\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\2\16\1\245\1\16\2\0\2\16\16\0"+
    "\15\16\1\245\12\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\13\16\2\246"+
    "\13\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\6\16\1\247\21\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\2\16\1\250"+
    "\1\16\2\0\2\16\16\0\7\16\2\251\1\252\1\253"+
    "\2\16\1\250\1\254\2\16\1\255\3\16\1\256\2\16"+
    "\1\0\1\257\3\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\11\16\1\260\16\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\16\16\1\261\7\16\1\262\1\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\24\16\1\263\3\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\2\16\2\264\24\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\2\265\7\16"+
    "\1\266\16\16\1\0\4\16\4\0\1\16\1\0\1\267"+
    "\2\0\3\16\1\267\2\0\2\16\16\0\30\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\21\16\1\270\6\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\12\16\1\271\3\16\1\272\5\16\1\273\3\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\274\2\0\3\16\1\274"+
    "\2\0\2\16\16\0\4\16\1\275\23\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\276\2\0\3\16\1\276\2\0"+
    "\2\16\16\0\30\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\5\16\1\277"+
    "\22\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\6\16\1\300\2\16\1\301"+
    "\1\302\2\303\4\16\1\304\6\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\12\16\1\305\15\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\24\16\1\306"+
    "\3\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\12\16\1\307\15\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\6\16\1\310\21\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\6\16\1\311\21\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\16\16\1\312"+
    "\11\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\2\16\1\313\1\16\2\0\2\16\16\0\6\16\1\314"+
    "\6\16\1\313\1\315\2\16\1\316\6\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\6\16\1\317\21\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\4\16"+
    "\1\320\23\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\21\16\1\321\6\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\2\16"+
    "\1\322\1\16\2\0\2\16\16\0\15\16\1\322\12\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\24\16\1\323\2\16\1\324\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\6\16\1\325\7\16\1\326\11\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\30\16\1\0\1\16\1\327\2\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\30\16\1\0\1\16\1\330\2\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\11\16\1\331"+
    "\16\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\11\16\1\332\16\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\13\16\2\333\13\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\6\16\1\334\21\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\4\16\1\335"+
    "\23\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\4\16\1\336\23\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\6\16\1\337\21\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\340\2\0\3\16\1\340\2\0\2\16"+
    "\16\0\30\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\17\16\1\341\10\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\2\342\7\16\1\343\16\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\2\344\26\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\7\16"+
    "\2\345\5\16\1\346\11\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\347\2\0\3\16\1\347\2\0\2\16\16\0"+
    "\5\16\1\350\22\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\11\16\1\351"+
    "\16\16\1\0\4\16\4\0\1\16\1\0\1\352\2\0"+
    "\3\16\1\352\2\0\2\16\16\0\30\16\1\0\4\16"+
    "\4\0\1\211\4\0\1\211\66\0\1\16\1\0\1\353"+
    "\2\0\3\16\1\353\2\0\2\16\16\0\16\16\1\354"+
    "\11\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\21\16\1\355\6\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\16\16\1\356\11\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\22\16\1\357\5\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\360\2\0\3\16\1\360\2\0\2\16\16\0\30\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\2\361\26\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\16\16\1\362\11\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\363\2\0\3\16\1\363\2\0\2\16\16\0\30\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\24\16\1\364\3\16\1\0\4\16"+
    "\2\0\20\104\1\365\1\366\52\104\2\0\1\16\1\0"+
    "\1\367\2\0\3\16\1\367\2\0\2\16\16\0\30\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\5\16\1\370\22\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\2\371\26\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\11\16\1\372"+
    "\16\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\16\16\1\373\11\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\374\2\0\3\16\1\374"+
    "\2\0\2\16\16\0\30\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\4\16"+
    "\1\375\23\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\4\16\1\376\23\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\26\16\1\377\1\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\11\16\1\u0100\16\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\21\16"+
    "\1\u0101\6\16\1\0\4\16\4\0\1\16\1\0\1\u0102"+
    "\2\0\3\16\1\u0102\2\0\2\16\16\0\30\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\u0103\2\0\3\16\1\u0103"+
    "\2\0\2\16\16\0\30\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\u0104\2\0\3\16\1\u0104\2\0\2\16\16\0"+
    "\30\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\23\16\1\u0105\4\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\12\16\1\u0106\15\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\2\u0107\26\16\1\0\4\16\4\0\1\16\1\0\1\u0108"+
    "\2\0\3\16\1\u0108\2\0\2\16\16\0\30\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\6\16\1\u0109\21\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\u010a\2\0\3\16\1\u010a\2\0\2\16"+
    "\16\0\30\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\16\16\1\u010b\11\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\21\16\1\u010c\6\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\16\16\1\u010d\11\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\11\16"+
    "\1\u010e\16\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\30\16\1\0\1\u010f"+
    "\3\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\16\16\1\u0110\11\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\12\16\1\u0111\15\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\25\16\1\u0112"+
    "\2\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\12\16\1\u0113\15\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\u0114\2\0\3\16\1\u0114"+
    "\2\0\2\16\16\0\6\16\1\u0115\2\u0116\17\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\2\16\1\u0117"+
    "\1\16\2\0\2\16\16\0\15\16\1\u0117\3\16\1\u0118"+
    "\6\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\16\16\1\u0119\4\16\1\u011a"+
    "\4\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\24\16\1\u011b\3\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\2\u011c\26\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\21\16"+
    "\1\u011d\6\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\7\16\2\u011e\17\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\5\16\1\u011f\22\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\u0120\2\0\3\16\1\u0120\2\0"+
    "\2\16\16\0\4\16\1\u0121\23\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\6\16\1\u0122\21\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\u0123\2\0\3\16\1\u0123\2\0\2\16\16\0\30\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\u0124\2\0\3\16"+
    "\1\u0124\2\0\2\16\16\0\30\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\u0125\2\0\3\16\1\u0125\2\0\2\16"+
    "\16\0\6\16\1\u0126\21\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\23\16"+
    "\1\u0127\4\16\1\0\4\16\4\0\1\16\1\0\1\u0128"+
    "\2\0\3\16\1\u0128\2\0\2\16\16\0\30\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\4\16\1\u0129\23\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\23\16\1\u012a\4\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\12\16\1\u012b"+
    "\15\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\16\16\1\u012c\11\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\u012d\2\0\3\16\1\u012d"+
    "\2\0\2\16\16\0\2\u012e\26\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\2\u012f\26\16\1\0\4\16\4\0\1\16\1\0\1\u0130"+
    "\2\0\3\16\1\u0130\2\0\2\16\16\0\30\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\7\16\2\u0131\17\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\2\u0132\26\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\30\16\1\0\1\u0133"+
    "\3\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\6\16\1\u0134\21\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\6\16\1\u0135\21\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\11\16\1\u0136"+
    "\16\16\1\0\4\16\4\0\1\16\1\0\1\u0137\2\0"+
    "\3\16\1\u0137\2\0\2\16\16\0\30\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\u0138\2\0\3\16\1\u0138\2\0"+
    "\2\16\16\0\30\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\u0139\2\0\3\16\1\u0139\2\0\2\16\16\0\30\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\11\16\1\u013a\16\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\4\16\1\u013b\23\16\1\0\3\16\1\u013c\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\12\16\1\u013d\15\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\2\u013e\26\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\7\16\2\u013f\17\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\23\16\1\u0140\4\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\2\16"+
    "\2\u0141\24\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\22\16\1\u0142\5\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\5\16\1\u0143\4\16\1\u0144\15\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\25\16\1\u0145\2\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\24\16\1\u0146\3\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\12\16"+
    "\1\u0147\15\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\23\16\1\u0148\4\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\23\16\1\u0149\4\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\26\16\1\u014a\1\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\6\16"+
    "\1\u014b\21\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\12\16\1\u014c\15\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\5\16\1\u014d\22\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\30\16\1\0\1\u014e\3\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\23\16\1\u014f"+
    "\4\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\6\16\1\u0150\21\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\2\u0151\26\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\30\16"+
    "\1\0\1\u0152\3\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\11\16\1\u0153\16\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\5\16\1\u0154\22\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\6\16\1\u0155\21\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\7\16\2\u0156"+
    "\17\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\4\16\1\u0157\23\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\17\16\1\u0158\10\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\5\16\1\u0159\22\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\11\16\1\u015a"+
    "\16\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\5\16\1\u015b\22\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\u015c\2\0\3\16\1\u015c"+
    "\2\0\2\16\16\0\30\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\12\16"+
    "\1\u015d\15\16\1\0\4\16\4\0\1\16\1\0\1\u015e"+
    "\2\0\3\16\1\u015e\2\0\2\16\16\0\30\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\5\16\1\u015f\22\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\5\16\1\u0160\22\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\5\16\1\u0161"+
    "\22\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\5\16\1\u0162\22\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\13\16\2\u0163\13\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\24\16\1\u0164\3\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\2\u0165\26\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\5\16\1\u0166\22\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\1\16\1\u0167\2\16"+
    "\2\0\2\16\16\0\30\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\2\u0168"+
    "\26\16\1\0\4\16\4\0\1\16\1\0\1\u0169\2\0"+
    "\3\16\1\u0169\2\0\2\16\16\0\30\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\2\16\2\u016a\24\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\13\16"+
    "\2\u016b\13\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\4\16\1\u016c\23\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\u016d\2\0\3\16"+
    "\1\u016d\2\0\2\16\16\0\30\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\21\16\1\u016e\6\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\25\16\1\u016f"+
    "\2\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\2\u0170\26\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\16\16\1\u0171\11\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\6\16"+
    "\1\u0172\21\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\2\u0173\26\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\24\16\1\u0174\3\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\11\16\1\u0175\16\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\6\16\1\u0176"+
    "\21\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\21\16\1\u0177\6\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\27\16\1\u0178\1\0\4\16\4\0\1\16"+
    "\1\0\1\u0179\2\0\3\16\1\u0179\2\0\2\16\16\0"+
    "\30\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\5\16\1\u017a\22\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\11\16\1\u017b\16\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\5\16\1\u017c\22\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\1\16\1\u017d\2\16\2\0\2\16\16\0"+
    "\30\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\5\16\1\u017e\22\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\u017f\2\0\3\16\1\u017f"+
    "\2\0\2\16\16\0\30\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\16\16"+
    "\1\u0180\11\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\13\16\2\u0181\13\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\5\16\1\u0182\22\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\5\16\1\u0183\22\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\23\16"+
    "\1\u0184\4\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\5\16\1\u0185\22\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\23\16\1\u0186\4\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\7\16\2\u0187\17\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\6\16"+
    "\1\u0188\21\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\2\16\2\u0189\24\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\11\16\1\u018a\16\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\6\16\1\u018b\21\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\7\16"+
    "\2\u018c\17\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\30\16\1\0\1\u018d"+
    "\3\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\12\16\1\u018e\15\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\12\16\1\u018f\15\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\23\16\1\u0190"+
    "\4\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\25\16\1\u0191\2\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\6\16\1\u0192\21\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\22\16\1\u0193\5\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\30\16\1\0"+
    "\1\u0194\3\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\4\16\1\u0195\23\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\u0196\2\0\3\16\1\u0196\2\0"+
    "\2\16\16\0\30\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\24\16\1\u0197"+
    "\3\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\2\u0198\26\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\23\16\1\u0199\4\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\u019a\2\0\3\16\1\u019a\2\0\2\16\16\0"+
    "\30\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\23\16\1\u019b\4\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\17\16\1\u019c\10\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\6\16\1\u019d\21\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\21\16\1\u019e"+
    "\6\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\21\16\1\u019f\6\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\11\16\1\u01a0\16\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\u01a1\2\0\3\16\1\u01a1\2\0\2\16"+
    "\16\0\30\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\25\16\1\u01a2\2\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\22\16\1\u01a3\5\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\12\16\1\u01a4\15\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\20\16"+
    "\1\u01a5\7\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\12\16\1\u01a6\15\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\u01a7\2\0\3\16"+
    "\1\u01a7\2\0\2\16\16\0\30\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\u01a8\2\0\3\16\1\u01a8\2\0\2\16"+
    "\16\0\30\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\6\16\1\u01a9\21\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\u01aa\2\0\3\16"+
    "\1\u01aa\2\0\2\16\16\0\30\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\21\16\1\u01ab\6\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\u01ac\2\0\3\16\1\u01ac\2\0\2\16\16\0\30\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\u01ad\2\0\3\16"+
    "\1\u01ad\2\0\2\16\16\0\30\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\21\16\1\u01ae\6\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\11\16\1\u01af"+
    "\16\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\30\16\1\0\1\u01b0\3\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\7\16\2\u01b1\17\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\2\u01b2"+
    "\26\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\5\16\1\u01b3\22\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\2\u01b4\26\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\u01b5\2\0\3\16\1\u01b5\2\0\2\16\16\0"+
    "\30\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\13\16\2\u01b6\13\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\11\16\1\u01b7\16\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\5\16\1\u01b8\22\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\6\16\1\u01b9"+
    "\21\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\12\16\1\u01ba\15\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\6\16\1\u01bb\21\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\u01bc\2\0\3\16\1\u01bc\2\0\2\16"+
    "\16\0\30\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\12\16\1\u01bd\15\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\21\16\1\u01be\6\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\2\u01bf\26\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\u01c0\2\0\3\16\1\u01c0\2\0\2\16\16\0\30\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\6\16\1\u01c1\21\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\2\u01c2\26\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\16\16\1\u01c3"+
    "\11\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\11\16\1\u01c4\16\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\u01c5\2\0\3\16\1\u01c5"+
    "\2\0\2\16\16\0\30\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\2\u01c6"+
    "\26\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\16\16\1\u01c7\11\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\5\16\1\u01c8\22\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\16\16\1\u01c9\11\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\22\16\1\u01ca"+
    "\5\16\1\0\4\16\4\0\1\16\1\0\1\u01cb\2\0"+
    "\3\16\1\u01cb\2\0\2\16\16\0\30\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\2\u01cc\26\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\12\16\1\u01cd"+
    "\15\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\6\16\1\u01ce\21\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\4\16\1\u01cf\23\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\25\16\1\u01d0\2\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\u01d1\2\0\3\16\1\u01d1\2\0\2\16\16\0\30\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\u01d2\2\0\3\16"+
    "\1\u01d2\2\0\2\16\16\0\30\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\23\16\1\u01d3\4\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\2\u01d4\26\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\5\16\1\u01d5\22\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\24\16\1\u01d6\3\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\21\16"+
    "\1\u01d7\6\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\2\u01d8\26\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\11\16\1\u01d9\16\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\12\16\1\u01da\15\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\12\16\1\u01db"+
    "\15\16\1\0\4\16\4\0\1\16\1\0\1\u01dc\2\0"+
    "\3\16\1\u01dc\2\0\2\16\16\0\30\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\7\16\2\u01dd\17\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\12\16"+
    "\1\u01de\15\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\12\16\1\u01df\15\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\11\16\1\u01e0\16\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\1\16\1\u01e1\2\16"+
    "\2\0\2\16\16\0\30\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\u01e2\2\0\3\16\1\u01e2\2\0\2\16\16\0"+
    "\30\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\7\16\2\u01e3\17\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\u01e4\2\0\3\16\1\u01e4"+
    "\2\0\2\16\16\0\30\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\7\16"+
    "\2\u01e5\17\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\2\u01e6\26\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\7\16\2\u01e7\17\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\5\16\1\u01e8\22\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\u01e9\2\0\3\16\1\u01e9\2\0\2\16\16\0\30\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\7\16\2\u01ea\17\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\2\u01eb\26\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\u01ec\2\0\3\16\1\u01ec\2\0\2\16\16\0\30\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\6\16\1\u01ed\21\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\u01ee\2\0\3\16\1\u01ee\2\0"+
    "\2\16\16\0\30\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\16\16\1\u01ef"+
    "\11\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\13\16\2\u01f0\13\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\13\16\2\u01f1\13\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\2\u01f2\26\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\16\16\1\u01f3\11\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\16\16\1\u01f4\11\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\u01f5\2\0\3\16\1\u01f5\2\0"+
    "\2\16\16\0\2\u01f6\26\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\6\16"+
    "\1\u01f7\21\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\21\16\1\u01f8\6\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\7\16\2\u01f9\17\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\11\16\1\u01fa\16\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\6\16"+
    "\1\u01fb\21\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\17\16\1\u01fc\10\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\16\16\1\u01fd\11\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\30\16\1\0\1\16\1\u01fe\2\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\5\16"+
    "\1\u01ff\22\16\1\0\4\16\4\0\1\16\1\0\1\16"+
    "\2\0\4\16\2\0\2\16\16\0\7\16\2\u0200\17\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\30\16\1\0\1\16\1\u0201\2\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\6\16\1\u0202\21\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\27\16"+
    "\1\u0203\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\5\16\1\u0204\22\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\6\16\1\u0205\21\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\6\16\1\u0206\21\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\11\16\1\u0207"+
    "\16\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\30\16\1\u0208\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\7\16\2\u0209\17\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\16\16\1\u020a"+
    "\11\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\6\16\1\u020b\21\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\13\16\2\u020c\13\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\2\16\2\u020d\24\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\u020e\2\0\3\16\1\u020e\2\0\2\16\16\0\30\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\6\16\1\u020f\21\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\12\16\1\u0210\15\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\u0211\2\0\3\16\1\u0211\2\0\2\16\16\0"+
    "\30\16\1\0\4\16\4\0\1\16\1\0\1\u0212\2\0"+
    "\3\16\1\u0212\2\0\2\16\16\0\30\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\u0213\2\0\3\16\1\u0213\2\0"+
    "\2\16\16\0\30\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\u0214\2\0\3\16\1\u0214\2\0\2\16\16\0\30\16"+
    "\1\0\4\16\4\0\1\16\1\0\1\16\2\0\4\16"+
    "\2\0\2\16\16\0\17\16\1\u0215\10\16\1\0\4\16"+
    "\4\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\11\16\1\u0216\16\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\12\16"+
    "\1\u0217\15\16\1\0\4\16\45\0\1\u0218\4\0\2\u0219"+
    "\24\0\1\16\1\0\1\16\2\0\4\16\2\0\2\16"+
    "\16\0\6\16\1\u021a\21\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\16\2\0\4\16\2\0\2\16\16\0\17\16"+
    "\1\u021b\10\16\1\0\4\16\4\0\1\16\1\0\1\u021c"+
    "\2\0\3\16\1\u021c\2\0\2\16\16\0\30\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\16\16\1\u021d\11\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\6\16\1\u021e\21\16\1\0\4\16\4\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\24\16\1\u021f"+
    "\3\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\21\16\1\u0220\6\16\1\0"+
    "\4\16\4\0\1\16\1\0\1\16\2\0\4\16\2\0"+
    "\2\16\16\0\4\16\1\u0221\23\16\1\0\4\16\4\0"+
    "\1\16\1\0\1\16\2\0\4\16\2\0\2\16\16\0"+
    "\6\16\1\u0222\21\16\1\0\4\16\50\0\1\u0223\62\0"+
    "\2\u0224\37\0\1\16\1\0\1\u0225\2\0\3\16\1\u0225"+
    "\2\0\2\16\16\0\30\16\1\0\4\16\4\0\1\16"+
    "\1\0\1\u0226\2\0\3\16\1\u0226\2\0\2\16\16\0"+
    "\30\16\1\0\4\16\4\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\12\16\1\u0227\15\16\1\0"+
    "\4\16\63\0\1\u0228\55\0\1\u0229\32\0\1\16\1\0"+
    "\1\16\2\0\4\16\2\0\2\16\16\0\12\16\1\u022a"+
    "\15\16\1\0\4\16\6\0\1\u022b\5\0\1\u022b\65\0"+
    "\1\u022c\5\0\1\u022c\63\0\1\16\1\0\1\16\2\0"+
    "\4\16\2\0\2\16\16\0\6\16\1\u022d\21\16\1\0"+
    "\4\16\60\0\1\u022e\60\0\1\u022f\65\0\2\u0230\116\0"+
    "\1\u0231\100\0\1\u0232\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25740];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\11\1\1\11\2\1\6\11"+
    "\30\1\1\11\1\1\1\0\6\1\3\0\7\1\7\11"+
    "\74\1\1\11\1\1\1\0\152\1\1\11\1\0\u0111\1"+
    "\1\0\17\1\2\0\11\1\2\0\3\1\2\0\2\1"+
    "\1\11\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[562];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _RoomSqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RoomSqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 156: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 157: break;
          case 3: 
            { return NUMERIC_LITERAL;
            }
          case 158: break;
          case 4: 
            { return DOT;
            }
          case 159: break;
          case 5: 
            { return IDENTIFIER;
            }
          case 160: break;
          case 6: 
            { return PLUS;
            }
          case 161: break;
          case 7: 
            { return MINUS;
            }
          case 162: break;
          case 8: 
            { return DIV;
            }
          case 163: break;
          case 9: 
            { return STAR;
            }
          case 164: break;
          case 10: 
            { return EQ;
            }
          case 165: break;
          case 11: 
            { return MOD;
            }
          case 166: break;
          case 12: 
            { return AMP;
            }
          case 167: break;
          case 13: 
            { return LPAREN;
            }
          case 168: break;
          case 14: 
            { return RPAREN;
            }
          case 169: break;
          case 15: 
            { return COMMA;
            }
          case 170: break;
          case 16: 
            { return SEMICOLON;
            }
          case 171: break;
          case 17: 
            { return LT;
            }
          case 172: break;
          case 18: 
            { return GT;
            }
          case 173: break;
          case 19: 
            { return BAR;
            }
          case 174: break;
          case 20: 
            { return TILDE;
            }
          case 175: break;
          case 21: 
            { return LINE_COMMENT;
            }
          case 176: break;
          case 22: 
            { return STRING_LITERAL;
            }
          case 177: break;
          case 23: 
            { return PARAMETER_NAME;
            }
          case 178: break;
          case 24: 
            { return COMMENT;
            }
          case 179: break;
          case 25: 
            { return NOT_EQ;
            }
          case 180: break;
          case 26: 
            { return EQEQ;
            }
          case 181: break;
          case 27: 
            { return LTE;
            }
          case 182: break;
          case 28: 
            { return SHL;
            }
          case 183: break;
          case 29: 
            { return UNEQ;
            }
          case 184: break;
          case 30: 
            { return GTE;
            }
          case 185: break;
          case 31: 
            { return SHR;
            }
          case 186: break;
          case 32: 
            { return AS;
            }
          case 187: break;
          case 33: 
            { return BY;
            }
          case 188: break;
          case 34: 
            { return OF;
            }
          case 189: break;
          case 35: 
            { return OR;
            }
          case 190: break;
          case 36: 
            { return ON;
            }
          case 191: break;
          case 37: 
            { return TO;
            }
          case 192: break;
          case 38: 
            { return IF;
            }
          case 193: break;
          case 39: 
            { return IN;
            }
          case 194: break;
          case 40: 
            { return IS;
            }
          case 195: break;
          case 41: 
            { return NO;
            }
          case 196: break;
          case 42: 
            { return CONCAT;
            }
          case 197: break;
          case 43: 
            { return END;
            }
          case 198: break;
          case 44: 
            { return FOR;
            }
          case 199: break;
          case 45: 
            { return AND;
            }
          case 200: break;
          case 46: 
            { return ADD;
            }
          case 201: break;
          case 47: 
            { return ALL;
            }
          case 202: break;
          case 48: 
            { return ASC;
            }
          case 203: break;
          case 49: 
            { return ROW;
            }
          case 204: break;
          case 50: 
            { return NOT;
            }
          case 205: break;
          case 51: 
            { return SET;
            }
          case 206: break;
          case 52: 
            { return KEY;
            }
          case 207: break;
          case 53: 
            { return EACH;
            }
          case 208: break;
          case 54: 
            { return ELSE;
            }
          case 209: break;
          case 55: 
            { return FAIL;
            }
          case 210: break;
          case 56: 
            { return FROM;
            }
          case 211: break;
          case 57: 
            { return TEMP;
            }
          case 212: break;
          case 58: 
            { return THEN;
            }
          case 213: break;
          case 59: 
            { return CASE;
            }
          case 214: break;
          case 60: 
            { return CAST;
            }
          case 215: break;
          case 61: 
            { return INTO;
            }
          case 216: break;
          case 62: 
            { return NULL;
            }
          case 217: break;
          case 63: 
            { return DESC;
            }
          case 218: break;
          case 64: 
            { return DROP;
            }
          case 219: break;
          case 65: 
            { return LEFT;
            }
          case 220: break;
          case 66: 
            { return LIKE;
            }
          case 221: break;
          case 67: 
            { return GLOB;
            }
          case 222: break;
          case 68: 
            { return WITH;
            }
          case 223: break;
          case 69: 
            { return WHEN;
            }
          case 224: break;
          case 70: 
            { return PLAN;
            }
          case 225: break;
          case 71: 
            { return VIEW;
            }
          case 226: break;
          case 72: 
            { return JOIN;
            }
          case 227: break;
          case 73: 
            { return AFTER;
            }
          case 228: break;
          case 74: 
            { return ABORT;
            }
          case 229: break;
          case 75: 
            { return ALTER;
            }
          case 230: break;
          case 76: 
            { return BEGIN;
            }
          case 231: break;
          case 77: 
            { return ORDER;
            }
          case 232: break;
          case 78: 
            { return OUTER;
            }
          case 233: break;
          case 79: 
            { return RAISE;
            }
          case 234: break;
          case 80: 
            { return ROWID;
            }
          case 235: break;
          case 81: 
            { return TABLE;
            }
          case 236: break;
          case 82: 
            { return CROSS;
            }
          case 237: break;
          case 83: 
            { return CHECK;
            }
          case 238: break;
          case 84: 
            { return INNER;
            }
          case 239: break;
          case 85: 
            { return INDEX;
            }
          case 240: break;
          case 86: 
            { return LIMIT;
            }
          case 241: break;
          case 87: 
            { return UNION;
            }
          case 242: break;
          case 88: 
            { return USING;
            }
          case 243: break;
          case 89: 
            { return MATCH;
            }
          case 244: break;
          case 90: 
            { return GROUP;
            }
          case 245: break;
          case 91: 
            { return WHERE;
            }
          case 246: break;
          case 92: 
            { return QUERY;
            }
          case 247: break;
          case 93: 
            { return EXCEPT;
            }
          case 248: break;
          case 94: 
            { return EXISTS;
            }
          case 249: break;
          case 95: 
            { return ESCAPE;
            }
          case 250: break;
          case 96: 
            { return ATTACH;
            }
          case 251: break;
          case 97: 
            { return ACTION;
            }
          case 252: break;
          case 98: 
            { return BEFORE;
            }
          case 253: break;
          case 99: 
            { return OFFSET;
            }
          case 254: break;
          case 100: 
            { return RENAME;
            }
          case 255: break;
          case 101: 
            { return REGEXP;
            }
          case 256: break;
          case 102: 
            { return COLUMN;
            }
          case 257: break;
          case 103: 
            { return COMMIT;
            }
          case 258: break;
          case 104: 
            { return CREATE;
            }
          case 259: break;
          case 105: 
            { return INSERT;
            }
          case 260: break;
          case 106: 
            { return ISNULL;
            }
          case 261: break;
          case 107: 
            { return IGNORE;
            }
          case 262: break;
          case 108: 
            { return DETACH;
            }
          case 263: break;
          case 109: 
            { return DELETE;
            }
          case 264: break;
          case 110: 
            { return SELECT;
            }
          case 265: break;
          case 111: 
            { return HAVING;
            }
          case 266: break;
          case 112: 
            { return UNIQUE;
            }
          case 267: break;
          case 113: 
            { return UPDATE;
            }
          case 268: break;
          case 114: 
            { return PRAGMA;
            }
          case 269: break;
          case 115: 
            { return VACUUM;
            }
          case 270: break;
          case 116: 
            { return VALUES;
            }
          case 271: break;
          case 117: 
            { return EXPLAIN;
            }
          case 272: break;
          case 118: 
            { return FOREIGN;
            }
          case 273: break;
          case 119: 
            { return ANALYZE;
            }
          case 274: break;
          case 120: 
            { return BETWEEN;
            }
          case 275: break;
          case 121: 
            { return REINDEX;
            }
          case 276: break;
          case 122: 
            { return RELEASE;
            }
          case 277: break;
          case 123: 
            { return REPLACE;
            }
          case 278: break;
          case 124: 
            { return TRIGGER;
            }
          case 279: break;
          case 125: 
            { return CASCADE;
            }
          case 280: break;
          case 126: 
            { return COLLATE;
            }
          case 281: break;
          case 127: 
            { return INDEXED;
            }
          case 282: break;
          case 128: 
            { return INSTEAD;
            }
          case 283: break;
          case 129: 
            { return NATURAL;
            }
          case 284: break;
          case 130: 
            { return NOTNULL;
            }
          case 285: break;
          case 131: 
            { return DEFAULT;
            }
          case 286: break;
          case 132: 
            { return WITHOUT;
            }
          case 287: break;
          case 133: 
            { return PRIMARY;
            }
          case 288: break;
          case 134: 
            { return VIRTUAL;
            }
          case 289: break;
          case 135: 
            { return RESTRICT;
            }
          case 290: break;
          case 136: 
            { return ROLLBACK;
            }
          case 291: break;
          case 137: 
            { return CONFLICT;
            }
          case 292: break;
          case 138: 
            { return DEFERRED;
            }
          case 293: break;
          case 139: 
            { return DATABASE;
            }
          case 294: break;
          case 140: 
            { return DISTINCT;
            }
          case 295: break;
          case 141: 
            { return EXCLUSIVE;
            }
          case 296: break;
          case 142: 
            { return RECURSIVE;
            }
          case 297: break;
          case 143: 
            { return TEMPORARY;
            }
          case 298: break;
          case 144: 
            { return INTERSECT;
            }
          case 299: break;
          case 145: 
            { return INITIALLY;
            }
          case 300: break;
          case 146: 
            { return IMMEDIATE;
            }
          case 301: break;
          case 147: 
            { return SAVEPOINT;
            }
          case 302: break;
          case 148: 
            { return REFERENCES;
            }
          case 303: break;
          case 149: 
            { return CONSTRAINT;
            }
          case 304: break;
          case 150: 
            { return DEFERRABLE;
            }
          case 305: break;
          case 151: 
            { return TRANSACTION;
            }
          case 306: break;
          case 152: 
            { return CURRENT_TIME;
            }
          case 307: break;
          case 153: 
            { return CURRENT_DATE;
            }
          case 308: break;
          case 154: 
            { return AUTOINCREMENT;
            }
          case 309: break;
          case 155: 
            { return CURRENT_TIMESTAMP;
            }
          case 310: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
