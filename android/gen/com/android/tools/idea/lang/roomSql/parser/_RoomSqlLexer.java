/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.tools.idea.lang.roomSql.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.android.tools.idea.lang.roomSql.psi.RoomPsiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_RoomSqlLexer.flex</tt>
 */
public class _RoomSqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13952 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\3"+
    "\13\1\15\3\13\1\16\24\13\1\17\1\20\1\21\10\1\1\22\1\23\1\13\1\24\4\13\1\25"+
    "\10\13\1\26\12\13\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13"+
    "\1\32\1\1\1\34\1\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1"+
    "\43\1\44\1\13\1\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52"+
    "\2\13\1\53\1\1\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\20\1\64"+
    "\1\57\1\60\1\65\1\1\1\66\1\67\1\70\1\71\1\24\1\60\1\72\1\1\1\73\1\55\1\74"+
    "\1\75\1\57\1\60\1\72\1\1\1\63\1\55\1\43\1\76\1\77\1\100\1\101\1\1\1\73\1\67"+
    "\1\1\1\102\1\40\1\60\1\53\1\1\1\103\1\55\1\1\1\102\1\40\1\60\1\104\1\1\1\62"+
    "\1\55\1\105\1\102\1\40\1\13\1\106\1\62\1\107\1\55\1\110\1\111\1\112\1\13\1"+
    "\113\1\114\1\1\1\67\1\1\1\27\2\13\1\115\1\114\1\116\2\1\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\2\1\1\73\1\1\1\116\1\1\1\125\1\13\1\126\1\1\1\127\7\1\2"+
    "\13\1\32\1\107\1\116\1\130\1\131\1\132\1\133\1\116\2\13\1\134\2\13\1\135\24"+
    "\13\1\136\1\137\2\13\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\32\2\1"+
    "\1\13\1\1\5\13\1\142\1\27\45\13\1\143\1\13\1\144\1\32\4\13\1\32\1\145\1\146"+
    "\1\20\1\13\1\20\1\13\1\20\1\146\1\73\3\13\1\147\1\1\1\150\1\116\2\1\1\116"+
    "\5\13\1\31\2\13\1\151\4\13\1\42\1\13\1\152\2\1\1\67\1\13\1\153\1\51\2\13\1"+
    "\154\1\13\1\101\1\116\2\1\1\13\1\114\3\13\1\51\2\1\2\116\1\155\5\1\1\111\2"+
    "\13\1\147\1\156\1\116\2\1\1\157\1\13\1\160\1\44\2\13\1\42\1\1\2\13\1\147\1"+
    "\1\1\161\1\44\1\13\1\153\6\1\1\162\1\163\14\13\4\1\21\13\1\142\2\13\1\142"+
    "\1\164\1\13\1\153\3\13\1\165\1\166\1\167\1\126\1\166\1\170\1\1\1\171\2\1\1"+
    "\172\1\1\1\173\1\1\1\126\6\1\1\174\1\175\1\176\1\177\1\200\3\1\1\201\147\1"+
    "\2\13\1\152\2\13\1\152\10\13\1\202\1\203\2\13\1\134\3\13\1\204\1\1\1\13\1"+
    "\114\4\205\4\1\1\107\35\1\1\206\2\1\1\207\1\27\4\13\1\210\1\27\4\13\1\135"+
    "\1\111\1\13\1\153\1\27\4\13\1\152\1\1\1\13\1\32\3\1\1\13\40\1\133\13\1\42"+
    "\4\1\135\13\1\42\2\1\10\13\1\126\4\1\2\13\1\153\20\13\1\126\1\13\1\211\1\1"+
    "\2\13\1\152\1\107\1\13\1\153\4\13\1\42\2\1\1\212\1\213\5\13\1\214\1\13\1\153"+
    "\1\31\3\1\1\212\1\215\1\13\1\33\1\1\3\13\1\147\1\213\2\13\1\147\1\1\1\116"+
    "\1\1\1\216\1\44\1\13\1\42\1\13\1\114\1\1\1\13\1\126\1\52\2\13\1\33\1\107\1"+
    "\116\1\217\1\220\2\13\1\50\1\1\1\221\1\116\1\13\1\222\3\13\1\223\1\224\1\225"+
    "\1\32\1\70\1\226\1\227\1\205\2\13\1\135\1\42\7\13\1\33\1\116\72\13\1\147\1"+
    "\13\1\230\2\13\1\154\20\1\26\13\1\153\6\13\1\101\2\1\1\114\1\231\1\60\1\232"+
    "\1\233\6\13\1\20\1\1\1\157\25\13\1\153\1\1\4\13\1\213\2\13\1\31\2\1\1\154"+
    "\7\1\1\217\7\13\1\126\1\1\1\116\1\27\1\32\1\27\1\32\1\234\4\13\1\152\1\235"+
    "\1\236\2\1\1\237\1\13\1\14\1\240\2\153\2\1\7\13\1\32\30\1\1\13\1\126\3\13"+
    "\1\73\2\1\2\13\1\1\1\13\1\241\2\13\1\42\1\13\1\153\2\13\1\242\3\1\11\13\1"+
    "\153\1\116\5\1\2\13\1\31\3\13\1\147\11\1\23\13\1\114\1\13\1\42\1\31\11\1\1"+
    "\243\2\13\1\244\1\13\1\42\1\13\1\114\1\13\1\152\4\1\1\13\1\245\1\13\1\42\1"+
    "\13\1\101\4\1\3\13\1\246\4\1\1\73\1\247\1\13\1\147\2\1\1\13\1\126\1\13\1\126"+
    "\2\1\1\125\1\13\1\51\1\1\3\13\1\42\1\13\1\42\1\13\1\33\1\13\1\20\6\1\4\13"+
    "\1\50\3\1\3\13\1\33\3\13\1\33\60\1\1\157\2\13\1\31\2\1\1\67\1\1\1\157\2\13"+
    "\2\1\1\13\1\50\1\116\1\157\1\13\1\114\1\67\1\1\2\13\1\250\1\157\2\13\1\33"+
    "\1\251\1\252\2\1\1\13\1\24\1\154\5\1\1\253\1\254\1\50\2\13\1\152\1\1\1\116"+
    "\1\75\1\57\1\60\1\72\1\1\1\255\1\20\21\1\3\13\1\1\1\256\1\116\12\1\2\13\1"+
    "\152\2\1\1\257\2\1\3\13\1\1\1\260\1\116\2\1\2\13\1\32\1\1\1\116\3\1\1\13\1"+
    "\101\1\1\1\116\26\1\4\13\1\116\1\107\34\1\3\13\1\50\20\1\71\13\1\101\16\1"+
    "\14\13\1\147\53\1\2\13\1\152\75\1\44\13\1\114\33\1\43\13\1\50\1\13\1\152\1"+
    "\116\6\1\1\13\1\153\1\1\3\13\1\1\1\147\1\116\1\157\1\261\1\13\67\1\4\13\1"+
    "\51\1\73\3\1\1\157\6\1\1\20\77\1\6\13\1\32\1\126\1\50\1\101\66\1\5\13\1\217"+
    "\3\13\1\146\1\262\1\263\1\264\3\13\1\265\1\266\1\13\1\267\1\270\1\40\24\13"+
    "\1\271\1\13\1\40\1\135\1\13\1\135\1\13\1\217\1\13\1\217\1\152\1\13\1\152\1"+
    "\13\1\60\1\13\1\60\1\13\1\272\3\273\14\13\1\51\123\1\1\264\1\13\1\274\1\275"+
    "\1\276\1\277\1\300\1\301\1\302\1\154\1\303\1\154\24\1\55\13\1\114\2\1\103"+
    "\13\1\51\15\13\1\153\150\13\1\20\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\3\1\0\1\16\4\0\1\15\2\0\1\23\1\7\1\0\1\10\1\5"+
    "\1\22\1\11\11\4\1\21\6\0\1\25\1\27\1\34\1\40\1\6\1\41\1\51\1\46\1\35\1\57"+
    "\1\53\1\42\1\50\1\36\1\30\1\55\1\60\1\31\1\45\1\32\1\47\1\56\1\52\1\12\1\43"+
    "\1\44\4\0\1\54\1\0\1\24\1\26\1\33\1\37\1\14\1\13\1\51\1\46\1\35\1\57\1\53"+
    "\1\42\1\50\1\36\1\30\1\55\1\60\1\31\1\45\1\32\1\47\1\56\1\52\1\12\1\43\1\44"+
    "\12\0\1\1\12\0\1\3\11\0\1\17\12\0\1\17\4\0\1\17\5\0\27\17\1\0\10\17\2\35\35"+
    "\17\1\45\2\17\4\0\14\17\16\0\5\17\7\0\1\17\1\0\1\17\1\0\5\17\1\0\2\17\2\0"+
    "\4\17\1\0\1\17\6\0\1\17\1\0\3\17\1\0\1\17\1\0\4\17\1\0\23\17\1\0\13\17\10"+
    "\0\6\17\1\0\26\17\2\0\1\17\6\0\10\17\10\0\13\17\5\0\3\17\15\0\12\20\4\0\6"+
    "\17\1\0\1\17\17\0\2\17\7\0\2\17\12\20\3\17\2\0\2\17\1\0\16\17\15\0\11\17\13"+
    "\0\1\17\16\0\12\20\6\17\4\0\2\17\4\0\1\17\5\0\6\17\4\0\1\17\11\0\1\17\3\0"+
    "\1\17\7\0\11\17\7\0\5\17\17\0\26\17\3\0\1\17\2\0\1\17\7\0\12\17\4\0\12\20"+
    "\1\17\4\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0\1\17\3\0\4\17\3\0\1\17\20"+
    "\0\1\17\15\0\2\17\1\0\1\17\5\0\6\17\4\0\2\17\1\0\2\17\1\0\2\17\1\0\2\17\17"+
    "\0\4\17\1\0\1\17\7\0\12\20\2\0\3\17\20\0\11\17\1\0\2\17\1\0\2\17\1\0\5\17"+
    "\3\0\1\17\2\0\1\17\30\0\1\17\13\0\10\17\2\0\1\17\3\0\1\17\1\0\6\17\3\0\3\17"+
    "\1\0\4\17\3\0\2\17\1\0\1\17\1\0\2\17\3\0\2\17\3\0\3\17\3\0\14\17\13\0\10\17"+
    "\1\0\2\17\10\0\3\17\5\0\4\17\1\0\5\17\3\0\1\17\3\0\2\17\15\0\13\17\2\0\1\17"+
    "\21\0\1\17\12\0\6\17\5\0\22\17\3\0\10\17\1\0\11\17\1\0\1\17\2\0\7\17\11\0"+
    "\1\17\1\0\2\17\14\0\12\20\7\0\2\17\1\0\1\17\2\0\2\17\1\0\1\17\2\0\1\17\6\0"+
    "\4\17\1\0\7\17\1\0\3\17\1\0\1\17\1\0\1\17\2\0\2\17\1\0\4\17\1\0\2\17\11\0"+
    "\1\17\2\0\5\17\1\0\1\17\11\0\12\20\2\0\14\17\1\0\24\17\13\0\5\17\3\0\6\17"+
    "\4\0\4\17\3\0\1\17\3\0\2\17\7\0\3\17\4\0\15\17\14\0\1\17\1\0\6\17\1\0\1\17"+
    "\5\0\1\17\2\0\13\17\1\0\15\17\1\0\4\17\2\0\7\17\1\0\1\17\1\0\4\17\2\0\1\17"+
    "\1\0\4\17\2\0\7\17\1\0\1\17\1\0\4\17\2\0\16\17\2\0\6\17\2\0\15\17\2\0\1\17"+
    "\1\3\17\17\1\0\10\17\7\0\15\17\1\0\6\17\23\0\1\17\4\0\1\17\3\0\11\17\1\0\1"+
    "\17\5\0\17\17\1\0\16\17\2\0\14\17\13\0\1\17\15\0\7\17\7\0\16\17\15\0\2\17"+
    "\12\20\3\0\3\17\11\0\4\17\1\0\4\17\3\0\2\17\11\0\10\17\1\0\1\17\1\0\1\17\1"+
    "\0\1\17\1\0\6\17\1\0\7\17\1\0\1\17\3\0\3\17\1\0\7\17\3\0\4\17\2\0\6\17\4\0"+
    "\13\3\15\0\2\1\5\0\1\3\17\0\1\3\1\0\1\17\15\0\1\17\2\0\1\17\4\0\1\17\2\0\12"+
    "\17\1\0\1\17\3\0\5\17\6\0\1\17\1\0\1\17\1\0\1\17\1\0\1\53\3\17\1\0\13\17\2"+
    "\0\4\17\5\0\5\17\4\0\1\17\4\0\2\17\13\0\5\17\6\0\4\17\3\0\2\17\14\0\10\17"+
    "\7\0\10\17\1\0\7\17\1\0\1\3\4\0\2\17\12\0\5\17\5\0\2\17\3\0\7\17\6\0\3\17"+
    "\12\20\2\17\13\0\11\17\2\0\27\17\2\0\7\17\1\0\3\17\1\0\4\17\1\0\4\17\2\0\6"+
    "\17\3\0\1\17\1\0\1\17\2\0\5\17\1\0\12\17\12\20\5\17\1\0\3\17\1\0\10\17\4\0"+
    "\7\17\3\0\1\17\3\0\2\17\1\0\1\17\3\0\2\17\2\0\5\17\2\0\1\17\1\0\1\17\30\0"+
    "\3\17\3\0\6\17\2\0\6\17\2\0\6\17\11\0\7\17\4\0\5\17\3\0\5\17\5\0\1\17\1\0"+
    "\10\17\1\0\5\17\1\0\1\17\1\0\2\17\1\0\2\17\1\0\12\17\6\0\12\17\2\0\6\17\2"+
    "\0\6\17\2\0\6\17\2\0\3\17\3\0\14\17\1\0\16\17\1\0\2\17\1\0\2\17\1\0\10\17"+
    "\6\0\4\17\4\0\16\17\2\0\1\17\1\0\14\17\1\0\2\17\3\0\1\17\2\0\4\17\1\0\2\17"+
    "\12\0\10\17\6\0\6\17\1\0\3\17\1\0\12\17\3\0\1\17\12\0\4\17\13\0\12\20\1\17"+
    "\1\0\1\17\3\0\7\17\1\0\1\17\1\0\4\17\1\0\17\17\1\0\2\17\14\0\3\17\4\0\2\17"+
    "\1\0\1\17\20\0\4\17\10\0\1\17\13\0\10\17\5\0\3\17\2\0\1\17\2\0\2\17\2\0\4"+
    "\17\1\0\14\17\1\0\1\17\1\0\7\17\1\0\21\17\1\0\4\17\2\0\10\17\1\0\7\17\1\0"+
    "\14\17\1\0\4\17\1\0\5\17\1\0\1\17\3\0\14\17\2\0\13\17\1\0\10\17\2\0\22\20"+
    "\1\0\2\17\1\0\1\17\2\0\1\17\1\0\12\17\1\0\4\17\1\0\1\17\1\0\1\17\6\0\1\17"+
    "\4\0\1\17\1\0\1\17\1\0\1\17\1\0\3\17\1\0\2\17\1\0\1\17\2\0\1\17\1\0\1\17\1"+
    "\0\1\17\1\0\1\17\1\0\1\17\1\0\2\17\1\0\1\17\2\0\4\17\1\0\7\17\1\0\4\17\1\0"+
    "\4\17\1\0\1\17\1\0\12\17\1\0\5\17\1\0\3\17\1\0\5\17\1\0\5\17");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\3"+
    "\2\4\2\1\1\4\2\1\25\4\1\3\1\0\5\4"+
    "\1\5\3\0\3\4\2\6\1\7\1\0\7\4\1\10"+
    "\2\4\1\11\1\12\1\13\1\14\6\4\1\15\7\4"+
    "\1\16\1\17\1\20\3\4\1\21\31\4\1\3\1\0"+
    "\4\4\1\22\2\4\1\3\1\4\1\23\1\4\1\0"+
    "\5\4\1\24\1\25\1\4\1\26\1\27\21\4\1\30"+
    "\26\4\1\31\13\4\1\32\13\4\1\33\15\4\1\34"+
    "\1\35\1\4\1\36\1\4\1\37\1\40\30\4\1\41"+
    "\3\4\1\42\1\43\1\44\13\4\1\45\12\4\1\46"+
    "\4\4\1\47\1\4\1\50\1\4\1\51\1\4\1\52"+
    "\11\4\1\53\1\54\1\4\1\55\2\4\1\56\2\4"+
    "\1\57\1\4\1\60\7\4\1\61\1\62\3\4\1\63"+
    "\3\4\1\64\1\4\1\65\1\66\10\4\1\67\1\4"+
    "\1\70\1\4\1\71\11\4\1\72\1\73\3\4\1\74"+
    "\1\75\15\4\1\76\3\4\1\77\1\4\1\100\1\4"+
    "\1\101\1\102\1\4\1\103\5\4\1\104\1\105\1\4"+
    "\1\106\1\4\1\107\1\4\1\110\1\111\2\4\1\112"+
    "\1\4\1\113\3\4\1\114\2\4\1\115\11\4\1\116"+
    "\1\117\1\120\4\4\1\121\1\4\1\122\1\4\1\123"+
    "\4\4\1\124\1\125\2\4\1\126\1\4\1\127\1\130"+
    "\1\131\1\4\1\132\1\4\1\133\1\134\2\4\1\135"+
    "\1\136\1\137\1\4\1\140\2\4\1\141\1\142\1\4"+
    "\1\143\3\4\1\144\1\145\2\4\1\146\3\4\1\147"+
    "\1\150\1\4\1\151\1\152\2\4\1\153\3\4\1\154"+
    "\1\155\1\156\4\4\1\157\1\160\2\4\1\161\1\4"+
    "\1\0\3\4\1\162\1\4\1\163\1\164\1\4\1\165"+
    "\2\4\1\166\1\167\2\4\2\0\1\170\1\171\1\172"+
    "\1\4\1\173\1\4\1\174\1\4\1\175\2\0\1\176"+
    "\1\4\1\177\2\0\1\4\1\200\1\201\1\202\4\0"+
    "\1\203";

  private static int [] zzUnpackAction() {
    int [] result = new int[539];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u01ea\0\u021b\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad"+
    "\0\u024c\0\u0bde\0\u0c0f\0\u024c\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3"+
    "\0\u0d04\0\u0d35\0\u024c\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u024c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\u14ac\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570"+
    "\0\u024c\0\u15a1\0\u15d2\0\u086c\0\u1603\0\u1634\0\u1665\0\u1696"+
    "\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u024c\0\u024c\0\u17bc"+
    "\0\u024c\0\u024c\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2"+
    "\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a"+
    "\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2"+
    "\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a"+
    "\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02"+
    "\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a"+
    "\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u024c\0\u21e1"+
    "\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369"+
    "\0\u239a\0\u23cb\0\u024c\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0"+
    "\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648"+
    "\0\u024c\0\u024c\0\u2679\0\u024c\0\u26aa\0\u024c\0\u09c3\0\u26db"+
    "\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863"+
    "\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb"+
    "\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73"+
    "\0\u2ba4\0\u2bd5\0\u2c06\0\u024c\0\u024c\0\u024c\0\u2c37\0\u2c68"+
    "\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0"+
    "\0\u2e21\0\u024c\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47"+
    "\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u024c\0\u303c\0\u306d\0\u309e"+
    "\0\u30cf\0\u024c\0\u3100\0\u024c\0\u3131\0\u024c\0\u3162\0\u024c"+
    "\0\u3193\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288\0\u32b9\0\u32ea"+
    "\0\u331b\0\u024c\0\u334c\0\u337d\0\u024c\0\u33ae\0\u33df\0\u024c"+
    "\0\u3410\0\u3441\0\u024c\0\u3472\0\u024c\0\u34a3\0\u34d4\0\u3505"+
    "\0\u3536\0\u3567\0\u3598\0\u35c9\0\u024c\0\u024c\0\u35fa\0\u362b"+
    "\0\u365c\0\u024c\0\u368d\0\u36be\0\u36ef\0\u024c\0\u3720\0\u024c"+
    "\0\u024c\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u3846\0\u3877"+
    "\0\u38a8\0\u024c\0\u38d9\0\u024c\0\u390a\0\u024c\0\u393b\0\u396c"+
    "\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u024c"+
    "\0\u024c\0\u3af4\0\u3b25\0\u3b56\0\u024c\0\u3b87\0\u3bb8\0\u3be9"+
    "\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u3d40\0\u3d71"+
    "\0\u3da2\0\u3dd3\0\u3e04\0\u024c\0\u3e35\0\u3e66\0\u3e97\0\u024c"+
    "\0\u3ec8\0\u024c\0\u3ef9\0\u024c\0\u024c\0\u3f2a\0\u024c\0\u3f5b"+
    "\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u024c\0\u024c\0\u4050\0\u024c"+
    "\0\u4081\0\u024c\0\u40b2\0\u024c\0\u024c\0\u40e3\0\u4114\0\u024c"+
    "\0\u4145\0\u024c\0\u4176\0\u41a7\0\u41d8\0\u024c\0\u4209\0\u423a"+
    "\0\u024c\0\u426b\0\u429c\0\u42cd\0\u42fe\0\u432f\0\u4360\0\u4391"+
    "\0\u43c2\0\u43f3\0\u024c\0\u024c\0\u024c\0\u4424\0\u4455\0\u4486"+
    "\0\u44b7\0\u024c\0\u44e8\0\u024c\0\u4519\0\u024c\0\u454a\0\u457b"+
    "\0\u45ac\0\u45dd\0\u024c\0\u024c\0\u460e\0\u463f\0\u024c\0\u4670"+
    "\0\u024c\0\u024c\0\u024c\0\u46a1\0\u024c\0\u46d2\0\u024c\0\u024c"+
    "\0\u4703\0\u4734\0\u024c\0\u024c\0\u024c\0\u4765\0\u024c\0\u4796"+
    "\0\u47c7\0\u024c\0\u024c\0\u47f8\0\u024c\0\u4829\0\u485a\0\u488b"+
    "\0\u024c\0\u024c\0\u48bc\0\u48ed\0\u024c\0\u491e\0\u494f\0\u4980"+
    "\0\u024c\0\u024c\0\u49b1\0\u024c\0\u024c\0\u49e2\0\u4a13\0\u024c"+
    "\0\u4a44\0\u4a75\0\u4aa6\0\u024c\0\u024c\0\u024c\0\u4ad7\0\u4b08"+
    "\0\u4b39\0\u4b6a\0\u024c\0\u024c\0\u4b9b\0\u4bcc\0\u024c\0\u4bfd"+
    "\0\u4c2e\0\u4c5f\0\u4c90\0\u4cc1\0\u024c\0\u4cf2\0\u024c\0\u024c"+
    "\0\u4d23\0\u024c\0\u4d54\0\u4d85\0\u024c\0\u024c\0\u4db6\0\u4de7"+
    "\0\u4e18\0\u4e49\0\u024c\0\u024c\0\u024c\0\u4e7a\0\u024c\0\u4eab"+
    "\0\u024c\0\u4edc\0\u024c\0\u4f0d\0\u4f3e\0\u024c\0\u4f6f\0\u024c"+
    "\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\61\0\u024c\0\u5064\0\u5095"+
    "\0\u50c6\0\u50f7\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[539];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\6\1\13\1\14\1\15\1\2\1\16"+
    "\1\17\1\2\2\20\2\21\1\22\1\23\1\24\2\25"+
    "\1\26\1\27\2\30\1\12\1\31\2\15\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\2\1\41\1\42"+
    "\1\43\1\44\62\0\3\3\61\0\1\4\1\45\1\46"+
    "\2\0\1\4\2\0\1\46\50\0\1\45\4\0\1\45"+
    "\53\0\1\15\1\0\1\15\2\0\1\15\1\47\2\15"+
    "\2\0\2\15\3\0\2\50\10\15\1\51\3\15\1\52"+
    "\2\15\1\53\6\15\1\0\4\15\10\0\1\54\54\0"+
    "\1\4\1\45\1\46\2\0\1\4\1\55\1\0\1\46"+
    "\50\0\1\15\1\0\1\15\2\0\4\15\1\56\1\57"+
    "\2\15\3\0\30\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\2\60\2\15"+
    "\1\61\1\62\22\15\1\0\4\15\15\56\1\63\43\56"+
    "\16\57\1\64\42\57\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\30\15\1\0\4\15\6\0"+
    "\1\65\3\0\3\65\2\0\1\65\4\0\30\65\1\0"+
    "\4\65\23\0\1\66\41\0\1\15\1\0\1\15\2\0"+
    "\2\15\1\67\1\15\2\0\2\15\3\0\2\15\2\70"+
    "\2\15\1\71\2\72\1\15\1\73\2\74\1\67\1\75"+
    "\2\15\1\76\1\15\1\77\4\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\100\2\0\3\15\1\100\2\0\2\15"+
    "\3\0\17\15\1\101\10\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\2\15\1\102\1\15\2\0\2\15"+
    "\3\0\5\15\1\103\4\15\1\104\2\15\1\102\5\15"+
    "\1\105\4\15\1\0\4\15\4\0\1\15\1\0\1\106"+
    "\2\0\3\15\1\106\2\0\2\15\3\0\2\107\2\15"+
    "\1\110\23\15\1\0\4\15\4\0\1\15\1\0\1\111"+
    "\2\0\3\15\1\111\2\0\2\15\3\0\2\112\2\15"+
    "\1\113\1\114\14\15\1\115\5\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\2\116\2\15\1\117\1\120\14\15\1\121\1\122\4\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\2\15"+
    "\1\123\1\15\2\0\2\15\3\0\12\15\1\124\2\15"+
    "\1\123\3\15\1\125\2\15\1\126\1\127\2\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\2\130\2\15\1\131\16\15\1\132\4\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\133\2\0\3\15"+
    "\1\133\2\0\2\15\3\0\2\134\3\15\1\135\3\15"+
    "\1\136\16\15\1\0\4\15\4\0\1\15\1\0\1\137"+
    "\2\0\3\15\1\137\2\0\2\15\3\0\11\15\1\140"+
    "\16\15\1\0\4\15\4\0\1\15\1\0\1\141\2\0"+
    "\3\15\1\141\2\0\2\15\3\0\2\142\26\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\2\143\26\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\12\15"+
    "\1\144\6\15\1\145\6\15\1\0\1\146\3\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\2\147\26\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\5\15\1\150\10\15"+
    "\1\151\11\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\11\15\1\152\10\15"+
    "\1\153\5\15\1\0\4\15\4\0\1\15\1\0\1\154"+
    "\2\0\3\15\1\154\2\0\2\15\3\0\30\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\5\15\1\155\10\15\1\156\11\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\2\157\7\15\1\160\16\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\4\15\1\161\23\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\23\15"+
    "\1\162\4\15\1\0\4\15\4\0\1\45\1\0\1\46"+
    "\2\0\1\45\2\0\1\46\50\0\1\163\2\0\2\164"+
    "\1\163\53\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\7\15\2\165\1\166\16\15\1\0\1\167"+
    "\3\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\7\15\2\170\17\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\13\15\2\171\13\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\21\15\1\172"+
    "\6\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\7\15\2\173\17\15\1\0"+
    "\4\15\2\54\1\0\56\54\4\0\1\174\4\0\1\174"+
    "\1\0\2\174\7\0\1\174\1\0\1\174\4\0\1\174"+
    "\3\0\1\174\25\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\11\15\1\175\16\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\5\15\1\176\22\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\4\15"+
    "\1\177\23\15\1\0\4\15\15\0\1\56\61\0\1\57"+
    "\46\0\1\65\1\0\1\65\2\0\4\65\2\0\2\65"+
    "\3\0\30\65\1\0\4\65\1\66\2\0\20\66\1\200"+
    "\35\66\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\6\15\1\201\21\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\4\15\1\202\23\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\6\15\1\203"+
    "\21\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\6\15\1\204\21\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\2\205\11\15\2\206\13\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\13\15\2\207\13\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\6\15"+
    "\1\210\7\15\1\211\11\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\7\15"+
    "\2\212\17\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\6\15\1\213\21\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\2\15"+
    "\1\214\1\15\2\0\2\15\3\0\6\15\1\215\6\15"+
    "\1\214\7\15\1\216\2\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\2\15\1\217\1\15\2\0\2\15"+
    "\3\0\15\15\1\217\12\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\13\15"+
    "\2\220\13\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\6\15\1\221\21\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\2\15"+
    "\1\222\1\15\2\0\2\15\3\0\7\15\2\223\1\224"+
    "\1\225\2\15\1\222\1\226\2\15\1\227\3\15\1\230"+
    "\2\15\1\0\1\231\3\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\11\15\1\232\16\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\16\15\1\233\7\15\1\234\1\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\24\15\1\235\3\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\2\15\2\236\24\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\2\237"+
    "\7\15\1\240\16\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\241\2\0\3\15\1\241\2\0\2\15\3\0\30\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\21\15\1\242\6\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\12\15\1\243\3\15\1\244\5\15\1\245\3\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\246\2\0\3\15"+
    "\1\246\2\0\2\15\3\0\4\15\1\247\23\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\250\2\0\3\15\1\250"+
    "\2\0\2\15\3\0\30\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\5\15"+
    "\1\251\22\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\6\15\1\252\2\15"+
    "\1\253\1\254\2\255\4\15\1\256\6\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\12\15\1\257\15\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\24\15"+
    "\1\260\3\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\12\15\1\261\15\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\6\15\1\262\21\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\6\15\1\263\21\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\16\15"+
    "\1\264\11\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\2\15\1\265\1\15\2\0\2\15\3\0\6\15"+
    "\1\266\6\15\1\265\1\267\2\15\1\270\6\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\6\15\1\271\21\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\4\15\1\272\23\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\21\15\1\273"+
    "\6\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\2\15\1\274\1\15\2\0\2\15\3\0\15\15\1\274"+
    "\12\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\24\15\1\275\2\15\1\276"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\6\15\1\277\7\15\1\300\11\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\30\15\1\0\1\15\1\301\2\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\30\15\1\0\1\15\1\302\2\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\11\15"+
    "\1\303\16\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\11\15\1\304\16\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\13\15\2\305\13\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\6\15\1\306\21\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\4\15"+
    "\1\307\23\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\4\15\1\310\23\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\6\15\1\311\21\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\312\2\0\3\15\1\312\2\0"+
    "\2\15\3\0\30\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\17\15\1\313"+
    "\10\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\2\314\7\15\1\315\16\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\2\316\26\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\7\15\2\317\5\15\1\320\11\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\321\2\0\3\15\1\321\2\0\2\15"+
    "\3\0\5\15\1\322\22\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\11\15"+
    "\1\323\16\15\1\0\4\15\4\0\1\15\1\0\1\324"+
    "\2\0\3\15\1\324\2\0\2\15\3\0\30\15\1\0"+
    "\4\15\4\0\1\163\4\0\1\163\53\0\1\15\1\0"+
    "\1\325\2\0\3\15\1\325\2\0\2\15\3\0\16\15"+
    "\1\326\11\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\21\15\1\327\6\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\16\15\1\330\11\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\22\15\1\331\5\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\332\2\0\3\15\1\332\2\0\2\15\3\0"+
    "\30\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\2\333\26\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\16\15\1\334\11\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\335\2\0\3\15\1\335\2\0\2\15\3\0"+
    "\30\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\24\15\1\336\3\15\1\0"+
    "\4\15\1\66\2\0\17\66\1\337\1\200\35\66\4\0"+
    "\1\15\1\0\1\340\2\0\3\15\1\340\2\0\2\15"+
    "\3\0\30\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\5\15\1\341\22\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\2\342\26\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\11\15\1\343\16\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\16\15\1\344"+
    "\11\15\1\0\4\15\4\0\1\15\1\0\1\345\2\0"+
    "\3\15\1\345\2\0\2\15\3\0\30\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\4\15\1\346\23\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\4\15"+
    "\1\347\23\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\26\15\1\350\1\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\11\15\1\351\16\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\21\15\1\352\6\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\353\2\0\3\15\1\353\2\0\2\15\3\0"+
    "\30\15\1\0\4\15\4\0\1\15\1\0\1\354\2\0"+
    "\3\15\1\354\2\0\2\15\3\0\30\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\355\2\0\3\15\1\355\2\0"+
    "\2\15\3\0\30\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\23\15\1\356"+
    "\4\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\12\15\1\357\15\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\2\360\26\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\361\2\0\3\15\1\361\2\0\2\15\3\0"+
    "\30\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\6\15\1\362\21\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\363\2\0\3\15\1\363"+
    "\2\0\2\15\3\0\30\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\16\15"+
    "\1\364\11\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\21\15\1\365\6\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\16\15\1\366\11\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\11\15\1\367\16\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\30\15"+
    "\1\0\1\370\3\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\16\15\1\371\11\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\12\15\1\372\15\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\25\15\1\373\2\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\12\15\1\374"+
    "\15\15\1\0\4\15\4\0\1\15\1\0\1\375\2\0"+
    "\3\15\1\375\2\0\2\15\3\0\6\15\1\376\2\377"+
    "\17\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\2\15\1\u0100\1\15\2\0\2\15\3\0\15\15\1\u0100"+
    "\3\15\1\u0101\6\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\16\15\1\u0102"+
    "\4\15\1\u0103\4\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\24\15\1\u0104"+
    "\3\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\2\u0105\26\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\21\15\1\u0106\6\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\7\15"+
    "\2\u0107\17\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\5\15\1\u0108\22\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\u0109\2\0\3\15"+
    "\1\u0109\2\0\2\15\3\0\4\15\1\u010a\23\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\6\15\1\u010b\21\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\u010c\2\0\3\15\1\u010c\2\0\2\15"+
    "\3\0\30\15\1\0\4\15\4\0\1\15\1\0\1\u010d"+
    "\2\0\3\15\1\u010d\2\0\2\15\3\0\30\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\u010e\2\0\3\15\1\u010e"+
    "\2\0\2\15\3\0\6\15\1\u010f\21\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\23\15\1\u0110\4\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\u0111\2\0\3\15\1\u0111\2\0\2\15\3\0"+
    "\30\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\4\15\1\u0112\23\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\23\15\1\u0113\4\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\12\15\1\u0114\15\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\16\15\1\u0115"+
    "\11\15\1\0\4\15\4\0\1\15\1\0\1\u0116\2\0"+
    "\3\15\1\u0116\2\0\2\15\3\0\2\u0117\26\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\2\u0118\26\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\u0119\2\0\3\15\1\u0119\2\0\2\15\3\0"+
    "\30\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\7\15\2\u011a\17\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\2\u011b\26\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\30\15"+
    "\1\0\1\u011c\3\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\6\15\1\u011d\21\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\6\15\1\u011e\21\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\11\15\1\u011f\16\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\u0120\2\0\3\15\1\u0120\2\0\2\15\3\0\30\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\u0121\2\0\3\15"+
    "\1\u0121\2\0\2\15\3\0\30\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\u0122\2\0\3\15\1\u0122\2\0\2\15"+
    "\3\0\30\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\11\15\1\u0123\16\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\4\15\1\u0124\23\15\1\0\3\15"+
    "\1\u0125\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\12\15\1\u0126\15\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\2\u0127\26\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\7\15\2\u0128\17\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\23\15\1\u0129\4\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\2\15\2\u012a\24\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\22\15"+
    "\1\u012b\5\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\5\15\1\u012c\4\15"+
    "\1\u012d\15\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\25\15\1\u012e\2\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\24\15\1\u012f\3\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\12\15\1\u0130\15\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\23\15"+
    "\1\u0131\4\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\23\15\1\u0132\4\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\26\15\1\u0133\1\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\6\15\1\u0134\21\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\12\15"+
    "\1\u0135\15\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\5\15\1\u0136\22\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\30\15\1\0\1\u0137\3\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\23\15\1\u0138\4\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\6\15\1\u0139"+
    "\21\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\2\u013a\26\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\30\15\1\0\1\u013b\3\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\11\15\1\u013c"+
    "\16\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\5\15\1\u013d\22\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\6\15\1\u013e\21\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\7\15\2\u013f\17\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\4\15\1\u0140"+
    "\23\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\17\15\1\u0141\10\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\5\15\1\u0142\22\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\11\15\1\u0143\16\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\5\15\1\u0144"+
    "\22\15\1\0\4\15\4\0\1\15\1\0\1\u0145\2\0"+
    "\3\15\1\u0145\2\0\2\15\3\0\30\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\12\15\1\u0146\15\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\u0147\2\0\3\15\1\u0147\2\0\2\15\3\0"+
    "\30\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\5\15\1\u0148\22\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\5\15\1\u0149\22\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\5\15\1\u014a\22\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\5\15\1\u014b"+
    "\22\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\13\15\2\u014c\13\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\24\15\1\u014d\3\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\2\u014e\26\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\5\15\1\u014f\22\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\1\15"+
    "\1\u0150\2\15\2\0\2\15\3\0\30\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\2\u0151\26\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\u0152\2\0\3\15\1\u0152\2\0\2\15\3\0\30\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\2\15\2\u0153\24\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\13\15\2\u0154\13\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\4\15"+
    "\1\u0155\23\15\1\0\4\15\4\0\1\15\1\0\1\u0156"+
    "\2\0\3\15\1\u0156\2\0\2\15\3\0\30\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\21\15\1\u0157\6\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\25\15\1\u0158\2\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\2\u0159\26\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\16\15\1\u015a\11\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\6\15\1\u015b\21\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\2\u015c"+
    "\26\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\24\15\1\u015d\3\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\11\15\1\u015e\16\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\6\15\1\u015f\21\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\21\15\1\u0160"+
    "\6\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\27\15\1\u0161\1\0\4\15"+
    "\4\0\1\15\1\0\1\u0162\2\0\3\15\1\u0162\2\0"+
    "\2\15\3\0\30\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\5\15\1\u0163"+
    "\22\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\11\15\1\u0164\16\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\5\15\1\u0165\22\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\1\15\1\u0166\2\15\2\0"+
    "\2\15\3\0\30\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\5\15\1\u0167"+
    "\22\15\1\0\4\15\4\0\1\15\1\0\1\u0168\2\0"+
    "\3\15\1\u0168\2\0\2\15\3\0\30\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\16\15\1\u0169\11\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\13\15"+
    "\2\u016a\13\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\5\15\1\u016b\22\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\5\15\1\u016c\22\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\23\15\1\u016d\4\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\5\15"+
    "\1\u016e\22\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\23\15\1\u016f\4\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\7\15\2\u0170\17\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\6\15\1\u0171\21\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\2\15"+
    "\2\u0172\24\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\11\15\1\u0173\16\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\6\15\1\u0174\21\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\7\15\2\u0175\17\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\30\15"+
    "\1\0\1\u0176\3\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\12\15\1\u0177\15\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\12\15\1\u0178\15\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\23\15\1\u0179\4\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\25\15\1\u017a"+
    "\2\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\6\15\1\u017b\21\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\22\15\1\u017c\5\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\30\15\1\0\1\u017d\3\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\4\15\1\u017e\23\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\u017f\2\0\3\15"+
    "\1\u017f\2\0\2\15\3\0\30\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\24\15\1\u0180\3\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\2\u0181\26\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\23\15\1\u0182\4\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\u0183\2\0\3\15\1\u0183\2\0"+
    "\2\15\3\0\30\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\23\15\1\u0184"+
    "\4\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\17\15\1\u0185\10\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\6\15\1\u0186\21\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\21\15\1\u0187\6\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\21\15\1\u0188"+
    "\6\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\11\15\1\u0189\16\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\u018a\2\0\3\15\1\u018a"+
    "\2\0\2\15\3\0\30\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\25\15"+
    "\1\u018b\2\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\22\15\1\u018c\5\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\12\15\1\u018d\15\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\20\15\1\u018e\7\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\12\15"+
    "\1\u018f\15\15\1\0\4\15\4\0\1\15\1\0\1\u0190"+
    "\2\0\3\15\1\u0190\2\0\2\15\3\0\30\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\u0191\2\0\3\15\1\u0191"+
    "\2\0\2\15\3\0\30\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\6\15"+
    "\1\u0192\21\15\1\0\4\15\4\0\1\15\1\0\1\u0193"+
    "\2\0\3\15\1\u0193\2\0\2\15\3\0\30\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\21\15\1\u0194\6\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\u0195\2\0\3\15\1\u0195\2\0\2\15"+
    "\3\0\30\15\1\0\4\15\4\0\1\15\1\0\1\u0196"+
    "\2\0\3\15\1\u0196\2\0\2\15\3\0\30\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\21\15\1\u0197\6\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\11\15\1\u0198\16\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\30\15\1\0"+
    "\1\u0199\3\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\7\15\2\u019a\17\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\2\u019b\26\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\5\15\1\u019c"+
    "\22\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\2\u019d\26\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\u019e\2\0\3\15\1\u019e\2\0"+
    "\2\15\3\0\30\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\13\15\2\u019f"+
    "\13\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\11\15\1\u01a0\16\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\5\15\1\u01a1\22\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\6\15\1\u01a2\21\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\12\15\1\u01a3"+
    "\15\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\6\15\1\u01a4\21\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\u01a5\2\0\3\15\1\u01a5"+
    "\2\0\2\15\3\0\30\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\12\15"+
    "\1\u01a6\15\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\21\15\1\u01a7\6\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\2\u01a8\26\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\u01a9\2\0\3\15\1\u01a9\2\0\2\15"+
    "\3\0\30\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\6\15\1\u01aa\21\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\2\u01ab\26\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\16\15\1\u01ac\11\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\11\15\1\u01ad"+
    "\16\15\1\0\4\15\4\0\1\15\1\0\1\u01ae\2\0"+
    "\3\15\1\u01ae\2\0\2\15\3\0\30\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\2\u01af\26\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\16\15\1\u01b0"+
    "\11\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\5\15\1\u01b1\22\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\16\15\1\u01b2\11\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\22\15\1\u01b3\5\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\u01b4\2\0\3\15\1\u01b4\2\0\2\15\3\0\30\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\2\u01b5\26\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\12\15\1\u01b6\15\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\6\15\1\u01b7"+
    "\21\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\4\15\1\u01b8\23\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\25\15\1\u01b9\2\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\u01ba\2\0\3\15\1\u01ba\2\0\2\15"+
    "\3\0\30\15\1\0\4\15\4\0\1\15\1\0\1\u01bb"+
    "\2\0\3\15\1\u01bb\2\0\2\15\3\0\30\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\23\15\1\u01bc\4\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\2\u01bd\26\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\5\15\1\u01be\22\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\24\15\1\u01bf\3\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\21\15\1\u01c0\6\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\2\u01c1"+
    "\26\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\11\15\1\u01c2\16\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\12\15\1\u01c3\15\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\12\15\1\u01c4\15\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\u01c5\2\0\3\15\1\u01c5\2\0\2\15\3\0\30\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\7\15\2\u01c6\17\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\12\15\1\u01c7\15\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\12\15"+
    "\1\u01c8\15\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\11\15\1\u01c9\16\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\1\15"+
    "\1\u01ca\2\15\2\0\2\15\3\0\30\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\u01cb\2\0\3\15\1\u01cb\2\0"+
    "\2\15\3\0\30\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\7\15\2\u01cc"+
    "\17\15\1\0\4\15\4\0\1\15\1\0\1\u01cd\2\0"+
    "\3\15\1\u01cd\2\0\2\15\3\0\30\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\7\15\2\u01ce\17\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\2\u01cf"+
    "\26\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\7\15\2\u01d0\17\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\5\15\1\u01d1\22\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\u01d2\2\0\3\15\1\u01d2\2\0\2\15"+
    "\3\0\30\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\7\15\2\u01d3\17\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\2\u01d4\26\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\u01d5\2\0\3\15\1\u01d5\2\0\2\15"+
    "\3\0\30\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\6\15\1\u01d6\21\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\u01d7\2\0\3\15"+
    "\1\u01d7\2\0\2\15\3\0\30\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\16\15\1\u01d8\11\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\13\15\2\u01d9"+
    "\13\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\13\15\2\u01da\13\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\2\u01db\26\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\16\15"+
    "\1\u01dc\11\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\16\15\1\u01dd\11\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\u01de\2\0\3\15"+
    "\1\u01de\2\0\2\15\3\0\2\u01df\26\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\6\15\1\u01e0\21\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\21\15"+
    "\1\u01e1\6\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\7\15\2\u01e2\17\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\11\15\1\u01e3\16\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\6\15\1\u01e4\21\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\17\15"+
    "\1\u01e5\10\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\16\15\1\u01e6\11\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\30\15\1\0\1\15\1\u01e7\2\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\5\15\1\u01e8\22\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\15\2\0\4\15\2\0\2\15\3\0\7\15"+
    "\2\u01e9\17\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\30\15\1\0\1\15"+
    "\1\u01ea\2\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\6\15\1\u01eb\21\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\27\15\1\u01ec\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\5\15\1\u01ed"+
    "\22\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\6\15\1\u01ee\21\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\6\15\1\u01ef\21\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\11\15\1\u01f0\16\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\30\15\1\u01f1"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\7\15\2\u01f2\17\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\16\15\1\u01f3\11\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\6\15\1\u01f4"+
    "\21\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\13\15\2\u01f5\13\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\2\15\2\u01f6\24\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\u01f7\2\0\3\15\1\u01f7\2\0\2\15"+
    "\3\0\30\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\6\15\1\u01f8\21\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\12\15\1\u01f9\15\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\u01fa\2\0\3\15\1\u01fa\2\0"+
    "\2\15\3\0\30\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\u01fb\2\0\3\15\1\u01fb\2\0\2\15\3\0\30\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\u01fc\2\0\3\15"+
    "\1\u01fc\2\0\2\15\3\0\30\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\u01fd\2\0\3\15\1\u01fd\2\0\2\15"+
    "\3\0\30\15\1\0\4\15\4\0\1\15\1\0\1\15"+
    "\2\0\4\15\2\0\2\15\3\0\17\15\1\u01fe\10\15"+
    "\1\0\4\15\4\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\11\15\1\u01ff\16\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\12\15\1\u0200\15\15\1\0\4\15\32\0\1\u0201"+
    "\4\0\2\u0202\24\0\1\15\1\0\1\15\2\0\4\15"+
    "\2\0\2\15\3\0\6\15\1\u0203\21\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\15\2\0\4\15\2\0\2\15"+
    "\3\0\17\15\1\u0204\10\15\1\0\4\15\4\0\1\15"+
    "\1\0\1\u0205\2\0\3\15\1\u0205\2\0\2\15\3\0"+
    "\30\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\16\15\1\u0206\11\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\6\15\1\u0207\21\15\1\0\4\15\4\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\24\15\1\u0208\3\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\21\15\1\u0209"+
    "\6\15\1\0\4\15\4\0\1\15\1\0\1\15\2\0"+
    "\4\15\2\0\2\15\3\0\4\15\1\u020a\23\15\1\0"+
    "\4\15\4\0\1\15\1\0\1\15\2\0\4\15\2\0"+
    "\2\15\3\0\6\15\1\u020b\21\15\1\0\4\15\35\0"+
    "\1\u020c\47\0\2\u020d\37\0\1\15\1\0\1\u020e\2\0"+
    "\3\15\1\u020e\2\0\2\15\3\0\30\15\1\0\4\15"+
    "\4\0\1\15\1\0\1\u020f\2\0\3\15\1\u020f\2\0"+
    "\2\15\3\0\30\15\1\0\4\15\4\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\12\15\1\u0210"+
    "\15\15\1\0\4\15\50\0\1\u0211\42\0\1\u0212\32\0"+
    "\1\15\1\0\1\15\2\0\4\15\2\0\2\15\3\0"+
    "\12\15\1\u0213\15\15\1\0\4\15\6\0\1\u0214\5\0"+
    "\1\u0214\52\0\1\u0215\5\0\1\u0215\50\0\1\15\1\0"+
    "\1\15\2\0\4\15\2\0\2\15\3\0\6\15\1\u0216"+
    "\21\15\1\0\4\15\45\0\1\u0217\45\0\1\u0218\52\0"+
    "\2\u0219\103\0\1\u021a\65\0\1\u021b\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20776];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\43\1\1\0\6\1\3\0\6\1\1\0"+
    "\75\1\1\0\13\1\1\0\u0170\1\1\0\17\1\2\0"+
    "\11\1\2\0\3\1\2\0\2\1\1\11\1\1\4\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[539];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _RoomSqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RoomSqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 132: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 133: break;
          case 3: 
            { return NUMERIC_LITERAL;
            }
          case 134: break;
          case 4: 
            { return IDENTIFIER;
            }
          case 135: break;
          case 5: 
            { return LINE_COMMENT;
            }
          case 136: break;
          case 6: 
            { return STRING_LITERAL;
            }
          case 137: break;
          case 7: 
            { return PARAMETER_NAME;
            }
          case 138: break;
          case 8: 
            { return AS;
            }
          case 139: break;
          case 9: 
            { return BY;
            }
          case 140: break;
          case 10: 
            { return OF;
            }
          case 141: break;
          case 11: 
            { return OR;
            }
          case 142: break;
          case 12: 
            { return ON;
            }
          case 143: break;
          case 13: 
            { return TO;
            }
          case 144: break;
          case 14: 
            { return IF;
            }
          case 145: break;
          case 15: 
            { return IN;
            }
          case 146: break;
          case 16: 
            { return IS;
            }
          case 147: break;
          case 17: 
            { return NO;
            }
          case 148: break;
          case 18: 
            { return END;
            }
          case 149: break;
          case 19: 
            { return FOR;
            }
          case 150: break;
          case 20: 
            { return AND;
            }
          case 151: break;
          case 21: 
            { return ADD;
            }
          case 152: break;
          case 22: 
            { return ALL;
            }
          case 153: break;
          case 23: 
            { return ASC;
            }
          case 154: break;
          case 24: 
            { return ROW;
            }
          case 155: break;
          case 25: 
            { return NOT;
            }
          case 156: break;
          case 26: 
            { return SET;
            }
          case 157: break;
          case 27: 
            { return KEY;
            }
          case 158: break;
          case 28: 
            { return EACH;
            }
          case 159: break;
          case 29: 
            { return ELSE;
            }
          case 160: break;
          case 30: 
            { return FAIL;
            }
          case 161: break;
          case 31: 
            { return FROM;
            }
          case 162: break;
          case 32: 
            { return COMMENT;
            }
          case 163: break;
          case 33: 
            { return TEMP;
            }
          case 164: break;
          case 34: 
            { return THEN;
            }
          case 165: break;
          case 35: 
            { return CASE;
            }
          case 166: break;
          case 36: 
            { return CAST;
            }
          case 167: break;
          case 37: 
            { return INTO;
            }
          case 168: break;
          case 38: 
            { return NULL;
            }
          case 169: break;
          case 39: 
            { return DESC;
            }
          case 170: break;
          case 40: 
            { return DROP;
            }
          case 171: break;
          case 41: 
            { return LEFT;
            }
          case 172: break;
          case 42: 
            { return LIKE;
            }
          case 173: break;
          case 43: 
            { return GLOB;
            }
          case 174: break;
          case 44: 
            { return WITH;
            }
          case 175: break;
          case 45: 
            { return WHEN;
            }
          case 176: break;
          case 46: 
            { return PLAN;
            }
          case 177: break;
          case 47: 
            { return VIEW;
            }
          case 178: break;
          case 48: 
            { return JOIN;
            }
          case 179: break;
          case 49: 
            { return AFTER;
            }
          case 180: break;
          case 50: 
            { return ABORT;
            }
          case 181: break;
          case 51: 
            { return ALTER;
            }
          case 182: break;
          case 52: 
            { return BEGIN;
            }
          case 183: break;
          case 53: 
            { return ORDER;
            }
          case 184: break;
          case 54: 
            { return OUTER;
            }
          case 185: break;
          case 55: 
            { return RAISE;
            }
          case 186: break;
          case 56: 
            { return ROWID;
            }
          case 187: break;
          case 57: 
            { return TABLE;
            }
          case 188: break;
          case 58: 
            { return CROSS;
            }
          case 189: break;
          case 59: 
            { return CHECK;
            }
          case 190: break;
          case 60: 
            { return INNER;
            }
          case 191: break;
          case 61: 
            { return INDEX;
            }
          case 192: break;
          case 62: 
            { return LIMIT;
            }
          case 193: break;
          case 63: 
            { return UNION;
            }
          case 194: break;
          case 64: 
            { return USING;
            }
          case 195: break;
          case 65: 
            { return MATCH;
            }
          case 196: break;
          case 66: 
            { return GROUP;
            }
          case 197: break;
          case 67: 
            { return WHERE;
            }
          case 198: break;
          case 68: 
            { return QUERY;
            }
          case 199: break;
          case 69: 
            { return EXCEPT;
            }
          case 200: break;
          case 70: 
            { return EXISTS;
            }
          case 201: break;
          case 71: 
            { return ESCAPE;
            }
          case 202: break;
          case 72: 
            { return ATTACH;
            }
          case 203: break;
          case 73: 
            { return ACTION;
            }
          case 204: break;
          case 74: 
            { return BEFORE;
            }
          case 205: break;
          case 75: 
            { return OFFSET;
            }
          case 206: break;
          case 76: 
            { return RENAME;
            }
          case 207: break;
          case 77: 
            { return REGEXP;
            }
          case 208: break;
          case 78: 
            { return COLUMN;
            }
          case 209: break;
          case 79: 
            { return COMMIT;
            }
          case 210: break;
          case 80: 
            { return CREATE;
            }
          case 211: break;
          case 81: 
            { return INSERT;
            }
          case 212: break;
          case 82: 
            { return ISNULL;
            }
          case 213: break;
          case 83: 
            { return IGNORE;
            }
          case 214: break;
          case 84: 
            { return DETACH;
            }
          case 215: break;
          case 85: 
            { return DELETE;
            }
          case 216: break;
          case 86: 
            { return SELECT;
            }
          case 217: break;
          case 87: 
            { return HAVING;
            }
          case 218: break;
          case 88: 
            { return UNIQUE;
            }
          case 219: break;
          case 89: 
            { return UPDATE;
            }
          case 220: break;
          case 90: 
            { return PRAGMA;
            }
          case 221: break;
          case 91: 
            { return VACUUM;
            }
          case 222: break;
          case 92: 
            { return VALUES;
            }
          case 223: break;
          case 93: 
            { return EXPLAIN;
            }
          case 224: break;
          case 94: 
            { return FOREIGN;
            }
          case 225: break;
          case 95: 
            { return ANALYZE;
            }
          case 226: break;
          case 96: 
            { return BETWEEN;
            }
          case 227: break;
          case 97: 
            { return REINDEX;
            }
          case 228: break;
          case 98: 
            { return RELEASE;
            }
          case 229: break;
          case 99: 
            { return REPLACE;
            }
          case 230: break;
          case 100: 
            { return TRIGGER;
            }
          case 231: break;
          case 101: 
            { return CASCADE;
            }
          case 232: break;
          case 102: 
            { return COLLATE;
            }
          case 233: break;
          case 103: 
            { return INDEXED;
            }
          case 234: break;
          case 104: 
            { return INSTEAD;
            }
          case 235: break;
          case 105: 
            { return NATURAL;
            }
          case 236: break;
          case 106: 
            { return NOTNULL;
            }
          case 237: break;
          case 107: 
            { return DEFAULT;
            }
          case 238: break;
          case 108: 
            { return WITHOUT;
            }
          case 239: break;
          case 109: 
            { return PRIMARY;
            }
          case 240: break;
          case 110: 
            { return VIRTUAL;
            }
          case 241: break;
          case 111: 
            { return RESTRICT;
            }
          case 242: break;
          case 112: 
            { return ROLLBACK;
            }
          case 243: break;
          case 113: 
            { return CONFLICT;
            }
          case 244: break;
          case 114: 
            { return DEFERRED;
            }
          case 245: break;
          case 115: 
            { return DATABASE;
            }
          case 246: break;
          case 116: 
            { return DISTINCT;
            }
          case 247: break;
          case 117: 
            { return EXCLUSIVE;
            }
          case 248: break;
          case 118: 
            { return RECURSIVE;
            }
          case 249: break;
          case 119: 
            { return TEMPORARY;
            }
          case 250: break;
          case 120: 
            { return INTERSECT;
            }
          case 251: break;
          case 121: 
            { return INITIALLY;
            }
          case 252: break;
          case 122: 
            { return IMMEDIATE;
            }
          case 253: break;
          case 123: 
            { return SAVEPOINT;
            }
          case 254: break;
          case 124: 
            { return REFERENCES;
            }
          case 255: break;
          case 125: 
            { return CONSTRAINT;
            }
          case 256: break;
          case 126: 
            { return DEFERRABLE;
            }
          case 257: break;
          case 127: 
            { return TRANSACTION;
            }
          case 258: break;
          case 128: 
            { return CURRENT_TIME;
            }
          case 259: break;
          case 129: 
            { return CURRENT_DATE;
            }
          case 260: break;
          case 130: 
            { return AUTOINCREMENT;
            }
          case 261: break;
          case 131: 
            { return CURRENT_TIMESTAMP;
            }
          case 262: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
