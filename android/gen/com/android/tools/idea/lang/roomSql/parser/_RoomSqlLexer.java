/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.tools.idea.lang.roomSql.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.android.tools.idea.lang.roomSql.psi.RoomPsiTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_RoomSqlLexer.flex</tt>
 */
public class _RoomSqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13952 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\3"+
    "\13\1\15\3\13\1\16\24\13\1\17\1\20\1\21\10\1\1\22\1\23\1\13\1\24\4\13\1\25"+
    "\10\13\1\26\12\13\1\27\1\13\1\30\1\27\1\13\1\31\4\1\1\13\1\32\1\33\2\1\2\13"+
    "\1\32\1\1\1\34\1\27\5\13\1\35\1\36\1\37\1\1\1\40\1\13\1\1\1\41\5\13\1\42\1"+
    "\43\1\44\1\13\1\32\1\45\1\13\1\46\1\47\1\1\1\13\1\50\4\1\1\13\1\51\4\1\1\52"+
    "\2\13\1\53\1\1\1\54\1\55\1\27\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\20\1\64"+
    "\1\57\1\60\1\65\1\1\1\66\1\67\1\70\1\71\1\24\1\60\1\72\1\1\1\73\1\55\1\74"+
    "\1\75\1\57\1\60\1\72\1\1\1\63\1\55\1\43\1\76\1\77\1\100\1\101\1\1\1\73\1\67"+
    "\1\1\1\102\1\40\1\60\1\53\1\1\1\103\1\55\1\1\1\102\1\40\1\60\1\104\1\1\1\62"+
    "\1\55\1\105\1\102\1\40\1\13\1\106\1\62\1\107\1\55\1\110\1\111\1\112\1\13\1"+
    "\113\1\114\1\1\1\67\1\1\1\27\2\13\1\115\1\114\1\116\2\1\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\2\1\1\73\1\1\1\116\1\1\1\125\1\13\1\126\1\1\1\127\7\1\2"+
    "\13\1\32\1\107\1\116\1\130\1\131\1\132\1\133\1\116\2\13\1\134\2\13\1\135\24"+
    "\13\1\136\1\137\2\13\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\32\2\1"+
    "\1\13\1\1\5\13\1\142\1\27\45\13\1\143\1\13\1\144\1\32\4\13\1\32\1\145\1\146"+
    "\1\20\1\13\1\20\1\13\1\20\1\146\1\73\3\13\1\147\1\1\1\150\1\116\2\1\1\116"+
    "\5\13\1\31\2\13\1\151\4\13\1\42\1\13\1\152\2\1\1\67\1\13\1\153\1\51\2\13\1"+
    "\154\1\13\1\101\1\116\2\1\1\13\1\114\3\13\1\51\2\1\2\116\1\155\5\1\1\111\2"+
    "\13\1\147\1\156\1\116\2\1\1\157\1\13\1\160\1\44\2\13\1\42\1\1\2\13\1\147\1"+
    "\1\1\161\1\44\1\13\1\153\6\1\1\162\1\163\14\13\4\1\21\13\1\142\2\13\1\142"+
    "\1\164\1\13\1\153\3\13\1\165\1\166\1\167\1\126\1\166\1\170\1\1\1\171\2\1\1"+
    "\172\1\1\1\173\1\1\1\126\6\1\1\174\1\175\1\176\1\177\1\200\3\1\1\201\147\1"+
    "\2\13\1\152\2\13\1\152\10\13\1\202\1\203\2\13\1\134\3\13\1\204\1\1\1\13\1"+
    "\114\4\205\4\1\1\107\35\1\1\206\2\1\1\207\1\27\4\13\1\210\1\27\4\13\1\135"+
    "\1\111\1\13\1\153\1\27\4\13\1\152\1\1\1\13\1\32\3\1\1\13\40\1\133\13\1\42"+
    "\4\1\135\13\1\42\2\1\10\13\1\126\4\1\2\13\1\153\20\13\1\126\1\13\1\211\1\1"+
    "\2\13\1\152\1\107\1\13\1\153\4\13\1\42\2\1\1\212\1\213\5\13\1\214\1\13\1\153"+
    "\1\31\3\1\1\212\1\215\1\13\1\33\1\1\3\13\1\147\1\213\2\13\1\147\1\1\1\116"+
    "\1\1\1\216\1\44\1\13\1\42\1\13\1\114\1\1\1\13\1\126\1\52\2\13\1\33\1\107\1"+
    "\116\1\217\1\220\2\13\1\50\1\1\1\221\1\116\1\13\1\222\3\13\1\223\1\224\1\225"+
    "\1\32\1\70\1\226\1\227\1\205\2\13\1\135\1\42\7\13\1\33\1\116\72\13\1\147\1"+
    "\13\1\230\2\13\1\154\20\1\26\13\1\153\6\13\1\101\2\1\1\114\1\231\1\60\1\232"+
    "\1\233\6\13\1\20\1\1\1\157\25\13\1\153\1\1\4\13\1\213\2\13\1\31\2\1\1\154"+
    "\7\1\1\217\7\13\1\126\1\1\1\116\1\27\1\32\1\27\1\32\1\234\4\13\1\152\1\235"+
    "\1\236\2\1\1\237\1\13\1\14\1\240\2\153\2\1\7\13\1\32\30\1\1\13\1\126\3\13"+
    "\1\73\2\1\2\13\1\1\1\13\1\241\2\13\1\42\1\13\1\153\2\13\1\242\3\1\11\13\1"+
    "\153\1\116\5\1\2\13\1\31\3\13\1\147\11\1\23\13\1\114\1\13\1\42\1\31\11\1\1"+
    "\243\2\13\1\244\1\13\1\42\1\13\1\114\1\13\1\152\4\1\1\13\1\245\1\13\1\42\1"+
    "\13\1\101\4\1\3\13\1\246\4\1\1\73\1\247\1\13\1\147\2\1\1\13\1\126\1\13\1\126"+
    "\2\1\1\125\1\13\1\51\1\1\3\13\1\42\1\13\1\42\1\13\1\33\1\13\1\20\6\1\4\13"+
    "\1\50\3\1\3\13\1\33\3\13\1\33\60\1\1\157\2\13\1\31\2\1\1\67\1\1\1\157\2\13"+
    "\2\1\1\13\1\50\1\116\1\157\1\13\1\114\1\67\1\1\2\13\1\250\1\157\2\13\1\33"+
    "\1\251\1\252\2\1\1\13\1\24\1\154\5\1\1\253\1\254\1\50\2\13\1\152\1\1\1\116"+
    "\1\75\1\57\1\60\1\72\1\1\1\255\1\20\21\1\3\13\1\1\1\256\1\116\12\1\2\13\1"+
    "\152\2\1\1\257\2\1\3\13\1\1\1\260\1\116\2\1\2\13\1\32\1\1\1\116\3\1\1\13\1"+
    "\101\1\1\1\116\26\1\4\13\1\116\1\107\34\1\3\13\1\50\20\1\71\13\1\101\16\1"+
    "\14\13\1\147\53\1\2\13\1\152\75\1\44\13\1\114\33\1\43\13\1\50\1\13\1\152\1"+
    "\116\6\1\1\13\1\153\1\1\3\13\1\1\1\147\1\116\1\157\1\261\1\13\67\1\4\13\1"+
    "\51\1\73\3\1\1\157\6\1\1\20\77\1\6\13\1\32\1\126\1\50\1\101\66\1\5\13\1\217"+
    "\3\13\1\146\1\262\1\263\1\264\3\13\1\265\1\266\1\13\1\267\1\270\1\40\24\13"+
    "\1\271\1\13\1\40\1\135\1\13\1\135\1\13\1\217\1\13\1\217\1\152\1\13\1\152\1"+
    "\13\1\60\1\13\1\60\1\13\1\272\3\273\14\13\1\51\123\1\1\264\1\13\1\274\1\275"+
    "\1\276\1\277\1\300\1\301\1\302\1\154\1\303\1\154\24\1\55\13\1\114\2\1\103"+
    "\13\1\51\15\13\1\153\150\13\1\20\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\6\2\1\1\6\22\0\1\1\1\26\1\25\2\0\1\30\1\31\1\24\1\32\1\33\1\5"+
    "\1\16\1\34\1\12\1\14\1\4\1\17\11\13\1\23\1\35\1\36\1\27\1\37\1\40\1\0\1\41"+
    "\1\43\1\50\1\54\1\15\1\56\1\66\1\63\1\52\1\73\1\70\1\57\1\65\1\53\1\45\1\71"+
    "\1\74\1\46\1\62\1\47\1\64\1\72\1\67\1\20\1\60\1\61\1\2\1\0\1\3\1\0\1\10\1"+
    "\0\1\42\1\44\1\51\1\55\1\22\1\21\1\66\1\63\1\52\1\73\1\70\1\57\1\65\1\53\1"+
    "\45\1\71\1\74\1\46\1\62\1\47\1\64\1\72\1\67\1\20\1\60\1\61\1\0\1\75\1\0\1"+
    "\76\6\0\1\1\12\0\1\1\11\0\1\7\12\0\1\7\4\0\1\7\5\0\27\7\1\0\10\7\2\52\35\7"+
    "\1\62\2\7\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\1\0\5\7\1\0\2\7\2\0\4\7\1\0\1"+
    "\7\6\0\1\7\1\0\3\7\1\0\1\7\1\0\4\7\1\0\23\7\1\0\13\7\10\0\6\7\1\0\26\7\2\0"+
    "\1\7\6\0\10\7\10\0\13\7\5\0\3\7\15\0\12\11\4\0\6\7\1\0\1\7\17\0\2\7\7\0\2"+
    "\7\12\11\3\7\2\0\2\7\1\0\16\7\15\0\11\7\13\0\1\7\16\0\12\11\6\7\4\0\2\7\4"+
    "\0\1\7\5\0\6\7\4\0\1\7\11\0\1\7\3\0\1\7\7\0\11\7\7\0\5\7\17\0\26\7\3\0\1\7"+
    "\2\0\1\7\7\0\12\7\4\0\12\11\1\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7"+
    "\3\0\4\7\3\0\1\7\20\0\1\7\15\0\2\7\1\0\1\7\5\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7"+
    "\1\0\2\7\17\0\4\7\1\0\1\7\7\0\12\11\2\0\3\7\20\0\11\7\1\0\2\7\1\0\2\7\1\0"+
    "\5\7\3\0\1\7\2\0\1\7\30\0\1\7\13\0\10\7\2\0\1\7\3\0\1\7\1\0\6\7\3\0\3\7\1"+
    "\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\13\0\10\7\1\0\2\7"+
    "\10\0\3\7\5\0\4\7\1\0\5\7\3\0\1\7\3\0\2\7\15\0\13\7\2\0\1\7\21\0\1\7\12\0"+
    "\6\7\5\0\22\7\3\0\10\7\1\0\11\7\1\0\1\7\2\0\7\7\11\0\1\7\1\0\2\7\14\0\12\11"+
    "\7\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1"+
    "\0\1\7\2\0\2\7\1\0\4\7\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1\7\11\0\12\11\2\0\14"+
    "\7\1\0\24\7\13\0\5\7\3\0\6\7\4\0\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0"+
    "\1\7\1\0\6\7\1\0\1\7\5\0\1\7\2\0\13\7\1\0\15\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0"+
    "\4\7\2\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\16\7\2\0\6\7\2\0\15\7\2\0"+
    "\1\7\1\1\17\7\1\0\10\7\7\0\15\7\1\0\6\7\23\0\1\7\4\0\1\7\3\0\11\7\1\0\1\7"+
    "\5\0\17\7\1\0\16\7\2\0\14\7\13\0\1\7\15\0\7\7\7\0\16\7\15\0\2\7\12\11\3\0"+
    "\3\7\11\0\4\7\1\0\4\7\3\0\2\7\11\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\6\7\1"+
    "\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0\13\1\15\0\2\1\5\0\1\1\17"+
    "\0\1\1\1\0\1\7\15\0\1\7\2\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1"+
    "\0\1\7\1\0\1\7\1\0\1\70\3\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\2\7\13\0"+
    "\5\7\6\0\4\7\3\0\2\7\14\0\10\7\7\0\10\7\1\0\7\7\1\0\1\1\4\0\2\7\12\0\5\7\5"+
    "\0\2\7\3\0\7\7\6\0\3\7\12\11\2\7\13\0\11\7\2\0\27\7\2\0\7\7\1\0\3\7\1\0\4"+
    "\7\1\0\4\7\2\0\6\7\3\0\1\7\1\0\1\7\2\0\5\7\1\0\12\7\12\11\5\7\1\0\3\7\1\0"+
    "\10\7\4\0\7\7\3\0\1\7\3\0\2\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0\1\7\1\0\1\7\30\0"+
    "\3\7\3\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7\4\0\5\7\3\0\5\7\5\0\1\7\1\0\10\7\1\0"+
    "\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\12\7\6\0\12\7\2\0\6\7\2\0\6\7\2\0\6\7\2\0"+
    "\3\7\3\0\14\7\1\0\16\7\1\0\2\7\1\0\2\7\1\0\10\7\6\0\4\7\4\0\16\7\2\0\1\7\1"+
    "\0\14\7\1\0\2\7\3\0\1\7\2\0\4\7\1\0\2\7\12\0\10\7\6\0\6\7\1\0\3\7\1\0\12\7"+
    "\3\0\1\7\12\0\4\7\13\0\12\11\1\7\1\0\1\7\3\0\7\7\1\0\1\7\1\0\4\7\1\0\17\7"+
    "\1\0\2\7\14\0\3\7\4\0\2\7\1\0\1\7\20\0\4\7\10\0\1\7\13\0\10\7\5\0\3\7\2\0"+
    "\1\7\2\0\2\7\2\0\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\21\7\1\0\4\7\2\0\10\7\1"+
    "\0\7\7\1\0\14\7\1\0\4\7\1\0\5\7\1\0\1\7\3\0\14\7\2\0\13\7\1\0\10\7\2\0\22"+
    "\11\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1"+
    "\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7\1\0\12\7"+
    "\1\0\5\7\1\0\3\7\1\0\5\7\1\0\5\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\5\1\11\1\7\2\5\4\1\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\25\5\1\24\1\25\1\0\1\26\1\27\1\30"+
    "\1\7\1\0\5\5\3\0\3\5\1\31\2\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\7\5\1\42"+
    "\2\5\1\43\1\44\1\45\1\46\6\5\1\47\7\5"+
    "\1\50\1\51\1\52\3\5\1\53\31\5\1\54\1\27"+
    "\1\0\1\7\4\5\1\55\2\5\1\7\1\5\1\56"+
    "\6\5\1\57\1\60\1\5\1\61\1\62\21\5\1\63"+
    "\26\5\1\64\13\5\1\65\13\5\1\66\11\5\1\27"+
    "\1\0\4\5\1\67\1\70\1\5\1\71\1\5\1\72"+
    "\30\5\1\73\3\5\1\74\1\75\1\76\13\5\1\77"+
    "\12\5\1\100\4\5\1\101\1\5\1\102\1\5\1\103"+
    "\1\5\1\104\11\5\1\105\1\106\1\5\1\107\2\5"+
    "\1\110\2\5\1\111\1\5\1\112\7\5\1\113\1\114"+
    "\3\5\1\115\3\5\1\116\1\5\1\117\1\120\10\5"+
    "\1\121\1\5\1\122\1\5\1\123\11\5\1\124\1\125"+
    "\3\5\1\126\1\127\15\5\1\130\3\5\1\131\1\5"+
    "\1\132\1\5\1\133\1\134\1\5\1\135\5\5\1\136"+
    "\1\137\1\5\1\140\1\5\1\141\1\5\1\142\1\143"+
    "\2\5\1\144\1\5\1\145\3\5\1\146\2\5\1\147"+
    "\11\5\1\150\1\151\1\152\4\5\1\153\1\5\1\154"+
    "\1\5\1\155\4\5\1\156\1\157\2\5\1\160\1\5"+
    "\1\161\1\162\1\163\1\5\1\164\1\5\1\165\1\166"+
    "\2\5\1\167\1\170\1\171\1\5\1\172\2\5\1\173"+
    "\1\174\1\5\1\175\3\5\1\176\1\177\2\5\1\200"+
    "\3\5\1\201\1\202\1\5\1\203\1\204\2\5\1\205"+
    "\3\5\1\206\1\207\1\210\4\5\1\211\1\212\2\5"+
    "\1\213\5\5\1\214\1\5\1\215\1\216\1\5\1\217"+
    "\2\5\1\220\1\221\4\5\1\222\1\223\1\224\1\5"+
    "\1\225\1\5\1\226\1\5\1\227\2\5\1\230\1\5"+
    "\1\231\3\5\1\232\1\233\1\234\4\5\1\235";

  private static int [] zzUnpackAction() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\77\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\77\0\u0276\0\u02b5\0\u02f4\0\u0333"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\u046e\0\u04ad\0\77\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762"+
    "\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a"+
    "\0\u0999\0\u09d8\0\u0a17\0\77\0\275\0\77\0\u0a56\0\u0a95"+
    "\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\u0372\0\u03b1\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\77\0\u0e46"+
    "\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e"+
    "\0\u107d\0\u013b\0\u10bc\0\u10fb\0\u013b\0\u113a\0\u1179\0\u11b8"+
    "\0\u11f7\0\u1236\0\u1275\0\u013b\0\u12b4\0\u12f3\0\u1332\0\u1371"+
    "\0\u13b0\0\u13ef\0\u142e\0\u013b\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a"+
    "\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12"+
    "\0\u1b51\0\u1b90\0\u1bcf\0\77\0\u1c0e\0\u1c4d\0\u1c4d\0\u1c8c"+
    "\0\u1ccb\0\u1d0a\0\u1d49\0\u013b\0\u1d88\0\u1dc7\0\u0c8d\0\u1e06"+
    "\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u013b"+
    "\0\u013b\0\u1ffe\0\u013b\0\u013b\0\u203d\0\u207c\0\u20bb\0\u20fa"+
    "\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2"+
    "\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea"+
    "\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2"+
    "\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da"+
    "\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2"+
    "\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca"+
    "\0\u013b\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83"+
    "\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u013b\0\u2fbe\0\u2ffd\0\u303c"+
    "\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\77\0\u1c0e"+
    "\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u013b\0\u013b\0\u32f1\0\u013b"+
    "\0\u3330\0\u013b\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa"+
    "\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2"+
    "\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b\0\u389a"+
    "\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u013b\0\u013b"+
    "\0\u013b\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd"+
    "\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u013b\0\u3d08\0\u3d47\0\u3d86"+
    "\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u013b"+
    "\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u013b\0\u407a\0\u013b\0\u40b9"+
    "\0\u013b\0\u40f8\0\u013b\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u4233"+
    "\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u013b\0\u436e\0\u43ad\0\u013b"+
    "\0\u43ec\0\u442b\0\u013b\0\u446a\0\u44a9\0\u013b\0\u44e8\0\u013b"+
    "\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u013b"+
    "\0\u013b\0\u46e0\0\u471f\0\u475e\0\u013b\0\u479d\0\u47dc\0\u481b"+
    "\0\u013b\0\u485a\0\u013b\0\u013b\0\u4899\0\u48d8\0\u4917\0\u4956"+
    "\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u013b\0\u4a91\0\u013b\0\u4ad0"+
    "\0\u013b\0\u4b0f\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89"+
    "\0\u4cc8\0\u4d07\0\u013b\0\u013b\0\u4d46\0\u4d85\0\u4dc4\0\u013b"+
    "\0\u4e03\0\u4e42\0\u4e81\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc"+
    "\0\u4ffb\0\u503a\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u013b\0\u5175"+
    "\0\u51b4\0\u51f3\0\u013b\0\u5232\0\u013b\0\u5271\0\u013b\0\u013b"+
    "\0\u52b0\0\u013b\0\u52ef\0\u532e\0\u536d\0\u53ac\0\u53eb\0\u013b"+
    "\0\u013b\0\u542a\0\u013b\0\u5469\0\u013b\0\u54a8\0\u013b\0\u013b"+
    "\0\u54e7\0\u5526\0\u013b\0\u5565\0\u013b\0\u55a4\0\u55e3\0\u5622"+
    "\0\u013b\0\u5661\0\u56a0\0\u013b\0\u56df\0\u571e\0\u575d\0\u579c"+
    "\0\u57db\0\u581a\0\u5859\0\u5898\0\u58d7\0\u013b\0\u013b\0\u013b"+
    "\0\u5916\0\u5955\0\u5994\0\u59d3\0\u013b\0\u5a12\0\u013b\0\u5a51"+
    "\0\u013b\0\u5a90\0\u5acf\0\u5b0e\0\u5b4d\0\u013b\0\u013b\0\u5b8c"+
    "\0\u5bcb\0\u013b\0\u5c0a\0\u013b\0\u013b\0\u013b\0\u5c49\0\u013b"+
    "\0\u5c88\0\u013b\0\u013b\0\u5cc7\0\u5d06\0\u013b\0\u013b\0\u013b"+
    "\0\u5d45\0\u013b\0\u5d84\0\u5dc3\0\u013b\0\u013b\0\u5e02\0\u013b"+
    "\0\u5e41\0\u5e80\0\u5ebf\0\u013b\0\u013b\0\u5efe\0\u5f3d\0\u013b"+
    "\0\u5f7c\0\u5fbb\0\u5ffa\0\u013b\0\u013b\0\u6039\0\u013b\0\u013b"+
    "\0\u6078\0\u60b7\0\u013b\0\u60f6\0\u6135\0\u6174\0\u013b\0\u013b"+
    "\0\u013b\0\u61b3\0\u61f2\0\u6231\0\u6270\0\u013b\0\u013b\0\u62af"+
    "\0\u62ee\0\u013b\0\u632d\0\u636c\0\u63ab\0\u63ea\0\u6429\0\u013b"+
    "\0\u6468\0\u013b\0\u013b\0\u64a7\0\u013b\0\u64e6\0\u6525\0\u013b"+
    "\0\u013b\0\u6564\0\u65a3\0\u65e2\0\u6621\0\u013b\0\u013b\0\u013b"+
    "\0\u6660\0\u013b\0\u669f\0\u013b\0\u66de\0\u013b\0\u671d\0\u675c"+
    "\0\u013b\0\u679b\0\u013b\0\u67da\0\u6819\0\u6858\0\u6897\0\u013b"+
    "\0\u013b\0\u68d6\0\u6915\0\u6954\0\u6993\0\u013b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\3\2\7"+
    "\1\2\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\13\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\2\36\2\37\1\40\1\41\1\42\2\43\1\44\1\45"+
    "\2\46\1\17\1\47\2\7\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\100\0\1\3\4\0\1\3\70\0\3\65\1\66"+
    "\73\65\5\0\1\67\100\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\34\7\14\0\1\70\77\0"+
    "\1\11\1\71\1\72\1\0\1\11\2\0\1\72\67\0"+
    "\1\71\3\0\1\71\66\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\73\2\7\16\0\2\74\10\7"+
    "\1\75\3\7\1\76\2\7\1\77\12\7\15\0\1\11"+
    "\1\71\1\72\1\0\1\11\1\100\1\0\1\72\63\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0"+
    "\1\101\1\102\13\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\2\103\2\7\1\104"+
    "\1\105\26\7\11\0\2\106\4\0\1\106\2\0\3\106"+
    "\16\0\34\106\2\0\24\101\1\107\52\101\25\102\1\110"+
    "\51\102\27\0\1\111\76\0\1\112\76\0\1\113\6\0"+
    "\1\114\1\115\66\0\1\116\7\0\1\117\46\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\120\1\7"+
    "\16\0\2\7\2\121\2\7\1\122\2\123\1\7\1\124"+
    "\2\125\1\120\1\126\2\7\1\127\1\7\1\130\10\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\131\1\0\3\7"+
    "\1\131\16\0\17\7\1\132\14\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\133\1\7\16\0"+
    "\5\7\1\134\4\7\1\135\2\7\1\133\5\7\1\136"+
    "\10\7\11\0\3\7\1\0\1\7\1\0\1\137\1\0"+
    "\3\7\1\137\16\0\2\140\2\7\1\141\27\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\142\1\0\3\7\1\142"+
    "\16\0\2\143\2\7\1\144\1\145\14\7\1\146\11\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\2\147\2\7\1\150\1\151\14\7\1\152\1\153"+
    "\10\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\2\7\1\154\1\7\16\0\12\7\1\155\2\7\1\154"+
    "\3\7\1\156\2\7\1\157\1\160\6\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\2\161"+
    "\2\7\1\162\16\7\1\163\10\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\164\1\0\3\7\1\164\16\0\2\165"+
    "\3\7\1\166\3\7\1\167\22\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\170\1\0\3\7\1\170\16\0\11\7"+
    "\1\171\22\7\11\0\3\7\1\0\1\7\1\0\1\172"+
    "\1\0\3\7\1\172\16\0\2\173\32\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\2\174"+
    "\32\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\12\7\1\175\6\7\1\176\6\7\1\177"+
    "\3\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\2\200\32\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\5\7\1\201\10\7"+
    "\1\202\15\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\11\7\1\203\10\7\1\204\11\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\205\1\0\3\7"+
    "\1\205\16\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\5\7\1\206\10\7\1\207"+
    "\15\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\2\210\7\7\1\211\22\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\4\7"+
    "\1\212\27\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\23\7\1\213\10\7\77\0\1\214"+
    "\1\0\5\67\1\215\71\67\6\70\1\0\70\70\13\0"+
    "\1\71\1\0\1\72\1\0\1\71\2\0\1\72\66\0"+
    "\1\216\1\217\2\0\1\216\1\217\66\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\7\7\2\220"+
    "\1\221\16\7\1\222\3\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\7\7\2\223\23\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\13\7\2\224\17\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\21\7\1\225\12\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\7\7\2\226\23\7\15\0\1\227\3\0\1\227"+
    "\1\0\2\227\17\0\1\227\1\0\1\227\4\0\1\227"+
    "\3\0\1\227\30\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\11\7\1\230\22\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\5\7"+
    "\1\231\26\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\4\7\1\232\27\7\11\0\3\106"+
    "\1\0\1\106\1\0\1\106\1\0\4\106\16\0\34\106"+
    "\26\0\1\101\77\0\1\102\60\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\6\7\1\233\25\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\4\7\1\234\27\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\6\7\1\235\25\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\6\7\1\236\25\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\2\237\11\7\2\240"+
    "\17\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\13\7\2\241\17\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\6\7\1\242"+
    "\7\7\1\243\15\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\7\7\2\244\23\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\6\7\1\245\25\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\246\1\7\16\0\6\7\1\247"+
    "\6\7\1\246\7\7\1\250\6\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\2\7\1\251\1\7\16\0"+
    "\15\7\1\251\16\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\13\7\2\252\17\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\6\7\1\253\25\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\2\7\1\254\1\7\16\0\7\7\2\255"+
    "\1\256\1\257\2\7\1\254\1\260\2\7\1\261\3\7"+
    "\1\262\2\7\1\263\3\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\11\7\1\264\22\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\16\7\1\265\7\7\1\266\5\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\24\7"+
    "\1\267\7\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\2\7\2\270\30\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\2\271"+
    "\7\7\1\272\22\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\273\1\0\3\7\1\273\16\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\21\7"+
    "\1\274\12\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\12\7\1\275\3\7\1\276\5\7"+
    "\1\277\7\7\11\0\3\7\1\0\1\7\1\0\1\300"+
    "\1\0\3\7\1\300\16\0\4\7\1\301\27\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\302\1\0\3\7\1\302"+
    "\16\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\5\7\1\303\26\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\6\7"+
    "\1\304\2\7\1\305\1\306\2\307\4\7\1\310\12\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\12\7\1\311\21\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\24\7\1\312\7\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\12\7\1\313\21\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\6\7\1\314\25\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\6\7\1\315\25\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\16\7\1\316\15\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\2\7"+
    "\1\317\1\7\16\0\6\7\1\320\6\7\1\317\1\321"+
    "\2\7\1\322\12\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\6\7\1\323\25\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\4\7\1\324\27\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\21\7\1\325\12\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\2\7\1\326"+
    "\1\7\16\0\15\7\1\326\16\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\24\7\1\327"+
    "\2\7\1\330\4\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\6\7\1\331\7\7\1\332"+
    "\15\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\31\7\1\333\2\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\31\7\1\334"+
    "\2\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\11\7\1\335\22\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\11\7\1\336"+
    "\22\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\13\7\2\337\17\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\6\7\1\340"+
    "\25\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\4\7\1\341\27\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\4\7\1\342"+
    "\27\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\6\7\1\343\25\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\344\1\0\3\7\1\344\16\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\17\7\1\345\14\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\2\346\7\7\1\347"+
    "\22\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\2\350\32\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\7\7\2\351\5\7"+
    "\1\352\15\7\11\0\3\7\1\0\1\7\1\0\1\353"+
    "\1\0\3\7\1\353\16\0\5\7\1\354\26\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\11\7\1\355\22\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\356\1\0\3\7\1\356\16\0\34\7\2\0\4\67"+
    "\1\357\1\360\71\67\13\0\1\217\3\0\1\217\66\0"+
    "\3\7\1\0\1\7\1\0\1\361\1\0\3\7\1\361"+
    "\16\0\16\7\1\362\15\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\21\7\1\363\12\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\16\7\1\364\15\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\22\7\1\365\11\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\366\1\0\3\7"+
    "\1\366\16\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\2\367\32\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\16\7"+
    "\1\370\15\7\11\0\3\7\1\0\1\7\1\0\1\371"+
    "\1\0\3\7\1\371\16\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\24\7\1\372"+
    "\7\7\11\0\3\7\1\0\1\7\1\0\1\373\1\0"+
    "\3\7\1\373\16\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\5\7\1\374\26\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\2\375\32\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\11\7\1\376\22\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\16\7\1\377\15\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\u0100\1\0\3\7\1\u0100\16\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\4\7"+
    "\1\u0101\27\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\4\7\1\u0102\27\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\26\7"+
    "\1\u0103\5\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\11\7\1\u0104\22\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\21\7"+
    "\1\u0105\12\7\11\0\3\7\1\0\1\7\1\0\1\u0106"+
    "\1\0\3\7\1\u0106\16\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u0107\1\0\3\7\1\u0107\16\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u0108\1\0\3\7"+
    "\1\u0108\16\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\23\7\1\u0109\10\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\12\7\1\u010a\21\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\2\u010b\32\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\u010c\1\0\3\7\1\u010c\16\0"+
    "\34\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\6\7\1\u010d\25\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u010e\1\0\3\7\1\u010e\16\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\16\7\1\u010f\15\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\21\7\1\u0110\12\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\16\7\1\u0111\15\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\11\7\1\u0112\22\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\30\7\1\u0113\3\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\16\7\1\u0114\15\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\12\7\1\u0115\21\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\25\7\1\u0116\6\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\12\7\1\u0117\21\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\u0118\1\0\3\7\1\u0118\16\0\6\7\1\u0119"+
    "\2\u011a\23\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\u011b\1\7\16\0\15\7\1\u011b\3\7"+
    "\1\u011c\12\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\16\7\1\u011d\4\7\1\u011e\10\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\24\7\1\u011f\7\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\2\u0120\32\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\21\7\1\u0121\12\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\7\7\2\u0122\23\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\5\7\1\u0123\26\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\u0124\1\0\3\7\1\u0124\16\0\4\7\1\u0125\27\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\6\7\1\u0126\25\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\u0127\1\0\3\7\1\u0127\16\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u0128\1\0\3\7\1\u0128"+
    "\16\0\34\7\11\0\3\7\1\0\1\7\1\0\1\u0129"+
    "\1\0\3\7\1\u0129\16\0\6\7\1\u012a\25\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\23\7\1\u012b\10\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\u012c\1\0\3\7\1\u012c\16\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\4\7"+
    "\1\u012d\27\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\23\7\1\u012e\10\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\12\7"+
    "\1\u012f\21\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\16\7\1\u0130\15\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\u0131\1\0\3\7\1\u0131\16\0"+
    "\2\u0132\32\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\2\u0133\32\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u0134\1\0\3\7\1\u0134\16\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\7\7\2\u0135\23\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\2\u0136\32\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\30\7\1\u0137\3\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\6\7\1\u0138\25\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\6\7\1\u0139\25\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\11\7\1\u013a\22\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u013b\1\0\3\7\1\u013b"+
    "\16\0\34\7\11\0\3\7\1\0\1\7\1\0\1\u013c"+
    "\1\0\3\7\1\u013c\16\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u013d\1\0\3\7\1\u013d\16\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\11\7\1\u013e\22\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\4\7\1\u013f\26\7"+
    "\1\u0140\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\12\7\1\u0141\21\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\2\u0142\32\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\7\7\2\u0143\23\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\23\7\1\u0144\10\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\2\7\2\u0145\30\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\22\7\1\u0146\11\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\5\7\1\u0147\4\7\1\u0148\21\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\25\7"+
    "\1\u0149\6\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\24\7\1\u014a\7\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\12\7"+
    "\1\u014b\21\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\23\7\1\u014c\10\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\23\7"+
    "\1\u014d\10\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\26\7\1\u014e\5\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\6\7"+
    "\1\u014f\25\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\12\7\1\u0150\21\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\5\7"+
    "\1\u0151\26\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\30\7\1\u0152\3\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\23\7"+
    "\1\u0153\10\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\6\7\1\u0154\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\2\u0155"+
    "\32\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\30\7\1\u0156\3\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\11\7\1\u0157"+
    "\22\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\5\7\1\u0158\26\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\6\7\1\u0159"+
    "\25\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\7\7\2\u015a\23\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\4\7\1\u015b"+
    "\27\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\17\7\1\u015c\14\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\5\7\1\u015d"+
    "\26\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\11\7\1\u015e\22\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\5\7\1\u015f"+
    "\26\7\11\0\3\7\1\0\1\7\1\0\1\u0160\1\0"+
    "\3\7\1\u0160\16\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\12\7\1\u0161\21\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u0162\1\0\3\7"+
    "\1\u0162\16\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\5\7\1\u0163\26\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\5\7\1\u0164\26\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\5\7\1\u0165\26\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\5\7\1\u0166\26\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\13\7\2\u0167\17\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\24\7\1\u0168\7\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\2\u0169\32\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\5\7"+
    "\1\u016a\26\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\u016b\2\7\16\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\2\u016c"+
    "\32\7\11\0\3\7\1\0\1\7\1\0\1\u016d\1\0"+
    "\3\7\1\u016d\16\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\2\7\2\u016e\30\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\13\7\2\u016f\17\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\4\7\1\u0170\27\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u0171\1\0\3\7"+
    "\1\u0171\16\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\21\7\1\u0172\12\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\25\7\1\u0173\6\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\2\u0174\32\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\16\7"+
    "\1\u0175\15\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\6\7\1\u0176\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\2\u0177"+
    "\32\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\24\7\1\u0178\7\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\11\7\1\u0179"+
    "\22\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\6\7\1\u017a\25\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\21\7\1\u017b"+
    "\12\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\27\7\1\u017c\4\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u017d\1\0\3\7\1\u017d\16\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\5\7\1\u017e\26\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\11\7\1\u017f\22\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\5\7\1\u0180\26\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\u0181\2\7\16\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\5\7\1\u0182\26\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\u0183\1\0\3\7\1\u0183\16\0\34\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\16\7\1\u0184\15\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\13\7\2\u0185\17\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\5\7\1\u0186\26\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\5\7\1\u0187\26\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\23\7\1\u0188\10\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\5\7\1\u0189\26\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\23\7\1\u018a\10\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\7\7\2\u018b\23\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\6\7\1\u018c\25\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\2\7\2\u018d\30\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\11\7\1\u018e\22\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\6\7\1\u018f\25\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\7\7\2\u0190\23\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\30\7\1\u0191\3\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\12\7\1\u0192\21\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\12\7\1\u0193\21\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\23\7\1\u0194\10\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\25\7\1\u0195\6\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\6\7\1\u0196\25\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\22\7\1\u0197\11\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\30\7\1\u0198\3\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\4\7\1\u0199\27\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u019a\1\0\3\7\1\u019a"+
    "\16\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\24\7\1\u019b\7\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\2\u019c"+
    "\32\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\23\7\1\u019d\10\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u019e\1\0\3\7\1\u019e\16\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\23\7\1\u019f\10\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\17\7\1\u01a0\14\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\6\7\1\u01a1\25\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\21\7\1\u01a2\12\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\21\7\1\u01a3\12\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\11\7\1\u01a4\22\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u01a5\1\0\3\7"+
    "\1\u01a5\16\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\25\7\1\u01a6\6\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\22\7\1\u01a7\11\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\12\7\1\u01a8\21\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\20\7\1\u01a9\13\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\12\7\1\u01aa\21\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u01ab\1\0\3\7\1\u01ab"+
    "\16\0\34\7\11\0\3\7\1\0\1\7\1\0\1\u01ac"+
    "\1\0\3\7\1\u01ac\16\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\6\7\1\u01ad"+
    "\25\7\11\0\3\7\1\0\1\7\1\0\1\u01ae\1\0"+
    "\3\7\1\u01ae\16\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\21\7\1\u01af\12\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u01b0\1\0\3\7"+
    "\1\u01b0\16\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\u01b1\1\0\3\7\1\u01b1\16\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\21\7"+
    "\1\u01b2\12\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\11\7\1\u01b3\22\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\30\7"+
    "\1\u01b4\3\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\7\7\2\u01b5\23\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\2\u01b6"+
    "\32\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\5\7\1\u01b7\26\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\2\u01b8\32\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u01b9\1\0\3\7"+
    "\1\u01b9\16\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\13\7\2\u01ba\17\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\11\7\1\u01bb\22\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\5\7\1\u01bc\26\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\6\7\1\u01bd\25\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\12\7\1\u01be\21\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\6\7\1\u01bf\25\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\u01c0\1\0\3\7\1\u01c0\16\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\12\7"+
    "\1\u01c1\21\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\21\7\1\u01c2\12\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\2\u01c3"+
    "\32\7\11\0\3\7\1\0\1\7\1\0\1\u01c4\1\0"+
    "\3\7\1\u01c4\16\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\6\7\1\u01c5\25\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\2\u01c6\32\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\16\7\1\u01c7\15\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\11\7\1\u01c8\22\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\u01c9\1\0\3\7\1\u01c9\16\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\2\u01ca"+
    "\32\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\16\7\1\u01cb\15\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\5\7\1\u01cc"+
    "\26\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\16\7\1\u01cd\15\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\22\7\1\u01ce"+
    "\11\7\11\0\3\7\1\0\1\7\1\0\1\u01cf\1\0"+
    "\3\7\1\u01cf\16\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\2\u01d0\32\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\12\7\1\u01d1\21\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\6\7\1\u01d2\25\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\4\7\1\u01d3\27\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\25\7\1\u01d4\6\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u01d5\1\0\3\7\1\u01d5"+
    "\16\0\34\7\11\0\3\7\1\0\1\7\1\0\1\u01d6"+
    "\1\0\3\7\1\u01d6\16\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\23\7\1\u01d7"+
    "\10\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\2\u01d8\32\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\5\7\1\u01d9\26\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\24\7\1\u01da\7\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\21\7\1\u01db\12\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\2\u01dc\32\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\11\7\1\u01dd\22\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\12\7\1\u01de\21\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\12\7\1\u01df\21\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u01e0\1\0\3\7\1\u01e0"+
    "\16\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\7\7\2\u01e1\23\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\12\7"+
    "\1\u01e2\21\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\12\7\1\u01e3\21\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\11\7"+
    "\1\u01e4\22\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\u01e5\2\7\16\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\u01e6\1\0\3\7\1\u01e6\16\0"+
    "\34\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\7\7\2\u01e7\23\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u01e8\1\0\3\7\1\u01e8\16\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\7\7\2\u01e9\23\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\2\u01ea\32\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\7\7\2\u01eb\23\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\5\7\1\u01ec\26\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\u01ed\1\0\3\7\1\u01ed"+
    "\16\0\34\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\7\7\2\u01ee\23\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\2\u01ef"+
    "\32\7\11\0\3\7\1\0\1\7\1\0\1\u01f0\1\0"+
    "\3\7\1\u01f0\16\0\34\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\6\7\1\u01f1\25\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u01f2\1\0\3\7"+
    "\1\u01f2\16\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\16\7\1\u01f3\15\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\13\7\2\u01f4\17\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\13\7\2\u01f5\17\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\2\u01f6\32\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\16\7\1\u01f7\15\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\16\7"+
    "\1\u01f8\15\7\11\0\3\7\1\0\1\7\1\0\1\u01f9"+
    "\1\0\3\7\1\u01f9\16\0\2\u01fa\32\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\6\7"+
    "\1\u01fb\25\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\21\7\1\u01fc\12\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\7\7"+
    "\2\u01fd\23\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\11\7\1\u01fe\22\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\6\7"+
    "\1\u01ff\25\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\17\7\1\u0200\14\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\16\7"+
    "\1\u0201\15\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\31\7\1\u0202\2\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\5\7"+
    "\1\u0203\26\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\7\7\2\u0204\23\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\31\7"+
    "\1\u0205\2\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\6\7\1\u0206\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\27\7"+
    "\1\u0207\4\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\5\7\1\u0208\26\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\6\7"+
    "\1\u0209\25\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\6\7\1\u020a\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\11\7"+
    "\1\u020b\22\7\11\0\1\7\1\u020c\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\7\7"+
    "\2\u020d\23\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\16\7\1\u020e\15\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\6\7"+
    "\1\u020f\25\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\13\7\2\u0210\17\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\2\7"+
    "\2\u0211\30\7\11\0\3\7\1\0\1\7\1\0\1\u0212"+
    "\1\0\3\7\1\u0212\16\0\34\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\6\7\1\u0213"+
    "\25\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\12\7\1\u0214\21\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u0215\1\0\3\7\1\u0215\16\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u0216\1\0\3\7"+
    "\1\u0216\16\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\u0217\1\0\3\7\1\u0217\16\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\u0218\1\0\3\7\1\u0218\16\0"+
    "\34\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\17\7\1\u0219\14\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\11\7\1\u021a"+
    "\22\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\12\7\1\u021b\21\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\6\7\1\u021c"+
    "\4\7\2\u021d\17\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\6\7\1\u021e\25\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\17\7\1\u021f\14\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\u0220\1\0\3\7\1\u0220\16\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\16\7"+
    "\1\u0221\15\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\6\7\1\u0222\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\24\7"+
    "\1\u0223\7\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\21\7\1\u0224\12\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\4\7"+
    "\1\u0225\27\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\6\7\1\u0226\25\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\16\0\11\7"+
    "\1\u0227\22\7\11\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\0\4\7\16\0\2\u0228\32\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\u0229\1\0\3\7\1\u0229\16\0\34\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\u022a\1\0\3\7"+
    "\1\u022a\16\0\34\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\12\7\1\u022b\21\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\24\7\1\u022c\7\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\16\0\6\7\1\u022d\25\7\11\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\0\4\7\16\0"+
    "\12\7\1\u022e\21\7\11\0\3\7\1\0\1\7\1\0"+
    "\1\u022f\1\0\3\7\1\u022f\16\0\34\7\11\0\3\7"+
    "\1\0\1\7\1\0\1\u0230\1\0\3\7\1\u0230\16\0"+
    "\34\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\6\7\1\u0231\25\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\21\7\1\u0232"+
    "\12\7\11\0\3\7\1\0\1\7\1\0\1\7\1\0"+
    "\4\7\16\0\6\7\1\u0233\25\7\11\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\16\0\2\u0234\32\7"+
    "\11\0\3\7\1\0\1\7\1\0\1\7\1\0\4\7"+
    "\16\0\24\7\1\u0235\7\7\11\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\0\4\7\16\0\30\7\1\u0236\3\7"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27090];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\5\1\1\11\10\1\6\11"+
    "\2\1\1\11\26\1\1\11\1\0\1\11\3\1\1\0"+
    "\5\1\3\0\6\1\7\11\74\1\1\11\1\1\1\0"+
    "\140\1\1\11\1\0\u0146\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _RoomSqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _RoomSqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 158: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 159: break;
          case 3: 
            { return DIV;
            }
          case 160: break;
          case 4: 
            { return STAR;
            }
          case 161: break;
          case 5: 
            { return IDENTIFIER;
            }
          case 162: break;
          case 6: 
            { return MINUS;
            }
          case 163: break;
          case 7: 
            { return NUMERIC_LITERAL;
            }
          case 164: break;
          case 8: 
            { return DOT;
            }
          case 165: break;
          case 9: 
            { return PLUS;
            }
          case 166: break;
          case 10: 
            { return EQ;
            }
          case 167: break;
          case 11: 
            { return MOD;
            }
          case 168: break;
          case 12: 
            { return AMP;
            }
          case 169: break;
          case 13: 
            { return LPAREN;
            }
          case 170: break;
          case 14: 
            { return RPAREN;
            }
          case 171: break;
          case 15: 
            { return COMMA;
            }
          case 172: break;
          case 16: 
            { return SEMICOLON;
            }
          case 173: break;
          case 17: 
            { return LT;
            }
          case 174: break;
          case 18: 
            { return GT;
            }
          case 175: break;
          case 19: 
            { return PARAMETER;
            }
          case 176: break;
          case 20: 
            { return BAR;
            }
          case 177: break;
          case 21: 
            { return TILDE;
            }
          case 178: break;
          case 22: 
            { return BRACKET_LITERAL;
            }
          case 179: break;
          case 23: 
            { return COMMENT;
            }
          case 180: break;
          case 24: 
            { return LINE_COMMENT;
            }
          case 181: break;
          case 25: 
            { return PARAMETER_NAME;
            }
          case 182: break;
          case 26: 
            { return STRING_LITERAL;
            }
          case 183: break;
          case 27: 
            { return NOT_EQ;
            }
          case 184: break;
          case 28: 
            { return EQEQ;
            }
          case 185: break;
          case 29: 
            { return LTE;
            }
          case 186: break;
          case 30: 
            { return SHL;
            }
          case 187: break;
          case 31: 
            { return UNEQ;
            }
          case 188: break;
          case 32: 
            { return GTE;
            }
          case 189: break;
          case 33: 
            { return SHR;
            }
          case 190: break;
          case 34: 
            { return AS;
            }
          case 191: break;
          case 35: 
            { return BY;
            }
          case 192: break;
          case 36: 
            { return OF;
            }
          case 193: break;
          case 37: 
            { return OR;
            }
          case 194: break;
          case 38: 
            { return ON;
            }
          case 195: break;
          case 39: 
            { return TO;
            }
          case 196: break;
          case 40: 
            { return IF;
            }
          case 197: break;
          case 41: 
            { return IN;
            }
          case 198: break;
          case 42: 
            { return IS;
            }
          case 199: break;
          case 43: 
            { return NO;
            }
          case 200: break;
          case 44: 
            { return CONCAT;
            }
          case 201: break;
          case 45: 
            { return END;
            }
          case 202: break;
          case 46: 
            { return FOR;
            }
          case 203: break;
          case 47: 
            { return AND;
            }
          case 204: break;
          case 48: 
            { return ADD;
            }
          case 205: break;
          case 49: 
            { return ALL;
            }
          case 206: break;
          case 50: 
            { return ASC;
            }
          case 207: break;
          case 51: 
            { return ROW;
            }
          case 208: break;
          case 52: 
            { return NOT;
            }
          case 209: break;
          case 53: 
            { return SET;
            }
          case 210: break;
          case 54: 
            { return KEY;
            }
          case 211: break;
          case 55: 
            { return EACH;
            }
          case 212: break;
          case 56: 
            { return ELSE;
            }
          case 213: break;
          case 57: 
            { return FAIL;
            }
          case 214: break;
          case 58: 
            { return FROM;
            }
          case 215: break;
          case 59: 
            { return TEMP;
            }
          case 216: break;
          case 60: 
            { return THEN;
            }
          case 217: break;
          case 61: 
            { return CASE;
            }
          case 218: break;
          case 62: 
            { return CAST;
            }
          case 219: break;
          case 63: 
            { return INTO;
            }
          case 220: break;
          case 64: 
            { return NULL;
            }
          case 221: break;
          case 65: 
            { return DESC;
            }
          case 222: break;
          case 66: 
            { return DROP;
            }
          case 223: break;
          case 67: 
            { return LEFT;
            }
          case 224: break;
          case 68: 
            { return LIKE;
            }
          case 225: break;
          case 69: 
            { return GLOB;
            }
          case 226: break;
          case 70: 
            { return WITH;
            }
          case 227: break;
          case 71: 
            { return WHEN;
            }
          case 228: break;
          case 72: 
            { return PLAN;
            }
          case 229: break;
          case 73: 
            { return VIEW;
            }
          case 230: break;
          case 74: 
            { return JOIN;
            }
          case 231: break;
          case 75: 
            { return AFTER;
            }
          case 232: break;
          case 76: 
            { return ABORT;
            }
          case 233: break;
          case 77: 
            { return ALTER;
            }
          case 234: break;
          case 78: 
            { return BEGIN;
            }
          case 235: break;
          case 79: 
            { return ORDER;
            }
          case 236: break;
          case 80: 
            { return OUTER;
            }
          case 237: break;
          case 81: 
            { return RAISE;
            }
          case 238: break;
          case 82: 
            { return ROWID;
            }
          case 239: break;
          case 83: 
            { return TABLE;
            }
          case 240: break;
          case 84: 
            { return CROSS;
            }
          case 241: break;
          case 85: 
            { return CHECK;
            }
          case 242: break;
          case 86: 
            { return INNER;
            }
          case 243: break;
          case 87: 
            { return INDEX;
            }
          case 244: break;
          case 88: 
            { return LIMIT;
            }
          case 245: break;
          case 89: 
            { return UNION;
            }
          case 246: break;
          case 90: 
            { return USING;
            }
          case 247: break;
          case 91: 
            { return MATCH;
            }
          case 248: break;
          case 92: 
            { return GROUP;
            }
          case 249: break;
          case 93: 
            { return WHERE;
            }
          case 250: break;
          case 94: 
            { return QUERY;
            }
          case 251: break;
          case 95: 
            { return EXCEPT;
            }
          case 252: break;
          case 96: 
            { return EXISTS;
            }
          case 253: break;
          case 97: 
            { return ESCAPE;
            }
          case 254: break;
          case 98: 
            { return ATTACH;
            }
          case 255: break;
          case 99: 
            { return ACTION;
            }
          case 256: break;
          case 100: 
            { return BEFORE;
            }
          case 257: break;
          case 101: 
            { return OFFSET;
            }
          case 258: break;
          case 102: 
            { return RENAME;
            }
          case 259: break;
          case 103: 
            { return REGEXP;
            }
          case 260: break;
          case 104: 
            { return COLUMN;
            }
          case 261: break;
          case 105: 
            { return COMMIT;
            }
          case 262: break;
          case 106: 
            { return CREATE;
            }
          case 263: break;
          case 107: 
            { return INSERT;
            }
          case 264: break;
          case 108: 
            { return ISNULL;
            }
          case 265: break;
          case 109: 
            { return IGNORE;
            }
          case 266: break;
          case 110: 
            { return DETACH;
            }
          case 267: break;
          case 111: 
            { return DELETE;
            }
          case 268: break;
          case 112: 
            { return SELECT;
            }
          case 269: break;
          case 113: 
            { return HAVING;
            }
          case 270: break;
          case 114: 
            { return UNIQUE;
            }
          case 271: break;
          case 115: 
            { return UPDATE;
            }
          case 272: break;
          case 116: 
            { return PRAGMA;
            }
          case 273: break;
          case 117: 
            { return VACUUM;
            }
          case 274: break;
          case 118: 
            { return VALUES;
            }
          case 275: break;
          case 119: 
            { return EXPLAIN;
            }
          case 276: break;
          case 120: 
            { return FOREIGN;
            }
          case 277: break;
          case 121: 
            { return ANALYZE;
            }
          case 278: break;
          case 122: 
            { return BETWEEN;
            }
          case 279: break;
          case 123: 
            { return REINDEX;
            }
          case 280: break;
          case 124: 
            { return RELEASE;
            }
          case 281: break;
          case 125: 
            { return REPLACE;
            }
          case 282: break;
          case 126: 
            { return TRIGGER;
            }
          case 283: break;
          case 127: 
            { return CASCADE;
            }
          case 284: break;
          case 128: 
            { return COLLATE;
            }
          case 285: break;
          case 129: 
            { return INDEXED;
            }
          case 286: break;
          case 130: 
            { return INSTEAD;
            }
          case 287: break;
          case 131: 
            { return NATURAL;
            }
          case 288: break;
          case 132: 
            { return NOTNULL;
            }
          case 289: break;
          case 133: 
            { return DEFAULT;
            }
          case 290: break;
          case 134: 
            { return WITHOUT;
            }
          case 291: break;
          case 135: 
            { return PRIMARY;
            }
          case 292: break;
          case 136: 
            { return VIRTUAL;
            }
          case 293: break;
          case 137: 
            { return RESTRICT;
            }
          case 294: break;
          case 138: 
            { return ROLLBACK;
            }
          case 295: break;
          case 139: 
            { return CONFLICT;
            }
          case 296: break;
          case 140: 
            { return DEFERRED;
            }
          case 297: break;
          case 141: 
            { return DATABASE;
            }
          case 298: break;
          case 142: 
            { return DISTINCT;
            }
          case 299: break;
          case 143: 
            { return EXCLUSIVE;
            }
          case 300: break;
          case 144: 
            { return RECURSIVE;
            }
          case 301: break;
          case 145: 
            { return TEMPORARY;
            }
          case 302: break;
          case 146: 
            { return INTERSECT;
            }
          case 303: break;
          case 147: 
            { return INITIALLY;
            }
          case 304: break;
          case 148: 
            { return IMMEDIATE;
            }
          case 305: break;
          case 149: 
            { return SAVEPOINT;
            }
          case 306: break;
          case 150: 
            { return REFERENCES;
            }
          case 307: break;
          case 151: 
            { return CONSTRAINT;
            }
          case 308: break;
          case 152: 
            { return DEFERRABLE;
            }
          case 309: break;
          case 153: 
            { return TRANSACTION;
            }
          case 310: break;
          case 154: 
            { return CURRENT_TIME;
            }
          case 311: break;
          case 155: 
            { return CURRENT_DATE;
            }
          case 312: break;
          case 156: 
            { return AUTOINCREMENT;
            }
          case 313: break;
          case 157: 
            { return CURRENT_TIMESTAMP;
            }
          case 314: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
