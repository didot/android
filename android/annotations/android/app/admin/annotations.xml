<?xml version="1.0" encoding="UTF-8"?>
<root>
  <item name="android.app.admin.DeviceAdminInfo android.content.ComponentName getComponent()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DeviceAdminReceiver ACTION_DEVICE_ADMIN_DISABLED">
    <annotation name="android.support.annotation.BroadcastBehavior">
      <val name="explicitOnly" val="true" />
    </annotation>
  </item>
  <item name="android.app.admin.DeviceAdminReceiver ACTION_DEVICE_ADMIN_DISABLE_REQUESTED">
    <annotation name="android.support.annotation.BroadcastBehavior">
      <val name="explicitOnly" val="true" />
    </annotation>
  </item>
  <item name="android.app.admin.DeviceAdminReceiver ACTION_DEVICE_ADMIN_ENABLED">
    <annotation name="android.support.annotation.BroadcastBehavior">
      <val name="explicitOnly" val="true" />
    </annotation>
  </item>
  <item name="android.app.admin.DeviceAdminReceiver ACTION_LOCK_TASK_ENTERING">
    <annotation name="android.support.annotation.BroadcastBehavior">
      <val name="explicitOnly" val="true" />
    </annotation>
  </item>
  <item name="android.app.admin.DeviceAdminReceiver ACTION_LOCK_TASK_EXITING">
    <annotation name="android.support.annotation.BroadcastBehavior">
      <val name="explicitOnly" val="true" />
    </annotation>
  </item>
  <item name="android.app.admin.DeviceAdminReceiver ACTION_PASSWORD_CHANGED">
    <annotation name="android.support.annotation.BroadcastBehavior">
      <val name="explicitOnly" val="true" />
    </annotation>
  </item>
  <item name="android.app.admin.DeviceAdminReceiver ACTION_PASSWORD_EXPIRING">
    <annotation name="android.support.annotation.BroadcastBehavior">
      <val name="explicitOnly" val="true" />
    </annotation>
  </item>
  <item name="android.app.admin.DeviceAdminReceiver ACTION_PASSWORD_FAILED">
    <annotation name="android.support.annotation.BroadcastBehavior">
      <val name="explicitOnly" val="true" />
    </annotation>
  </item>
  <item name="android.app.admin.DeviceAdminReceiver ACTION_PASSWORD_SUCCEEDED">
    <annotation name="android.support.annotation.BroadcastBehavior">
      <val name="explicitOnly" val="true" />
    </annotation>
  </item>
  <item name="android.app.admin.DeviceAdminReceiver ACTION_PROFILE_PROVISIONING_COMPLETE">
    <annotation name="android.support.annotation.BroadcastBehavior">
      <val name="explicitOnly" val="true" />
    </annotation>
  </item>
  <item name="android.app.admin.DeviceAdminReceiver void onBugreportFailed(android.content.Context, android.content.Intent, int) 2">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.app.admin.DeviceAdminReceiver.BUGREPORT_FAILURE_FAILED_COMPLETING, android.app.admin.DeviceAdminReceiver.BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE}" />
    </annotation>
  </item>
  <item name="android.app.admin.DevicePolicyManager android.app.admin.DevicePolicyManager getParentProfileInstance(android.content.ComponentName)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager android.app.admin.DevicePolicyManager getParentProfileInstance(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager android.os.Bundle getApplicationRestrictions(android.content.ComponentName, java.lang.String)">
    <annotation name="android.support.annotation.WorkerThread" />
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager android.os.Bundle getApplicationRestrictions(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager android.os.Bundle getUserRestrictions(android.content.ComponentName)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager android.os.Bundle getUserRestrictions(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager android.os.UserHandle createAndManageUser(android.content.ComponentName, java.lang.String, android.content.ComponentName, android.os.PersistableBundle, int)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager android.os.UserHandle createAndManageUser(android.content.ComponentName, java.lang.String, android.content.ComponentName, android.os.PersistableBundle, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager android.os.UserHandle createAndManageUser(android.content.ComponentName, java.lang.String, android.content.ComponentName, android.os.PersistableBundle, int) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager android.os.UserHandle createAndManageUser(android.content.ComponentName, java.lang.String, android.content.ComponentName, android.os.PersistableBundle, int) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager android.os.UserHandle createAndManageUser(android.content.ComponentName, java.lang.String, android.content.ComponentName, android.os.PersistableBundle, int) 3">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean addCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean getBluetoothContactSharingDisabled(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean getCameraDisabled(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean getCrossProfileCallerIdDisabled(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean getScreenCaptureDisabled(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean getStorageEncryption(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean hasCaCertInstalled(android.content.ComponentName, byte[]) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean hasGrantedPolicy(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean installCaCert(android.content.ComponentName, byte[]) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate, java.lang.String) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate, java.lang.String) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate, java.lang.String) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate, java.lang.String) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate[], java.lang.String, boolean) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate[], java.lang.String, boolean) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate[], java.lang.String, boolean) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean installKeyPair(android.content.ComponentName, java.security.PrivateKey, java.security.cert.Certificate[], java.lang.String, boolean) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean isAdminActive(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean isApplicationHidden(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean isManagedProfile(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean isMasterVolumeMuted(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean isPackageSuspended(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean isProvisioningAllowed(java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean isSecurityLoggingEnabled(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean isUninstallBlocked(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean removeCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean removeKeyPair(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean removeKeyPair(android.content.ComponentName, java.lang.String) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean removeUser(android.content.ComponentName, android.os.UserHandle) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean requestBugreport(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean setApplicationHidden(android.content.ComponentName, java.lang.String, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean setKeyguardDisabled(android.content.ComponentName, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean setPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean setPermittedAccessibilityServices(android.content.ComponentName, java.util.List&lt;java.lang.String&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean setPermittedInputMethods(android.content.ComponentName, java.util.List&lt;java.lang.String&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean setStatusBarDisabled(android.content.ComponentName, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean switchUser(android.content.ComponentName, android.os.UserHandle) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager boolean switchUser(android.content.ComponentName, android.os.UserHandle) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int enableSystemApp(android.content.ComponentName, android.content.Intent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getKeyguardDisabledFeatures(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getMaximumFailedPasswordsForWipe(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getOrganizationColor(android.content.ComponentName)">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getOrganizationColor(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getPasswordHistoryLength(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getPasswordMinimumLength(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getPasswordMinimumLetters(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getPasswordMinimumLowerCase(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getPasswordMinimumNonLetter(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getPasswordMinimumNumeric(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getPasswordMinimumSymbols(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getPasswordMinimumUpperCase(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getPasswordQuality(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int getPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager int setStorageEncryption(android.content.ComponentName, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.CharSequence getLongSupportMessage(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.CharSequence getOrganizationName(android.content.ComponentName)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.CharSequence getOrganizationName(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.CharSequence getShortSupportMessage(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.String getCertInstallerPackage(android.content.ComponentName)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.String getCertInstallerPackage(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.String getWifiMacAddress(android.content.ComponentName)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.String getWifiMacAddress(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.String[] getAccountTypesWithManagementDisabled()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.String[] setPackagesSuspended(android.content.ComponentName, java.lang.String[], boolean)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.String[] setPackagesSuspended(android.content.ComponentName, java.lang.String[], boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.lang.String[] setPackagesSuspended(android.content.ComponentName, java.lang.String[], boolean) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;android.app.admin.SecurityLog.SecurityEvent&gt; retrievePreRebootSecurityLogs(android.content.ComponentName)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;android.app.admin.SecurityLog.SecurityEvent&gt; retrievePreRebootSecurityLogs(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;android.app.admin.SecurityLog.SecurityEvent&gt; retrieveSecurityLogs(android.content.ComponentName)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;android.app.admin.SecurityLog.SecurityEvent&gt; retrieveSecurityLogs(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;android.content.ComponentName&gt; getActiveAdmins()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;android.os.PersistableBundle&gt; getTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;android.os.PersistableBundle&gt; getTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;android.os.PersistableBundle&gt; getTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;byte[]&gt; getInstalledCaCerts(android.content.ComponentName)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;byte[]&gt; getInstalledCaCerts(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;java.lang.String&gt; getCrossProfileWidgetProviders(android.content.ComponentName)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;java.lang.String&gt; getCrossProfileWidgetProviders(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;java.lang.String&gt; getPermittedAccessibilityServices(android.content.ComponentName)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;java.lang.String&gt; getPermittedAccessibilityServices(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;java.lang.String&gt; getPermittedInputMethods(android.content.ComponentName)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager java.util.List&lt;java.lang.String&gt; getPermittedInputMethods(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager long getMaximumTimeToLock(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager long getPasswordExpiration(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager long getPasswordExpirationTimeout(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void addCrossProfileIntentFilter(android.content.ComponentName, android.content.IntentFilter, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void addPersistentPreferredActivity(android.content.ComponentName, android.content.IntentFilter, android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void addPersistentPreferredActivity(android.content.ComponentName, android.content.IntentFilter, android.content.ComponentName) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void addUserRestriction(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void clearCrossProfileIntentFilters(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void clearPackagePersistentPreferredActivities(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void clearProfileOwner(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void clearUserRestriction(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void enableSystemApp(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void reboot(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void removeActiveAdmin(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setAccountManagementDisabled(android.content.ComponentName, java.lang.String, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setAlwaysOnVpnPackage(android.content.ComponentName, java.lang.String, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setAlwaysOnVpnPackage(android.content.ComponentName, java.lang.String, boolean) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setApplicationRestrictions(android.content.ComponentName, java.lang.String, android.os.Bundle)">
    <annotation name="android.support.annotation.WorkerThread" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setApplicationRestrictions(android.content.ComponentName, java.lang.String, android.os.Bundle) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setApplicationRestrictionsManagingPackage(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setApplicationRestrictionsManagingPackage(android.content.ComponentName, java.lang.String) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setAutoTimeRequired(android.content.ComponentName, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setBluetoothContactSharingDisabled(android.content.ComponentName, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setCameraDisabled(android.content.ComponentName, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setCertInstallerPackage(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setCertInstallerPackage(android.content.ComponentName, java.lang.String) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setCrossProfileCallerIdDisabled(android.content.ComponentName, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setCrossProfileContactsSearchDisabled(android.content.ComponentName, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setDeviceOwnerLockScreenInfo(android.content.ComponentName, java.lang.CharSequence) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setGlobalSetting(android.content.ComponentName, java.lang.String, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setKeyguardDisabledFeatures(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setLockTaskPackages(android.content.ComponentName, java.lang.String[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setLockTaskPackages(android.content.ComponentName, java.lang.String[]) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setLongSupportMessage(android.content.ComponentName, java.lang.CharSequence) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setLongSupportMessage(android.content.ComponentName, java.lang.CharSequence) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setMasterVolumeMuted(android.content.ComponentName, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setMaximumFailedPasswordsForWipe(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setMaximumTimeToLock(android.content.ComponentName, long) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setOrganizationColor(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setOrganizationName(android.content.ComponentName, java.lang.CharSequence) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setOrganizationName(android.content.ComponentName, java.lang.CharSequence) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setPasswordExpirationTimeout(android.content.ComponentName, long) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setPasswordHistoryLength(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setPasswordMinimumLength(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setPasswordMinimumLetters(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setPasswordMinimumLowerCase(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setPasswordMinimumNonLetter(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setPasswordMinimumNumeric(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setPasswordMinimumSymbols(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setPasswordMinimumUpperCase(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setPasswordQuality(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setPermissionPolicy(android.content.ComponentName, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setProfileEnabled(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setProfileName(android.content.ComponentName, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setRecommendedGlobalProxy(android.content.ComponentName, android.net.ProxyInfo) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setRecommendedGlobalProxy(android.content.ComponentName, android.net.ProxyInfo) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setRestrictionsProvider(android.content.ComponentName, android.content.ComponentName) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setRestrictionsProvider(android.content.ComponentName, android.content.ComponentName) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setScreenCaptureDisabled(android.content.ComponentName, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setSecureSetting(android.content.ComponentName, java.lang.String, java.lang.String) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setSecurityLoggingEnabled(android.content.ComponentName, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setShortSupportMessage(android.content.ComponentName, java.lang.CharSequence) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setShortSupportMessage(android.content.ComponentName, java.lang.CharSequence) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setSystemUpdatePolicy(android.content.ComponentName, android.app.admin.SystemUpdatePolicy) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName, android.os.PersistableBundle) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName, android.os.PersistableBundle) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setUninstallBlocked(android.content.ComponentName, java.lang.String, boolean) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void setUserIcon(android.content.ComponentName, android.graphics.Bitmap) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void uninstallAllUserCaCerts(android.content.ComponentName) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.DevicePolicyManager void uninstallCaCert(android.content.ComponentName, byte[]) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.app.admin.SecurityLog.SecurityEvent int getTag()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.app.admin.SecurityLog.TAG_ADB_SHELL_INTERACTIVE, android.app.admin.SecurityLog.TAG_ADB_SHELL_CMD, android.app.admin.SecurityLog.TAG_SYNC_RECV_FILE, android.app.admin.SecurityLog.TAG_SYNC_SEND_FILE, android.app.admin.SecurityLog.TAG_APP_PROCESS_START, android.app.admin.SecurityLog.TAG_KEYGUARD_DISMISSED, android.app.admin.SecurityLog.TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT, android.app.admin.SecurityLog.TAG_KEYGUARD_SECURED}" />
    </annotation>
  </item>
  <item name="android.app.admin.SystemUpdatePolicy int getPolicyType()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.app.admin.SystemUpdatePolicy.TYPE_INSTALL_AUTOMATIC, android.app.admin.SystemUpdatePolicy.TYPE_INSTALL_WINDOWED, android.app.admin.SystemUpdatePolicy.TYPE_POSTPONE}" />
    </annotation>
  </item>
</root>

