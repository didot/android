/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.tools.idea.res

import com.android.SdkConstants
import com.android.utils.concurrency.CacheUtils
import com.google.common.base.MoreObjects
import com.google.common.cache.Cache
import com.google.common.cache.CacheBuilder
import com.intellij.openapi.components.ServiceManager
import com.intellij.openapi.project.Project
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.psi.*
import com.intellij.psi.impl.file.PsiPackageImpl
import com.intellij.psi.search.GlobalSearchScope
import com.intellij.psi.search.PsiSearchScopeUtil

/**
 * A light [PsiPackage] for classes generated by aapt.
 */
class AndroidLightPackage private constructor(
  manager: PsiManager,
  qualifiedName: String
) : PsiPackageImpl(manager, qualifiedName) {

  companion object {
    @JvmStatic
    fun withName(packageName: String, project: Project): PsiPackage {
      return ServiceManager.getService(project, InstanceCache::class.java).get(packageName)
    }
  }

  override fun isValid(): Boolean {
    return true
  }

  override fun canNavigate(): Boolean {
    return false
  }

  override fun toString(): String {
    return MoreObjects.toStringHelper(this).addValue(qualifiedName).toString()
  }

  /**
   * Finds classes with the given short name in this package in the given scope.
   *
   * Naive implementation that just calls [JavaPsiFacade] which in turn will call [PsiElementFinder] implementations.
   * [PsiPackageImpl] maintains a cached copy of all classes in this package in the entire project (ignoring scope) and then filters
   * it using [PsiSearchScopeUtil.isInScope]. This doesn't work in our case, because R classes in this
   * package are light and don't have corresponding [VirtualFile]s so [PsiSearchScopeUtil] always thinks they are in scope.
   *
   * When delegating to [JavaPsiFacade], the scope is handled in the implementations of [LightResourceClassService].
   *
   * @see ProjectLightResourceClassService.getLightRClasses
   */
  override fun findClassByShortName(name: String, scope: GlobalSearchScope): Array<PsiClass> {
    return if (name == SdkConstants.R_CLASS || name == SdkConstants.FN_MANIFEST_BASE) {
      JavaPsiFacade.getInstance(project).findClasses("$qualifiedName.${name}", scope)
    }
    else {
      PsiClass.EMPTY_ARRAY
    }
  }

  /**
   * Project service responsible for interning instances of [AndroidLightPackage] with a given name.
   */
  class InstanceCache(private val psiManager: PsiManager) {
    /**
     * Cache of [PsiPackage] instances for a given package name.
     */
    private val packageCache: Cache<String, PsiPackage> = CacheBuilder.newBuilder().softValues().build()

    fun get(name: String): PsiPackage = CacheUtils.getAndUnwrap(packageCache, name) { AndroidLightPackage(psiManager, name) }
  }
}

