/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service;

import com.android.tools.idea.editors.gfxtrace.service.msg.Msg;
import com.android.tools.rpclib.schema.*;
import com.android.tools.idea.editors.gfxtrace.service.log.LogProtos.Severity;
import com.android.tools.rpclib.binary.*;
import org.jetbrains.annotations.NotNull;

import java.io.IOException;

public final class ReportItem implements BinaryObject {
  //<<<Start:Java.ClassBody:1>>>
  private Severity mySeverity;
  private MsgRef myMessage;
  private long myAtom;
  private MsgRef[] myTags;

  // Constructs a default-initialized {@link ReportItem}.
  public ReportItem() {}


  public Severity getSeverity() {
    return mySeverity;
  }

  public ReportItem setSeverity(Severity v) {
    mySeverity = v;
    return this;
  }

  public MsgRef getMessage() {
    return myMessage;
  }

  public ReportItem setMessage(MsgRef v) {
    myMessage = v;
    return this;
  }

  public long getAtom() {
    return myAtom;
  }

  public ReportItem setAtom(long v) {
    myAtom = v;
    return this;
  }

  public MsgRef[] getTags() {
    return myTags;
  }

  public ReportItem setTags(MsgRef[] v) {
    myTags = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }


  private static final Entity ENTITY = new Entity("service", "ReportItem", "", "");

  static {
    ENTITY.setFields(new Field[]{
      new Field("Severity", new Primitive("log.Severity", Method.Int32)),
      new Field("Message", new Pointer(new Struct(MsgRef.Klass.INSTANCE.entity()))),
      new Field("Atom", new Primitive("uint64", Method.Uint64)),
      new Field("Tags", new Slice("", new Struct(MsgRef.Klass.INSTANCE.entity()))),
    });
    Namespace.register(Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public Entity entity() { return ENTITY; }

    @Override @NotNull
    public BinaryObject create() { return new ReportItem(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      ReportItem o = (ReportItem)obj;
      e.int32(o.mySeverity.getNumber());
      e.object(o.myMessage);
      e.uint64(o.myAtom);
      e.uint32(o.myTags.length);
      for (int i = 0; i < o.myTags.length; i++) {
        e.value(o.myTags[i]);
      }
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      ReportItem o = (ReportItem)obj;
      o.mySeverity = Severity.valueOf(d.int32());
      o.myMessage = (MsgRef)d.object();
      o.myAtom = d.uint64();
      o.myTags = new MsgRef[d.uint32()];
      for (int i = 0; i <o.myTags.length; i++) {
        o.myTags[i] = new MsgRef();
        d.value(o.myTags[i]);
      }
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
