/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service.path;

import com.android.tools.rpclib.binary.*;
import org.jetbrains.annotations.NotNull;

import java.io.IOException;

public final class ReportPath extends Path {
  @Override
  public StringBuilder stringPath(StringBuilder builder) {
    return myCapture.stringPath(builder).append(".Report");
  }

  //<<<Start:Java.ClassBody:1>>>
  private CapturePath myCapture;
  private DevicePath myDevice;

  // Constructs a default-initialized {@link ReportPath}.
  public ReportPath() {}


  public CapturePath getCapture() {
    return myCapture;
  }

  public ReportPath setCapture(CapturePath v) {
    myCapture = v;
    return this;
  }

  public DevicePath getDevice() {
    return myDevice;
  }

  public ReportPath setDevice(DevicePath v) {
    myDevice = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }

  private static final byte[] IDBytes = {-2, 16, -123, 67, -30, -127, -35, 16, 68, -72, 125, 30, -56, -3, 53, -17, 20, -119, 122, 36, };
  public static final BinaryID ID = new BinaryID(IDBytes);

  static {
    Namespace.register(ID, Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public BinaryID id() { return ID; }

    @Override @NotNull
    public BinaryObject create() { return new ReportPath(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      ReportPath o = (ReportPath)obj;
      e.object(o.myCapture);
      e.object(o.myDevice);
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      ReportPath o = (ReportPath)obj;
      o.myCapture = (CapturePath)d.object();
      o.myDevice = (DevicePath)d.object();
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
