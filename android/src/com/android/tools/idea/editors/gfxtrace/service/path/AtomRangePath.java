/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service.path;

import com.android.tools.idea.editors.gfxtrace.service.atom.Range;
import org.jetbrains.annotations.NotNull;

import com.android.tools.rpclib.binary.*;
import com.android.tools.rpclib.schema.*;

import java.io.IOException;

public final class AtomRangePath extends Path {
  @Override
  public String getSegmentString() {
    return '[' + String.valueOf(myFirst) + " - " + String.valueOf(myFirst + myCount) + ']';
  }

  @Override
  public void appendSegmentToPath(StringBuilder builder) {
    builder.append(getSegmentString());
  }

  @Override
  public AtomsPath getParent() {
    return myAtoms;
  }

  public long getLast() {
    return myFirst + myCount - 1;
  }

  public AtomPath getPathToFirst() {
    return myAtoms.index(getFirst());
  }

  public AtomPath getPathToLast() {
    return myAtoms.index(getLast());
  }

  public Range getRange() {
    return new Range().setStart(myFirst).setEnd(myFirst + myCount);
  }

  public StatePath stateAfterLast() {
    return getPathToLast().stateAfter();
  }

  public static StatePath stateAfterLast(AtomRangePath atomPath) {
    return (atomPath == null) ? null : atomPath.stateAfterLast();
  }

  //<<<Start:Java.ClassBody:1>>>
  private AtomsPath myAtoms;
  private long myFirst;
  private long myCount;

  // Constructs a default-initialized {@link AtomRangePath}.
  public AtomRangePath() {}


  public AtomsPath getAtoms() {
    return myAtoms;
  }

  public AtomRangePath setAtoms(AtomsPath v) {
    myAtoms = v;
    return this;
  }

  public long getFirst() {
    return myFirst;
  }

  public AtomRangePath setFirst(long v) {
    myFirst = v;
    return this;
  }

  public long getCount() {
    return myCount;
  }

  public AtomRangePath setCount(long v) {
    myCount = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }


  private static final Entity ENTITY = new Entity("path", "AtomRange", "", "");

  static {
    ENTITY.setFields(new Field[]{
      new Field("Atoms", new Pointer(new Struct(AtomsPath.Klass.INSTANCE.entity()))),
      new Field("First", new Primitive("uint64", Method.Uint64)),
      new Field("Count", new Primitive("uint64", Method.Uint64)),
    });
    Namespace.register(Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public Entity entity() { return ENTITY; }

    @Override @NotNull
    public BinaryObject create() { return new AtomRangePath(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      AtomRangePath o = (AtomRangePath)obj;
      e.object(o.myAtoms);
      e.uint64(o.myFirst);
      e.uint64(o.myCount);
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      AtomRangePath o = (AtomRangePath)obj;
      o.myAtoms = (AtomsPath)d.object();
      o.myFirst = d.uint64();
      o.myCount = d.uint64();
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
