/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service.path;

import org.jetbrains.annotations.NotNull;

import com.android.tools.rpclib.binary.*;
import com.android.tools.rpclib.schema.*;

import java.io.IOException;

public final class MemoryType implements BinaryObject {
  //<<<Start:Java.ClassBody:1>>>
  private MemoryKind myKind;
  private long myByteSize;
  private boolean mySigned;
  private MemoryType myTo;

  // Constructs a default-initialized {@link MemoryType}.
  public MemoryType() {}


  public MemoryKind getKind() {
    return myKind;
  }

  public MemoryType setKind(MemoryKind v) {
    myKind = v;
    return this;
  }

  public long getByteSize() {
    return myByteSize;
  }

  public MemoryType setByteSize(long v) {
    myByteSize = v;
    return this;
  }

  public boolean getSigned() {
    return mySigned;
  }

  public MemoryType setSigned(boolean v) {
    mySigned = v;
    return this;
  }

  public MemoryType getTo() {
    return myTo;
  }

  public MemoryType setTo(MemoryType v) {
    myTo = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }


  private static final Entity ENTITY = new Entity("path", "MemoryType", "", "");

  static {
    ENTITY.setFields(new Field[]{
      new Field("Kind", new Primitive("MemoryKind", Method.Int32)),
      new Field("ByteSize", new Primitive("uint64", Method.Uint64)),
      new Field("Signed", new Primitive("bool", Method.Bool)),
      new Field("To", new Pointer(new Struct(MemoryType.Klass.INSTANCE.entity()))),
    });
    Namespace.register(Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public String toString() {
    switch (myKind.getValue()) {
      case MemoryKind.VoidValue:
        return "Void";
      case MemoryKind.CharValue:
        return "Char";
      case MemoryKind.FloatValue:
        return String.format("%s(%d)", myKind, myByteSize);
      case MemoryKind.AddressValue:
        return String.format("%s(To:%s)", myKind, myTo);
      case MemoryKind.IntegerValue:
        if (myByteSize == 0) {
          return String.format("%s(Signed:%b)", myKind, mySigned);
        } else {
          return String.format("%s(ByteSize:%d,Signed:%b)", myKind, myByteSize, mySigned);
        }
      default:
        return String.format("MemoryType<invalid-kind(%d)>", myKind.getValue());
    }
  }

  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public Entity entity() { return ENTITY; }

    @Override @NotNull
    public BinaryObject create() { return new MemoryType(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      MemoryType o = (MemoryType)obj;
      o.myKind.encode(e);
      e.uint64(o.myByteSize);
      e.bool(o.mySigned);
      e.object(o.myTo);
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      MemoryType o = (MemoryType)obj;
      o.myKind = MemoryKind.decode(d);
      o.myByteSize = d.uint64();
      o.mySigned = d.bool();
      o.myTo = (MemoryType)d.object();
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
