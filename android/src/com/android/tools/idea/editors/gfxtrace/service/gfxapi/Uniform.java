/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service.gfxapi;

import org.jetbrains.annotations.NotNull;

import com.android.tools.idea.editors.gfxtrace.service.gfxapi.GfxAPIProtos.UniformType;
import com.android.tools.idea.editors.gfxtrace.service.gfxapi.GfxAPIProtos.UniformFormat;
import com.android.tools.rpclib.binary.*;
import com.android.tools.rpclib.schema.*;
import com.android.tools.rpclib.any.Box;

import java.io.IOException;

public final class Uniform implements BinaryObject {
  //<<<Start:Java.ClassBody:1>>>
  private int myUniformLocation;
  private String myName;
  private UniformFormat myFormat;
  private UniformType myType;
  private Object myValue;

  // Constructs a default-initialized {@link Uniform}.
  public Uniform() {}


  public int getUniformLocation() {
    return myUniformLocation;
  }

  public Uniform setUniformLocation(int v) {
    myUniformLocation = v;
    return this;
  }

  public String getName() {
    return myName;
  }

  public Uniform setName(String v) {
    myName = v;
    return this;
  }

  public UniformFormat getFormat() {
    return myFormat;
  }

  public Uniform setFormat(UniformFormat v) {
    myFormat = v;
    return this;
  }

  public UniformType getType() {
    return myType;
  }

  public Uniform setType(UniformType v) {
    myType = v;
    return this;
  }

  public Object getValue() {
    return myValue;
  }

  public Uniform setValue(Object v) {
    myValue = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }


  private static final Entity ENTITY = new Entity("gfxapi", "Uniform", "", "");

  static {
    ENTITY.setFields(new Field[]{
      new Field("UniformLocation", new Primitive("uint32", Method.Uint32)),
      new Field("Name", new Primitive("string", Method.String)),
      new Field("Format", new Primitive("UniformFormat", Method.Int32)),
      new Field("Type", new Primitive("UniformType", Method.Int32)),
      new Field("Value", new AnyType()),
    });
    Namespace.register(Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public Entity entity() { return ENTITY; }

    @Override @NotNull
    public BinaryObject create() { return new Uniform(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      Uniform o = (Uniform)obj;
      e.uint32(o.myUniformLocation);
      e.string(o.myName);
      e.int32(o.myFormat.getNumber());
      e.int32(o.myType.getNumber());
      e.variant(Box.wrap(o.myValue));
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      Uniform o = (Uniform)obj;
      o.myUniformLocation = d.uint32();
      o.myName = d.string();
      o.myFormat = UniformFormat.valueOf(d.int32());
      o.myType = UniformType.valueOf(d.int32());
      o.myValue = ((Box)d.variant()).unwrap();
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
