/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service;

import org.jetbrains.annotations.NotNull;

import com.android.tools.rpclib.binary.*;
import com.android.tools.rpclib.schema.*;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;

public final class ContextList implements BinaryObject, Iterable<Context> {
  @Override
  public Iterator<Context> iterator() {
    return myContexts == null ? Collections.emptyIterator() : Arrays.asList(myContexts).iterator();
  }

  /** @return the number of contexts in this list */
  public int count() {
    return myContexts != null ? myContexts.length : 0;
  }

  /**
   * @return the {@link Context} in the ContextList with the specified ID, or {@param ifNotFound}
   *         if the list does not have a {@link Context} with the specified ID.
   */
  public Context find(ContextID id, Context ifNotFound) {
    for (Context context : this) {
      if (context.getID() == id) {
        return context;
      }
    }
    return ifNotFound;
  }

  //<<<Start:Java.ClassBody:1>>>
  private Context[] myContexts;

  // Constructs a default-initialized {@link ContextList}.
  public ContextList() {}


  public Context[] getContexts() {
    return myContexts;
  }

  public ContextList setContexts(Context[] v) {
    myContexts = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }


  private static final Entity ENTITY = new Entity("service", "ContextList", "", "");

  static {
    ENTITY.setFields(new Field[]{
      new Field("Contexts", new Slice("", new Struct(Context.Klass.INSTANCE.entity()))),
    });
    Namespace.register(Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public Entity entity() { return ENTITY; }

    @Override @NotNull
    public BinaryObject create() { return new ContextList(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      ContextList o = (ContextList)obj;
      e.uint32(o.myContexts.length);
      for (int i = 0; i < o.myContexts.length; i++) {
        e.value(o.myContexts[i]);
      }
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      ContextList o = (ContextList)obj;
      o.myContexts = new Context[d.uint32()];
      for (int i = 0; i <o.myContexts.length; i++) {
        o.myContexts[i] = new Context();
        d.value(o.myContexts[i]);
      }
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
