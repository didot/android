/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service.msg;

import com.android.tools.rpclib.binary.*;
import com.android.tools.rpclib.schema.*;
import org.jetbrains.annotations.NotNull;

import java.io.IOException;
import java.util.Arrays;
import java.util.stream.Collectors;

public final class Arg implements BinaryObject {

  public static java.util.Map<String, BinaryObject> constructMap(@NotNull final Arg[] args, @NotNull final int[] indices) {
    return Arrays.stream(indices).mapToObj(i -> args[i]).collect(Collectors.toMap(Arg::getKey, Arg::getValue));
  }

  public static void constructMap(@NotNull final Arg[] args,
                                  @NotNull final int[] indices,
                                  @NotNull java.util.Map<String, BinaryObject> map) {
    for (int i : indices) {
      map.put(args[i].getKey(), args[i].getValue());
    }
  }

  //<<<Start:Java.ClassBody:1>>>
  private String myKey;
  private BinaryObject myValue;

  // Constructs a default-initialized {@link Arg}.
  public Arg() {}


  public String getKey() {
    return myKey;
  }

  public Arg setKey(String v) {
    myKey = v;
    return this;
  }

  public BinaryObject getValue() {
    return myValue;
  }

  public Arg setValue(BinaryObject v) {
    myValue = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }


  private static final Entity ENTITY = new Entity("msg", "Arg", "", "");

  static {
    ENTITY.setFields(new Field[]{
      new Field("Key", new Primitive("string", Method.String)),
      new Field("Value", new Interface("binary.Object")),
    });
    Namespace.register(Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public Entity entity() { return ENTITY; }

    @Override @NotNull
    public BinaryObject create() { return new Arg(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      Arg o = (Arg)obj;
      e.string(o.myKey);
      e.object(o.myValue);
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      Arg o = (Arg)obj;
      o.myKey = d.string();
      o.myValue = d.object();
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
