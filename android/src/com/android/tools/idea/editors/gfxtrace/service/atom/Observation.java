/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service.atom;

import com.android.tools.idea.editors.gfxtrace.service.memory.MemoryRange;
import com.android.tools.rpclib.binary.*;
import org.jetbrains.annotations.NotNull;

import java.io.IOException;

public final class Observation implements BinaryObject {
  //<<<Start:Java.ClassBody:1>>>
  private MemoryRange myRange;
  private BinaryID myID;

  // Constructs a default-initialized {@link Observation}.
  public Observation() {}


  public MemoryRange getRange() {
    return myRange;
  }

  public Observation setRange(MemoryRange v) {
    myRange = v;
    return this;
  }

  public BinaryID getID() {
    return myID;
  }

  public Observation setID(BinaryID v) {
    myID = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }

  private static final byte[] IDBytes = {-9, -67, 86, -7, -120, 84, 58, -62, -109, 93, 103, -103, 30, -19, -86, 25, -102, -34, -54, 4, };
  public static final BinaryID ID = new BinaryID(IDBytes);

  static {
    Namespace.register(ID, Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public BinaryID id() { return ID; }

    @Override @NotNull
    public BinaryObject create() { return new Observation(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      Observation o = (Observation)obj;
      e.value(o.myRange);
      e.id(o.myID);
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      Observation o = (Observation)obj;
      o.myRange = new MemoryRange();
      d.value(o.myRange);
      o.myID = d.id();
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
