/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service;

import com.android.tools.idea.editors.gfxtrace.service.gfxapi.GfxAPIProtos.ResourceType;
import com.android.tools.rpclib.binary.*;
import com.android.tools.rpclib.schema.*;
import org.jetbrains.annotations.NotNull;

import java.io.IOException;

public final class ResourceBundle implements BinaryObject {
  //<<<Start:Java.ClassBody:1>>>
  private ResourceType myType;
  private ResourceInfo[] myResources;

  // Constructs a default-initialized {@link ResourceBundle}.
  public ResourceBundle() {}


  public ResourceType getType() {
    return myType;
  }

  public ResourceBundle setType(ResourceType v) {
    myType = v;
    return this;
  }

  public ResourceInfo[] getResources() {
    return myResources;
  }

  public ResourceBundle setResources(ResourceInfo[] v) {
    myResources = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }


  private static final Entity ENTITY = new Entity("service", "ResourceBundle", "", "");

  static {
    ENTITY.setFields(new Field[]{
      new Field("Type", new Primitive("gfxapi.ResourceType", Method.Int32)),
      new Field("Resources", new Slice("", new Struct(ResourceInfo.Klass.INSTANCE.entity()))),
    });
    Namespace.register(Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public Entity entity() { return ENTITY; }

    @Override @NotNull
    public BinaryObject create() { return new ResourceBundle(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      ResourceBundle o = (ResourceBundle)obj;
      e.int32(o.myType.getNumber());
      e.uint32(o.myResources.length);
      for (int i = 0; i < o.myResources.length; i++) {
        e.value(o.myResources[i]);
      }
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      ResourceBundle o = (ResourceBundle)obj;
      o.myType = ResourceType.valueOf(d.int32());
      o.myResources = new ResourceInfo[d.uint32()];
      for (int i = 0; i <o.myResources.length; i++) {
        o.myResources[i] = new ResourceInfo();
        d.value(o.myResources[i]);
      }
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
