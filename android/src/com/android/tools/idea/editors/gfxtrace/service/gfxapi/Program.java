/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY codergen. EDIT WITH CARE.
 */
package com.android.tools.idea.editors.gfxtrace.service.gfxapi;

import com.android.tools.idea.editors.gfxtrace.service.gfxapi.GfxAPIProtos.ShaderType;
import com.android.tools.idea.editors.gfxtrace.service.path.ResourceID;
import com.android.tools.rpclib.binary.*;
import com.android.tools.rpclib.schema.*;
import org.jetbrains.annotations.NotNull;

import java.io.IOException;
import java.util.LinkedHashMap;

public final class Program implements BinaryObject {
  //<<<Start:Java.ClassBody:1>>>
  private LinkedHashMap<ShaderType, ResourceID> myShaders;
  private Uniform[] myUniforms;

  // Constructs a default-initialized {@link Program}.
  public Program() {}


  public LinkedHashMap<ShaderType, ResourceID> getShaders() {
    return myShaders;
  }

  public Program setShaders(LinkedHashMap<ShaderType, ResourceID> v) {
    myShaders = v;
    return this;
  }

  public Uniform[] getUniforms() {
    return myUniforms;
  }

  public Program setUniforms(Uniform[] v) {
    myUniforms = v;
    return this;
  }

  @Override @NotNull
  public BinaryClass klass() { return Klass.INSTANCE; }


  private static final Entity ENTITY = new Entity("gfxapi", "Program", "", "");

  static {
    ENTITY.setFields(new Field[]{
      new Field("Shaders", new Map("ShaderTypeMap", new Primitive("ShaderType", Method.Int32), new Array("path.ResourceID", new Primitive("byte", Method.Uint8), 20))),
      new Field("Uniforms", new Slice("", new Struct(Uniform.Klass.INSTANCE.entity()))),
    });
    Namespace.register(Klass.INSTANCE);
  }
  public static void register() {}
  //<<<End:Java.ClassBody:1>>>
  public enum Klass implements BinaryClass {
    //<<<Start:Java.KlassBody:2>>>
    INSTANCE;

    @Override @NotNull
    public Entity entity() { return ENTITY; }

    @Override @NotNull
    public BinaryObject create() { return new Program(); }

    @Override
    public void encode(@NotNull Encoder e, BinaryObject obj) throws IOException {
      Program o = (Program)obj;
      e.uint32(o.myShaders.size());
      for (java.util.Map.Entry<ShaderType, ResourceID> entry : o.myShaders.entrySet()) {
        e.int32(entry.getKey().getNumber());
        entry.getValue().write(e);

      }
      e.uint32(o.myUniforms.length);
      for (int i = 0; i < o.myUniforms.length; i++) {
        e.value(o.myUniforms[i]);
      }
    }

    @Override
    public void decode(@NotNull Decoder d, BinaryObject obj) throws IOException {
      Program o = (Program)obj;
      o.myShaders = new LinkedHashMap<ShaderType, ResourceID>();
      int size = d.uint32();
      for (int i = 0; i < size; i++) {
        ShaderType key = ShaderType.valueOf(d.int32());
        ResourceID value = new ResourceID(d);
        o.myShaders.put(key, value);
      }
      o.myUniforms = new Uniform[d.uint32()];
      for (int i = 0; i <o.myUniforms.length; i++) {
        o.myUniforms[i] = new Uniform();
        d.value(o.myUniforms[i]);
      }
    }
    //<<<End:Java.KlassBody:2>>>
  }
}
