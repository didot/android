/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.tools.idea.npw.assetstudio;

import com.android.assetstudiolib.GraphicGenerator;
import com.android.resources.Density;
import com.android.tools.idea.ui.ImageComponent;
import com.google.common.base.Function;
import com.google.common.collect.Collections2;
import com.google.common.collect.Maps;
import com.google.common.collect.Ordering;
import com.google.common.primitives.Ints;
import com.intellij.openapi.ui.VerticalFlowLayout;
import com.intellij.ui.components.JBLabel;
import com.intellij.util.IconUtil;
import com.intellij.util.ui.JBImageIcon;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.Map;

/**
 * A panel which shows the final result of icons that will be generated by
 * {@link AssetStudioAssetGenerator} - particularly, xxhdpi, xhdpi, hdpi, and mdpi sets.
 */
@SuppressWarnings("UseJBColor")
public final class GeneratedIconsPanel extends JPanel {

  @NotNull private final String myIconCategory;
  @NotNull private final Theme myTheme;

  private final Map<Density, ImageComponent> myIconImages = Maps.newHashMap();

  private JPanel myRootPanel;
  private JPanel myIconsPanel;
  private JBLabel myTitleLabel;

  public GeneratedIconsPanel(@NotNull String iconCategory, @NotNull String title, @NotNull Theme theme) {
    super(new BorderLayout());
    add(myRootPanel);

    myIconCategory = iconCategory;
    myTitleLabel.setText(title);

    myTheme = theme;
    myRootPanel.setBackground(myTheme.getMainColor());
    myTitleLabel.setForeground(myTheme.getAltColor());
  }

  private static void updateImage(@NotNull ImageComponent imageComponent, @NotNull BufferedImage sourceImage) {
    JBImageIcon icon = IconUtil.createImageIcon(sourceImage);
    Dimension d = new Dimension(icon.getIconWidth(), icon.getIconHeight());
    imageComponent.setPreferredSize(d);
    imageComponent.setIcon(icon);
  }

  /**
   * Update the preview images in this panel using values generated by a {@link GraphicGenerator}.
   *
   * Note: This panel lazily instantiates its components based on the values in the map the first
   * time this is called. Additional calls should pass in maps with the same keys. This happens
   * automatically as long as you keep generating icons with consistent options.
   */
  public void updateImages(@NotNull Map<String, Map<String, BufferedImage>> assetMap) {
    Map<String, BufferedImage> iconSet = assetMap.get(myIconCategory);
    if (iconSet == null) {
      throw new IllegalStateException("Can't find icon set: " + myIconCategory);
    }

    Collection<Density> densities = Collections2.transform(iconSet.keySet(), new Function<String, Density>() {
      @Nullable
      @Override
      public Density apply(String iconPath) {
        for (Density density : Density.values()) {
          if (iconPath.contains(density.getResourceValue())) {
            return density;
          }
        }
        throw new IllegalArgumentException("Unexpected icon path doesn't match any known densities: " + iconPath);
      }
    });

    if (myIconsPanel.getComponentCount() == 0) {
      initializeIconComponents(densities);
    }

    for (Density density : densities) {
      updateImage(myIconImages.get(density), getImage(density, iconSet));
    }
  }

  private void initializeIconComponents(@NotNull Collection<Density> densities) {
    // Sort the densities, so that we always line up icons from highest to lowest densities.
    Ordering<Density> densityOrdering = new Ordering<Density>() {
      @Override
      public int compare(Density left, Density right) {
        // The lower the enum index, the higher the density
        return Ints.compare(left.ordinal(), right.ordinal());
      }
    };

    densities = densityOrdering.immutableSortedCopy(densities);
    for (Density density : densities) {
      JPanel iconPanel = new JPanel(new VerticalFlowLayout(false, false));
      iconPanel.setBackground(myTheme.getMainColor());

      JBLabel title = new JBLabel(density.getResourceValue());
      title.setForeground(myTheme.getAltColor());
      iconPanel.add(title);

      ImageComponent iconImage = new ImageComponent(null);
      iconImage.setBorder(new LineBorder(myTheme.getAltColor()));
      iconImage.setOpaque(false);
      iconPanel.add(iconImage);

      GridBagConstraints c = new GridBagConstraints();
      c.anchor = GridBagConstraints.PAGE_START;

      myIconsPanel.add(iconPanel, c);
      myIconImages.put(density, iconImage);
    }
  }

  @NotNull
  private BufferedImage getImage(@NotNull Density density, @NotNull Map<String, BufferedImage> iconSet) {
    String resourceValue = density.getResourceValue();
    for (String path : iconSet.keySet()) {
      if (path.contains(resourceValue)) {
        return iconSet.get(path);
      }
    }

    throw new IllegalStateException(String.format("Can't find icon: %1$s (%2$s)", myIconCategory, resourceValue));
  }

  /**
   * Color themes which are useful for acting as backdrops to our various icon types.
   */
  public enum Theme {
    DARK(Color.BLACK, Color.WHITE),
    LIGHT(Color.WHITE, Color.BLACK),
    GRAY(Color.DARK_GRAY, Color.LIGHT_GRAY);

    private final Color myMainColor;
    private final Color myAltColor;

    Theme(@NotNull Color mainColor, @NotNull Color altColor) {
      myMainColor = mainColor;
      myAltColor = altColor;
    }

    /**
     * The theme's main color, used for the background.
     */
    @NotNull
    public Color getMainColor() {
      return myMainColor;
    }

    /**
     * The theme's alt color, used for rendering lines and text on the background.
     */
    @NotNull
    public Color getAltColor() {
      return myAltColor;
    }
  }
}
