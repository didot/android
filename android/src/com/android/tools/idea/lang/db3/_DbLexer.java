/* The following code was generated by JFlex 1.4.3 on 5/7/15 5:29 PM */

package com.android.tools.idea.lang.db3;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.android.tools.idea.lang.db3.psi.DbTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/7/15 5:29 PM from the specification file
 * <tt>_DbLexer.flex</tt>
 */
public class _DbLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\2\1\1\1\0\1\2\1\1\16\4\4\0\1\2\1\62"+
    "\1\24\1\0\1\3\1\74\1\71\1\22\1\75\1\76\1\70\1\67"+
    "\1\101\1\20\1\16\1\35\1\11\11\5\1\34\1\0\1\63\1\61"+
    "\1\64\1\66\1\25\1\53\1\13\1\7\1\15\1\17\1\14\5\3"+
    "\1\10\2\3\1\46\1\21\2\3\1\43\4\3\1\12\2\3\1\77"+
    "\1\23\1\100\1\73\1\6\1\0\1\26\1\40\1\42\1\30\1\44"+
    "\1\47\1\52\1\57\1\33\2\3\1\41\1\36\1\27\1\32\1\55"+
    "\1\3\1\31\1\45\1\37\1\56\1\60\1\51\1\12\1\54\1\50"+
    "\1\0\1\72\1\0\1\65\41\4\2\0\4\3\4\0\1\3\2\0"+
    "\1\4\7\0\1\3\4\0\1\3\5\0\27\3\1\0\37\3\1\0"+
    "\u01ca\3\4\0\14\3\16\0\5\3\7\0\1\3\1\0\1\3\21\0"+
    "\160\4\5\3\1\0\2\3\2\0\4\3\10\0\1\3\1\0\3\3"+
    "\1\0\1\3\1\0\24\3\1\0\123\3\1\0\213\3\1\0\5\4"+
    "\2\0\236\3\11\0\46\3\2\0\1\3\7\0\47\3\11\0\55\4"+
    "\1\0\1\4\1\0\2\4\1\0\2\4\1\0\1\4\10\0\33\3"+
    "\5\0\3\3\15\0\4\4\7\0\1\3\4\0\13\4\5\0\53\3"+
    "\37\4\4\0\2\3\1\4\143\3\1\0\1\3\10\4\1\0\6\4"+
    "\2\3\2\4\1\0\4\4\2\3\12\4\3\3\2\0\1\3\17\0"+
    "\1\4\1\3\1\4\36\3\33\4\2\0\131\3\13\4\1\3\16\0"+
    "\12\4\41\3\11\4\2\3\4\0\1\3\5\0\26\3\4\4\1\3"+
    "\11\4\1\3\3\4\1\3\5\4\22\0\31\3\3\4\244\0\4\4"+
    "\66\3\3\4\1\3\22\4\1\3\7\4\12\3\2\4\2\0\12\4"+
    "\1\0\7\3\1\0\7\3\1\0\3\4\1\0\10\3\2\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\1\3\3\0\4\3\2\0\1\4"+
    "\1\3\7\4\2\0\2\4\2\0\3\4\1\3\10\0\1\4\4\0"+
    "\2\3\1\0\3\3\2\4\2\0\12\4\4\3\7\0\1\3\5\0"+
    "\3\4\1\0\6\3\4\0\2\3\2\0\26\3\1\0\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\2\3\2\0\1\4\1\0\5\4\4\0"+
    "\2\4\2\0\3\4\3\0\1\4\7\0\4\3\1\0\1\3\7\0"+
    "\14\4\3\3\1\4\13\0\3\4\1\0\11\3\1\0\3\3\1\0"+
    "\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4\1\3"+
    "\10\4\1\0\3\4\1\0\3\4\2\0\1\3\17\0\2\3\2\4"+
    "\2\0\12\4\1\0\1\3\17\0\3\4\1\0\10\3\2\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4"+
    "\1\3\7\4\2\0\2\4\2\0\3\4\10\0\2\4\4\0\2\3"+
    "\1\0\3\3\2\4\2\0\12\4\1\0\1\3\20\0\1\4\1\3"+
    "\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3"+
    "\1\0\2\3\3\0\2\3\3\0\3\3\3\0\14\3\4\0\5\4"+
    "\3\0\3\4\1\0\4\4\2\0\1\3\6\0\1\4\16\0\12\4"+
    "\11\0\1\3\7\0\3\4\1\0\10\3\1\0\3\3\1\0\27\3"+
    "\1\0\12\3\1\0\5\3\3\0\1\3\7\4\1\0\3\4\1\0"+
    "\4\4\7\0\2\4\1\0\2\3\6\0\2\3\2\4\2\0\12\4"+
    "\22\0\2\4\1\0\10\3\1\0\3\3\1\0\27\3\1\0\12\3"+
    "\1\0\5\3\2\0\1\4\1\3\7\4\1\0\3\4\1\0\4\4"+
    "\7\0\2\4\7\0\1\3\1\0\2\3\2\4\2\0\12\4\1\0"+
    "\2\3\17\0\2\4\1\0\10\3\1\0\3\3\1\0\51\3\2\0"+
    "\1\3\7\4\1\0\3\4\1\0\4\4\1\3\10\0\1\4\10\0"+
    "\2\3\2\4\2\0\12\4\12\0\6\3\2\0\2\4\1\0\22\3"+
    "\3\0\30\3\1\0\11\3\1\0\1\3\2\0\7\3\3\0\1\4"+
    "\4\0\6\4\1\0\1\4\1\0\10\4\22\0\2\4\15\0\60\3"+
    "\1\4\2\3\7\4\4\0\10\3\10\4\1\0\12\4\47\0\2\3"+
    "\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3"+
    "\1\0\7\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3"+
    "\1\0\4\3\1\4\2\3\6\4\1\0\2\4\1\3\2\0\5\3"+
    "\1\0\1\3\1\0\6\4\2\0\12\4\2\0\2\3\42\0\1\3"+
    "\27\0\2\4\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4"+
    "\4\0\2\4\10\3\1\0\44\3\4\0\24\4\1\0\2\4\5\3"+
    "\13\4\1\0\44\4\11\0\1\4\71\0\53\3\24\4\1\3\12\4"+
    "\6\0\6\3\4\4\4\3\3\4\1\3\3\4\2\3\7\4\3\3"+
    "\4\4\15\3\14\4\1\3\17\4\2\0\46\3\12\0\53\3\1\0"+
    "\1\3\3\0\u0149\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0"+
    "\4\3\2\0\51\3\1\0\4\3\2\0\41\3\1\0\4\3\2\0"+
    "\7\3\1\0\1\3\1\0\4\3\2\0\17\3\1\0\71\3\1\0"+
    "\4\3\2\0\103\3\2\0\3\4\40\0\20\3\20\0\125\3\14\0"+
    "\u026c\3\2\0\21\3\1\0\32\3\5\0\113\3\3\0\3\3\17\0"+
    "\15\3\1\0\4\3\3\4\13\0\22\3\3\4\13\0\22\3\2\4"+
    "\14\0\15\3\1\0\3\3\1\0\2\4\14\0\64\3\40\4\3\0"+
    "\1\3\3\0\2\3\1\4\2\0\12\4\41\0\3\4\2\0\12\4"+
    "\6\0\130\3\10\0\51\3\1\4\1\3\5\0\106\3\12\0\35\3"+
    "\3\0\14\4\4\0\14\4\12\0\12\4\36\3\2\0\5\3\13\0"+
    "\54\3\4\0\21\4\7\3\2\4\6\0\12\4\46\0\27\3\5\4"+
    "\4\0\65\3\12\4\1\0\35\4\2\0\13\4\6\0\12\4\15\0"+
    "\1\3\130\0\5\4\57\3\21\4\7\3\4\0\12\4\21\0\11\4"+
    "\14\0\3\4\36\3\12\4\3\0\2\3\12\4\6\0\46\3\16\4"+
    "\14\0\44\3\24\4\10\0\12\4\3\0\3\3\12\4\44\3\122\0"+
    "\3\4\1\0\25\4\4\3\1\4\4\3\1\4\15\0\300\3\47\4"+
    "\25\0\4\4\u0116\3\2\0\6\3\2\0\46\3\2\0\6\3\2\0"+
    "\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\37\3\2\0"+
    "\65\3\1\0\7\3\1\0\1\3\3\0\3\3\1\0\7\3\3\0"+
    "\4\3\2\0\6\3\4\0\15\3\5\0\3\3\1\0\7\3\16\0"+
    "\5\4\32\0\5\4\20\0\2\3\23\0\1\3\13\0\5\4\5\0"+
    "\6\4\1\0\1\3\15\0\1\3\20\0\15\3\3\0\32\3\26\0"+
    "\15\4\4\0\1\4\3\0\14\4\21\0\1\3\4\0\1\3\2\0"+
    "\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\4\3\1\0\13\3\2\0\4\3\5\0\5\3\4\0"+
    "\1\3\21\0\51\3\u0a77\0\57\3\1\0\57\3\1\0\205\3\6\0"+
    "\4\3\3\4\16\0\46\3\12\0\66\3\11\0\1\3\17\0\1\4"+
    "\27\3\11\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\40\4\57\0"+
    "\1\3\u01d5\0\3\3\31\0\11\3\6\4\1\0\5\3\2\0\5\3"+
    "\4\0\126\3\2\0\2\4\2\0\3\3\1\0\132\3\1\0\4\3"+
    "\5\0\51\3\3\0\136\3\21\0\33\3\65\0\20\3\u0200\0\u19b6\3"+
    "\112\0\u51cc\3\64\0\u048d\3\103\0\56\3\2\0\u010d\3\3\0\20\3"+
    "\12\4\2\3\24\0\57\3\1\4\14\0\2\4\1\0\31\3\10\0"+
    "\120\3\2\4\45\0\11\3\2\0\147\3\2\0\4\3\1\0\2\3"+
    "\16\0\12\3\120\0\10\3\1\4\3\3\1\4\4\3\1\4\27\3"+
    "\5\4\20\0\1\3\7\0\64\3\14\0\2\4\62\3\21\4\13\0"+
    "\12\4\6\0\22\4\6\3\3\0\1\3\4\0\12\4\34\3\10\4"+
    "\2\0\27\3\15\4\14\0\35\3\3\0\4\4\57\3\16\4\16\0"+
    "\1\3\12\4\46\0\51\3\16\4\11\0\3\3\1\4\10\3\2\4"+
    "\2\0\12\4\6\0\27\3\3\0\1\3\1\4\4\0\60\3\1\4"+
    "\1\3\3\4\2\3\2\4\5\3\2\4\1\3\1\4\1\3\30\0"+
    "\3\3\43\0\6\3\2\0\6\3\2\0\6\3\11\0\7\3\1\0"+
    "\7\3\221\0\43\3\10\4\1\0\2\4\2\0\12\4\6\0\u2ba4\3"+
    "\14\0\27\3\4\0\61\3\u2104\0\u012e\3\2\0\76\3\2\0\152\3"+
    "\46\0\7\3\14\0\5\3\5\0\1\3\1\4\12\3\1\0\15\3"+
    "\1\0\5\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0\154\3"+
    "\41\0\u016b\3\22\0\100\3\2\0\66\3\50\0\15\3\3\0\20\4"+
    "\20\0\7\4\14\0\2\3\30\0\3\3\31\0\1\3\6\0\5\3"+
    "\1\0\207\3\2\0\1\4\4\0\1\3\13\0\12\4\7\0\32\3"+
    "\4\0\1\3\1\0\32\3\13\0\131\3\3\0\6\3\2\0\6\3"+
    "\2\0\6\3\2\0\3\3\3\0\2\3\3\0\2\3\22\0\3\4"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\1\3\3\1\11\1\12\7\3\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\3\36\2\4\2\7\2\10\13\0\16\3\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\36\1\4\17\0\3\3\1\50\13\3\1\51\31\0"+
    "\1\52\3\3\1\53\1\3\1\54\1\55\1\3\1\56"+
    "\3\3\1\57\22\0\1\60\10\0\4\3\1\61\1\62"+
    "\1\63\1\64\33\0\1\65\3\3\31\0\1\66\1\3"+
    "\1\67\26\0\1\3\20\0\1\3\13\0\1\70\23\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\102"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\102\0\102"+
    "\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528"+
    "\0\u056a\0\u05ac\0\u05ee\0\102\0\u0630\0\102\0\102\0\u0672"+
    "\0\u06b4\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\u06f6\0\u0738\0\u077a\0\u07bc\0\102"+
    "\0\u07fe\0\u0840\0\102\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a"+
    "\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa"+
    "\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\102\0\102\0\102\0\102"+
    "\0\102\0\u0ef4\0\102\0\102\0\102\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca"+
    "\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da"+
    "\0\u141c\0\306\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\102\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986"+
    "\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96"+
    "\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\306"+
    "\0\u1da6\0\u1de8\0\u1e2a\0\306\0\u1e6c\0\306\0\306\0\u1eae"+
    "\0\306\0\u1ef0\0\u1f32\0\u1f74\0\306\0\u1fb6\0\u1ff8\0\u203a"+
    "\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a"+
    "\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a"+
    "\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u2772\0\306\0\306\0\306\0\306"+
    "\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982"+
    "\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92"+
    "\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2"+
    "\0\u2de4\0\u2e26\0\u2e68\0\306\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70"+
    "\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180"+
    "\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390"+
    "\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0"+
    "\0\306\0\u35e2\0\306\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c"+
    "\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c"+
    "\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c"+
    "\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c"+
    "\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c"+
    "\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u413a\0\u417c"+
    "\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308\0\306\0\u434a"+
    "\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518\0\u455a"+
    "\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728\0\u476a"+
    "\0\u47ac\0\u47ee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\3\4\1\6\4\4"+
    "\1\7\1\4\1\10\1\4\1\11\1\2\1\12\1\13"+
    "\1\4\1\14\1\15\2\4\1\16\1\17\1\20\1\4"+
    "\1\21\1\22\1\23\1\24\2\4\1\25\1\4\1\26"+
    "\10\4\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\103\0\2\3\102\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\2\0\23\4\26\0"+
    "\2\5\1\0\1\51\1\5\2\0\1\52\1\53\1\54"+
    "\1\55\10\0\1\53\10\0\1\51\2\0\1\55\2\0"+
    "\1\52\37\0\2\5\1\0\1\51\1\5\1\56\1\57"+
    "\1\52\1\53\1\54\1\55\10\0\1\53\7\0\1\57"+
    "\1\51\2\0\1\55\2\0\1\52\37\0\1\54\3\0"+
    "\1\54\70\0\1\11\1\0\20\11\1\60\1\61\56\11"+
    "\1\12\1\0\21\12\1\62\1\63\55\12\3\0\1\64"+
    "\2\0\3\64\1\0\4\64\1\0\1\64\1\0\1\64"+
    "\4\0\1\65\1\64\1\66\2\64\1\67\2\0\1\64"+
    "\1\70\1\71\1\72\1\73\2\64\1\74\1\64\1\75"+
    "\5\64\1\76\3\64\24\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\6\4\2\0\20\4\1\77\2\4\24\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\4\4\1\100"+
    "\1\4\2\0\6\4\1\101\14\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\4\1\102\4\4\2\0"+
    "\23\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\3\4\1\103\2\4\2\0\23\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\4\4\1\104\1\4\2\0"+
    "\16\4\1\105\4\4\24\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\4\4\1\106\1\4\2\0\23\4\24\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\6\4\2\0"+
    "\3\4\1\107\15\4\1\110\1\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\2\0\21\4\1\111"+
    "\1\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\112\5\4\2\0\3\4\1\113\17\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\4\4\1\114\1\4"+
    "\2\0\23\4\102\0\1\115\101\0\1\116\101\0\1\117"+
    "\1\0\1\120\77\0\1\121\2\0\1\122\103\0\1\123"+
    "\104\0\1\124\102\0\1\125\14\0\2\54\2\0\1\54"+
    "\2\0\1\52\1\53\1\0\1\55\10\0\1\53\13\0"+
    "\1\55\2\0\1\52\37\0\2\126\2\0\1\126\2\0"+
    "\1\52\1\53\2\0\1\126\7\0\1\53\16\0\1\52"+
    "\17\0\1\126\17\0\3\127\1\51\1\127\1\0\3\127"+
    "\1\130\1\127\6\0\1\127\1\0\1\127\7\0\1\127"+
    "\1\51\1\127\1\0\1\127\2\0\1\127\3\0\1\127"+
    "\33\0\2\57\1\0\1\51\1\57\27\0\1\51\40\0"+
    "\1\11\1\0\100\11\1\12\1\0\100\12\3\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\6\64\1\131\1\0"+
    "\23\64\24\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\1\64\1\132\4\64\1\131\1\0\23\64\24\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\3\64\1\133\1\64"+
    "\1\134\1\131\1\0\23\64\24\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\1\64\1\135\1\136\3\64\1\131"+
    "\1\0\23\64\24\0\13\64\1\0\1\64\1\0\1\64"+
    "\4\0\3\64\1\137\2\64\1\131\1\0\16\64\1\140"+
    "\4\64\24\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\4\64\1\141\1\64\1\131\1\0\23\64\24\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\1\142\5\64\1\131"+
    "\1\0\23\64\24\0\13\64\1\0\1\64\1\0\1\64"+
    "\4\0\4\64\1\143\1\64\1\131\1\0\23\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\6\64\1\131"+
    "\1\0\1\64\1\144\21\64\24\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\3\64\1\145\2\64\1\131\1\0"+
    "\23\64\24\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\6\64\1\131\1\0\3\64\1\146\17\64\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\2\0\3\4"+
    "\1\147\17\4\24\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\2\0\20\4\1\150\2\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\2\0\11\4"+
    "\1\151\11\4\24\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\2\0\1\4\1\152\5\4\1\153\13\4"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\2\0\20\4\1\154\2\4\24\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\4\4\1\155\1\4\2\0\23\4"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\2\0\1\4\1\156\21\4\24\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\4\1\157\4\4\2\0\23\4"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\1\160"+
    "\5\4\2\0\23\4\24\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\1\161\5\4\2\0\23\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\4\4\1\162\1\4"+
    "\2\0\23\4\24\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\2\0\3\4\1\163\17\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\4\4\1\164\1\4"+
    "\2\0\23\4\24\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\5\4\1\165\2\0\23\4\105\0\1\166\22\0"+
    "\2\126\2\0\1\126\2\0\1\52\1\53\12\0\1\53"+
    "\16\0\1\52\37\0\3\127\1\51\1\127\1\0\3\127"+
    "\1\167\1\127\1\0\1\55\4\0\1\127\1\0\1\127"+
    "\7\0\1\127\1\51\1\127\1\0\1\127\2\0\1\127"+
    "\3\0\1\127\1\0\1\55\31\0\3\167\1\0\1\167"+
    "\1\0\3\167\1\0\1\167\6\0\1\167\1\0\1\167"+
    "\7\0\1\167\1\0\1\167\1\0\1\167\2\0\1\167"+
    "\3\0\1\167\54\0\1\170\1\0\1\171\2\0\1\172"+
    "\3\0\1\173\1\174\1\175\1\176\2\0\1\177\1\0"+
    "\1\200\5\0\1\201\27\0\13\64\1\0\1\64\1\0"+
    "\1\64\4\0\5\64\1\202\1\131\1\0\23\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\1\203\5\64"+
    "\1\131\1\0\23\64\24\0\13\64\1\0\1\64\1\0"+
    "\1\64\4\0\6\64\1\131\1\0\1\204\22\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\6\64\1\131"+
    "\1\0\1\64\1\205\21\64\24\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\6\64\1\131\1\206\23\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\1\207\5\64"+
    "\1\131\1\0\23\64\24\0\13\64\1\0\1\64\1\0"+
    "\1\64\4\0\6\64\1\131\1\0\17\64\1\210\3\64"+
    "\24\0\13\64\1\0\1\64\1\0\1\64\4\0\4\64"+
    "\1\211\1\64\1\131\1\0\23\64\24\0\13\64\1\0"+
    "\1\64\1\0\1\64\4\0\6\64\1\131\1\0\16\64"+
    "\1\212\4\64\24\0\13\64\1\0\1\64\1\0\1\64"+
    "\4\0\6\64\1\131\1\0\3\64\1\213\17\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\1\214\2\64"+
    "\1\215\2\64\1\131\1\0\23\64\24\0\13\64\1\0"+
    "\1\64\1\0\1\64\4\0\1\216\5\64\1\131\1\0"+
    "\23\64\24\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\6\64\1\131\1\0\20\64\1\217\2\64\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\2\0\3\4"+
    "\1\220\17\4\24\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\2\0\2\4\1\221\20\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\222\5\4\2\0"+
    "\23\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\2\0\1\4\1\223\21\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\2\0\6\4\1\224"+
    "\14\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\2\0\3\4\1\225\17\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\2\0\6\4\1\226"+
    "\14\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\2\0\14\4\1\227\6\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\2\0\7\4\1\230"+
    "\13\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\3\4\1\231\2\4\2\0\23\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\3\4\1\232\2\4\2\0"+
    "\23\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\2\0\7\4\1\233\13\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\1\234\5\4\2\0\23\4"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\1\235\3\4\2\0\23\4\26\0\3\167\1\0\1\167"+
    "\1\0\3\167\1\0\1\167\1\0\1\55\4\0\1\167"+
    "\1\0\1\167\7\0\1\167\1\0\1\167\1\0\1\167"+
    "\2\0\1\167\3\0\1\167\1\0\1\55\53\0\1\236"+
    "\103\0\1\237\1\0\1\240\75\0\1\241\1\242\102\0"+
    "\1\243\22\0\1\244\57\0\1\245\75\0\1\246\105\0"+
    "\1\247\106\0\1\250\73\0\1\251\111\0\1\252\43\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\6\64\1\131"+
    "\1\0\1\253\22\64\24\0\13\64\1\0\1\64\1\0"+
    "\1\64\4\0\6\64\1\131\1\0\13\64\1\254\7\64"+
    "\24\0\13\64\1\0\1\64\1\0\1\64\4\0\6\64"+
    "\1\131\1\0\6\64\1\255\14\64\24\0\13\64\1\0"+
    "\1\64\1\0\1\64\4\0\6\64\1\131\1\0\6\64"+
    "\1\256\6\64\1\257\5\64\24\0\1\260\2\0\3\260"+
    "\1\0\4\260\1\0\1\260\1\0\1\260\4\0\6\260"+
    "\2\0\23\260\24\0\13\64\1\0\1\64\1\0\1\64"+
    "\4\0\1\64\1\261\4\64\1\131\1\0\23\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\6\64\1\131"+
    "\1\0\6\64\1\262\14\64\24\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\6\64\1\131\1\0\3\64\1\136"+
    "\17\64\24\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\4\64\1\263\1\64\1\131\1\0\23\64\24\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\4\64\1\264\1\64"+
    "\1\131\1\0\23\64\24\0\13\64\1\0\1\64\1\0"+
    "\1\64\4\0\6\64\1\131\1\0\1\64\1\265\21\64"+
    "\24\0\13\64\1\0\1\64\1\0\1\64\4\0\5\64"+
    "\1\266\1\131\1\0\23\64\24\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\6\64\1\131\1\0\4\64\1\267"+
    "\16\64\24\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\3\64\1\270\2\64\1\131\1\0\23\64\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\2\0\3\4"+
    "\1\271\17\4\24\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\2\0\20\4\1\272\2\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\273\5\4\2\0"+
    "\23\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\2\0\6\4\1\274\14\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\2\0\7\4\1\275"+
    "\13\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\2\0\1\4\1\276\21\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\2\0\6\4\1\277"+
    "\14\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\2\0\1\4\1\300\21\4\54\0\1\301\74\0"+
    "\1\302\111\0\1\303\102\0\1\304\77\0\1\206\72\0"+
    "\1\305\130\0\1\306\56\0\1\307\123\0\1\310\66\0"+
    "\1\311\66\0\1\312\2\0\1\313\76\0\1\314\131\0"+
    "\1\315\26\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\1\316\5\64\1\131\1\206\23\64\24\0\13\64\1\0"+
    "\1\64\1\0\1\64\4\0\1\317\5\64\1\131\1\0"+
    "\23\64\24\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\1\64\1\320\4\64\1\131\1\0\23\64\24\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\3\64\1\321\2\64"+
    "\1\131\1\0\14\64\1\322\6\64\24\0\13\64\1\0"+
    "\1\64\1\0\1\64\4\0\3\64\1\323\2\64\1\131"+
    "\1\0\23\64\24\0\13\260\1\0\1\260\1\0\1\260"+
    "\4\0\6\260\2\0\23\260\24\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\6\64\1\131\1\0\7\64\1\324"+
    "\13\64\24\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\2\64\1\325\3\64\1\131\1\0\23\64\24\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\6\64\1\131\1\0"+
    "\20\64\1\326\2\64\24\0\13\64\1\0\1\64\1\0"+
    "\1\64\4\0\3\64\1\327\2\64\1\131\1\0\23\64"+
    "\24\0\13\64\1\0\1\64\1\0\1\64\4\0\6\64"+
    "\1\131\1\0\6\64\1\330\14\64\24\0\13\64\1\0"+
    "\1\64\1\0\1\64\4\0\1\64\1\331\4\64\1\131"+
    "\1\0\23\64\24\0\13\64\1\0\1\64\1\0\1\64"+
    "\4\0\6\64\1\131\1\0\1\64\1\332\21\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\1\333\5\64"+
    "\1\131\1\0\23\64\24\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\6\4\2\0\6\4\1\334\14\4\24\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\6\4\2\0"+
    "\3\4\1\335\17\4\24\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\1\4\1\336\4\4\2\0\23\4\24\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\1\337\5\4"+
    "\2\0\23\4\57\0\1\340\114\0\1\341\74\0\1\342"+
    "\101\0\1\343\6\0\1\344\55\0\1\345\116\0\1\346"+
    "\76\0\1\242\72\0\1\347\101\0\1\350\106\0\1\351"+
    "\75\0\1\352\110\0\1\353\70\0\1\354\53\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\6\64\1\131\1\0"+
    "\1\64\1\355\21\64\24\0\13\64\1\0\1\64\1\0"+
    "\1\64\4\0\6\64\1\131\1\0\2\64\1\356\20\64"+
    "\24\0\13\64\1\0\1\64\1\0\1\64\4\0\6\64"+
    "\1\131\1\206\5\64\1\357\2\64\1\360\12\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\6\64\1\131"+
    "\1\0\17\64\1\361\3\64\24\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\6\64\1\131\1\0\6\64\1\362"+
    "\14\64\24\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\3\64\1\363\2\64\1\131\1\0\23\64\24\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\5\64\1\267\1\131"+
    "\1\0\23\64\24\0\13\64\1\0\1\64\1\0\1\64"+
    "\4\0\6\64\1\131\1\0\15\64\1\257\5\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\6\64\1\131"+
    "\1\0\1\64\1\136\21\64\24\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\6\64\1\131\1\206\5\64\1\364"+
    "\15\64\24\0\5\64\1\365\5\64\1\0\1\64\1\0"+
    "\1\64\4\0\6\64\1\131\1\0\23\64\24\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\6\64\1\131\1\0"+
    "\14\64\1\366\6\64\24\0\13\64\1\0\1\64\1\0"+
    "\1\64\4\0\5\64\1\367\1\131\1\0\23\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\6\64\1\131"+
    "\1\0\3\64\1\370\17\64\24\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\6\4\2\0\1\4\1\371\21\4"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\2\0\4\4\1\372\16\4\24\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\1\4\1\373\4\4\2\0\23\4"+
    "\47\0\1\374\6\0\1\206\72\0\1\375\102\0\1\376"+
    "\103\0\1\377\20\0\1\u0100\60\0\1\u0101\115\0\1\u0102"+
    "\64\0\1\u0103\127\0\1\u0104\54\0\1\u0105\114\0\1\u0106"+
    "\64\0\1\u0107\111\0\1\u0108\70\0\1\u0109\56\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\4\64\1\362\1\64"+
    "\1\131\1\0\23\64\24\0\13\64\1\0\1\64\1\0"+
    "\1\64\4\0\6\64\1\131\1\0\3\64\1\u010a\17\64"+
    "\24\0\13\64\1\0\1\64\1\0\1\64\4\0\5\64"+
    "\1\u010b\1\131\1\0\23\64\24\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\6\64\1\131\1\0\11\64\1\u010c"+
    "\11\64\24\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\4\64\1\u010d\1\64\1\131\1\0\23\64\24\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\3\64\1\136\2\64"+
    "\1\131\1\0\23\64\24\0\13\64\1\0\1\64\1\0"+
    "\1\64\4\0\1\u010e\5\64\1\131\1\0\23\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\6\64\1\131"+
    "\1\0\1\64\1\u010f\21\64\24\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\5\64\1\u0110\1\131\1\0\23\64"+
    "\24\0\13\64\1\0\1\64\1\0\1\64\4\0\6\64"+
    "\1\131\1\206\15\64\1\257\5\64\24\0\13\64\1\0"+
    "\1\64\1\0\1\64\4\0\4\64\1\u0111\1\64\1\131"+
    "\1\0\23\64\24\0\13\64\1\0\1\64\1\0\1\64"+
    "\4\0\6\64\1\131\1\0\7\64\1\136\13\64\24\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\6\4\2\0"+
    "\6\4\1\u0112\14\4\60\0\1\u0113\102\0\1\u0114\76\0"+
    "\1\206\5\0\1\u0115\2\0\1\u0116\110\0\1\u0117\70\0"+
    "\1\u0118\66\0\1\u0119\103\0\1\353\121\0\1\344\65\0"+
    "\1\242\77\0\1\206\5\0\1\u011a\46\0\1\u011b\143\0"+
    "\1\u011c\62\0\1\u011d\107\0\1\u011e\43\0\13\64\1\0"+
    "\1\64\1\0\1\64\4\0\6\64\1\131\1\0\6\64"+
    "\1\136\14\64\24\0\13\64\1\0\1\64\1\0\1\64"+
    "\4\0\6\64\1\131\1\0\12\64\1\u010a\10\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\6\64\1\131"+
    "\1\0\11\64\1\u011f\11\64\24\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\6\64\1\131\1\0\3\64\1\u0120"+
    "\17\64\24\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\6\64\1\131\1\0\16\64\1\136\4\64\24\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\1\u0121\5\64\1\131"+
    "\1\0\23\64\24\0\13\64\1\0\1\64\1\0\1\64"+
    "\4\0\6\64\1\131\1\0\7\64\1\u0122\13\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\1\64\1\136"+
    "\4\64\1\131\1\0\23\64\24\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\4\4\1\u0123\1\4\2\0\23\4"+
    "\53\0\1\u0118\110\0\1\u0124\73\0\1\u0125\115\0\1\u0126"+
    "\64\0\1\u0127\100\0\1\242\76\0\1\u0128\112\0\1\u0129"+
    "\75\0\1\u012a\103\0\1\206\15\0\1\344\60\0\1\u012b"+
    "\114\0\1\242\37\0\13\64\1\0\1\64\1\0\1\64"+
    "\4\0\6\64\1\131\1\0\7\64\1\u012c\13\64\24\0"+
    "\13\64\1\0\1\64\1\0\1\64\4\0\1\316\5\64"+
    "\1\131\1\0\23\64\24\0\13\64\1\0\1\64\1\0"+
    "\1\64\4\0\6\64\1\131\1\0\1\64\1\u012d\21\64"+
    "\24\0\13\64\1\0\1\64\1\0\1\64\4\0\6\64"+
    "\1\131\1\0\1\64\1\u012e\21\64\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\2\0\11\4\1\u012f"+
    "\11\4\65\0\1\242\105\0\1\u0124\100\0\1\u0130\73\0"+
    "\1\u0131\114\0\1\242\53\0\1\u0132\120\0\1\u0133\63\0"+
    "\1\242\55\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\6\64\1\131\1\0\6\64\1\326\14\64\24\0\13\64"+
    "\1\0\1\64\1\0\1\64\4\0\6\64\1\131\1\0"+
    "\6\64\1\u0134\14\64\24\0\13\64\1\0\1\64\1\0"+
    "\1\64\4\0\6\64\1\131\1\0\15\64\1\u0135\5\64"+
    "\66\0\1\u0136\62\0\1\374\112\0\1\u0137\101\0\1\u0138"+
    "\45\0\5\64\1\u0139\5\64\1\0\1\64\1\0\1\64"+
    "\4\0\6\64\1\131\1\0\23\64\24\0\13\64\1\0"+
    "\1\64\1\0\1\64\4\0\1\64\1\u013a\4\64\1\131"+
    "\1\0\23\64\65\0\1\u0104\101\0\1\u013b\110\0\1\u013c"+
    "\31\0\13\64\1\0\1\64\1\0\1\64\4\0\5\64"+
    "\1\u013d\1\131\1\0\23\64\24\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\5\64\1\u013e\1\131\1\0\23\64"+
    "\31\0\1\u013f\120\0\1\u0140\55\0\13\64\1\0\1\64"+
    "\1\0\1\64\4\0\6\64\1\131\1\0\7\64\1\326"+
    "\13\64\24\0\13\64\1\0\1\64\1\0\1\64\4\0"+
    "\6\64\1\131\1\0\1\u0120\22\64\54\0\1\u0141\101\0"+
    "\1\u0142\113\0\1\u0104\72\0\1\u0131\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\6\1\2\11\13\1\1\11"+
    "\1\1\2\11\2\1\12\11\4\1\1\11\2\1\1\11"+
    "\13\0\16\1\5\11\1\1\3\11\2\1\17\0\17\1"+
    "\1\11\31\0\16\1\22\0\1\1\10\0\10\1\33\0"+
    "\4\1\31\0\3\1\26\0\1\1\20\0\1\1\13\0"+
    "\1\1\23\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[322];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _DbLexer() {
    this((java.io.Reader)null);
  }


  public _DbLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _DbLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { return LTLT;
          }
        case 57: break;
        case 24: 
          { return RPARENTH;
          }
        case 58: break;
        case 15: 
          { return TILDE;
          }
        case 59: break;
        case 13: 
          { return LT;
          }
        case 60: break;
        case 4: 
          { return INTEGER_LITERAL;
          }
        case 61: break;
        case 35: 
          { return GTEQ;
          }
        case 62: break;
        case 45: 
          { return LONG_KEYWORD;
          }
        case 63: break;
        case 28: 
          { return LONG_LITERAL;
          }
        case 64: break;
        case 12: 
          { return EXCL;
          }
        case 65: break;
        case 38: 
          { return ANDAND;
          }
        case 66: break;
        case 7: 
          { return CHARACTER_LITERAL;
          }
        case 67: break;
        case 49: 
          { return CLASS_KEYWORD;
          }
        case 68: break;
        case 21: 
          { return XOR;
          }
        case 69: break;
        case 52: 
          { return FLOAT_KEYWORD;
          }
        case 70: break;
        case 26: 
          { return RBRACKET;
          }
        case 71: break;
        case 51: 
          { return FALSE;
          }
        case 72: break;
        case 29: 
          { return FLOAT_LITERAL;
          }
        case 73: break;
        case 27: 
          { return COMMA;
          }
        case 74: break;
        case 5: 
          { return DOT;
          }
        case 75: break;
        case 50: 
          { return SHORT_KEYWORD;
          }
        case 76: break;
        case 47: 
          { return VOID_KEYWORD;
          }
        case 77: break;
        case 37: 
          { return QUESTQUEST;
          }
        case 78: break;
        case 20: 
          { return OR;
          }
        case 79: break;
        case 8: 
          { return STRING_LITERAL;
          }
        case 80: break;
        case 10: 
          { return DIV;
          }
        case 81: break;
        case 23: 
          { return LPARENTH;
          }
        case 82: break;
        case 9: 
          { return COLON;
          }
        case 83: break;
        case 42: 
          { return NULL;
          }
        case 84: break;
        case 31: 
          { return EQEQ;
          }
        case 85: break;
        case 19: 
          { return AND;
          }
        case 86: break;
        case 55: 
          { return BOOLEAN_KEYWORD;
          }
        case 87: break;
        case 53: 
          { return DOUBLE_KEYWORD;
          }
        case 88: break;
        case 22: 
          { return PERC;
          }
        case 89: break;
        case 30: 
          { return DOUBLE_LITERAL;
          }
        case 90: break;
        case 39: 
          { return OROR;
          }
        case 91: break;
        case 14: 
          { return GT;
          }
        case 92: break;
        case 46: 
          { return CHAR_KEYWORD;
          }
        case 93: break;
        case 25: 
          { return LBRACKET;
          }
        case 94: break;
        case 16: 
          { return QUEST;
          }
        case 95: break;
        case 32: 
          { return NE;
          }
        case 96: break;
        case 6: 
          { return MINUS;
          }
        case 97: break;
        case 48: 
          { return RESOURCE_REFERENCE;
          }
        case 98: break;
        case 44: 
          { return BYTE_KEYWORD;
          }
        case 99: break;
        case 54: 
          { return DEFAULT_KEYWORD;
          }
        case 100: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 101: break;
        case 43: 
          { return TRUE;
          }
        case 102: break;
        case 18: 
          { return ASTERISK;
          }
        case 103: break;
        case 56: 
          { return INSTANCEOF_KEYWORD;
          }
        case 104: break;
        case 40: 
          { return INT_KEYWORD;
          }
        case 105: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 106: break;
        case 41: 
          { return GTGTGT;
          }
        case 107: break;
        case 11: 
          { return EQ;
          }
        case 108: break;
        case 17: 
          { return PLUS;
          }
        case 109: break;
        case 36: 
          { return GTGT;
          }
        case 110: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 111: break;
        case 33: 
          { return LE;
          }
        case 112: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
