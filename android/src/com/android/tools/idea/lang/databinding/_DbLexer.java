/* The following code was generated by JFlex 1.4.3 on 12/2/16 12:02 AM */

package com.android.tools.idea.lang.databinding;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.android.tools.idea.lang.databinding.psi.DbTokenTypes.*;
@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/2/16 12:02 AM from the specification file
 * <tt>_DbLexer.flex</tt>
 */
public class _DbLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\2\1\1\1\0\1\2\1\1\16\4\4\0\1\2\1\65"+
    "\1\22\1\0\1\3\1\77\1\74\1\25\1\100\1\101\1\73\1\72"+
    "\1\104\1\20\1\16\1\44\1\11\3\31\4\32\2\5\1\43\1\0"+
    "\1\66\1\64\1\67\1\71\1\34\1\57\1\13\1\7\1\15\1\17"+
    "\1\14\5\3\1\10\2\3\1\53\1\21\2\3\1\50\4\3\1\12"+
    "\2\3\1\102\1\23\1\103\1\76\1\6\1\24\1\35\1\27\1\47"+
    "\1\37\1\51\1\30\1\56\1\62\1\42\2\3\1\46\1\45\1\36"+
    "\1\41\1\61\1\3\1\40\1\52\1\26\1\33\1\63\1\55\1\12"+
    "\1\60\1\54\1\0\1\75\1\0\1\70\41\4\2\0\4\3\4\0"+
    "\1\3\2\0\1\4\7\0\1\3\4\0\1\3\5\0\27\3\1\0"+
    "\37\3\1\0\u01ca\3\4\0\14\3\16\0\5\3\7\0\1\3\1\0"+
    "\1\3\21\0\160\4\5\3\1\0\2\3\2\0\4\3\10\0\1\3"+
    "\1\0\3\3\1\0\1\3\1\0\24\3\1\0\123\3\1\0\213\3"+
    "\1\0\5\4\2\0\236\3\11\0\46\3\2\0\1\3\7\0\47\3"+
    "\7\0\1\3\1\0\55\4\1\0\1\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\4\10\0\33\3\5\0\3\3\15\0\5\4\6\0\1\3"+
    "\4\0\13\4\5\0\53\3\37\4\4\0\2\3\1\4\143\3\1\0"+
    "\1\3\10\4\1\0\6\4\2\3\2\4\1\0\4\4\2\3\12\4"+
    "\3\3\2\0\1\3\17\0\1\4\1\3\1\4\36\3\33\4\2\0"+
    "\131\3\13\4\1\3\16\0\12\4\41\3\11\4\2\3\4\0\1\3"+
    "\5\0\26\3\4\4\1\3\11\4\1\3\3\4\1\3\5\4\22\0"+
    "\31\3\3\4\104\0\1\3\1\0\13\3\67\0\33\4\1\0\4\4"+
    "\66\3\3\4\1\3\22\4\1\3\7\4\12\3\2\4\2\0\12\4"+
    "\1\0\7\3\1\0\7\3\1\0\3\4\1\0\10\3\2\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\1\3\3\0\4\3\2\0\1\4"+
    "\1\3\7\4\2\0\2\4\2\0\3\4\1\3\10\0\1\4\4\0"+
    "\2\3\1\0\3\3\2\4\2\0\12\4\4\3\7\0\1\3\5\0"+
    "\3\4\1\0\6\3\4\0\2\3\2\0\26\3\1\0\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\2\3\2\0\1\4\1\0\5\4\4\0"+
    "\2\4\2\0\3\4\3\0\1\4\7\0\4\3\1\0\1\3\7\0"+
    "\14\4\3\3\1\4\13\0\3\4\1\0\11\3\1\0\3\3\1\0"+
    "\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4\1\3"+
    "\10\4\1\0\3\4\1\0\3\4\2\0\1\3\17\0\2\3\2\4"+
    "\2\0\12\4\1\0\1\3\17\0\3\4\1\0\10\3\2\0\2\3"+
    "\2\0\26\3\1\0\7\3\1\0\2\3\1\0\5\3\2\0\1\4"+
    "\1\3\7\4\2\0\2\4\2\0\3\4\10\0\2\4\4\0\2\3"+
    "\1\0\3\3\2\4\2\0\12\4\1\0\1\3\20\0\1\4\1\3"+
    "\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2\3\1\0\1\3"+
    "\1\0\2\3\3\0\2\3\3\0\3\3\3\0\14\3\4\0\5\4"+
    "\3\0\3\4\1\0\4\4\2\0\1\3\6\0\1\4\16\0\12\4"+
    "\11\0\1\3\7\0\3\4\1\0\10\3\1\0\3\3\1\0\27\3"+
    "\1\0\12\3\1\0\5\3\3\0\1\3\7\4\1\0\3\4\1\0"+
    "\4\4\7\0\2\4\1\0\2\3\6\0\2\3\2\4\2\0\12\4"+
    "\22\0\2\4\1\0\10\3\1\0\3\3\1\0\27\3\1\0\12\3"+
    "\1\0\5\3\2\0\1\4\1\3\7\4\1\0\3\4\1\0\4\4"+
    "\7\0\2\4\7\0\1\3\1\0\2\3\2\4\2\0\12\4\1\0"+
    "\2\3\17\0\2\4\1\0\10\3\1\0\3\3\1\0\51\3\2\0"+
    "\1\3\7\4\1\0\3\4\1\0\4\4\1\3\10\0\1\4\10\0"+
    "\2\3\2\4\2\0\12\4\12\0\6\3\2\0\2\4\1\0\22\3"+
    "\3\0\30\3\1\0\11\3\1\0\1\3\2\0\7\3\3\0\1\4"+
    "\4\0\6\4\1\0\1\4\1\0\10\4\22\0\2\4\15\0\60\3"+
    "\1\4\2\3\7\4\4\0\10\3\10\4\1\0\12\4\47\0\2\3"+
    "\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3"+
    "\1\0\7\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3"+
    "\1\0\4\3\1\4\2\3\6\4\1\0\2\4\1\3\2\0\5\3"+
    "\1\0\1\3\1\0\6\4\2\0\12\4\2\0\4\3\40\0\1\3"+
    "\27\0\2\4\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4"+
    "\4\0\2\4\10\3\1\0\44\3\4\0\24\4\1\0\2\4\5\3"+
    "\13\4\1\0\44\4\11\0\1\4\71\0\53\3\24\4\1\3\12\4"+
    "\6\0\6\3\4\4\4\3\3\4\1\3\3\4\2\3\7\4\3\3"+
    "\4\4\15\3\14\4\1\3\17\4\2\0\46\3\1\0\1\3\5\0"+
    "\1\3\2\0\53\3\1\0\u014d\3\1\0\4\3\2\0\7\3\1\0"+
    "\1\3\1\0\4\3\2\0\51\3\1\0\4\3\2\0\41\3\1\0"+
    "\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0\17\3\1\0"+
    "\71\3\1\0\4\3\2\0\103\3\2\0\3\4\40\0\20\3\20\0"+
    "\125\3\14\0\u026c\3\2\0\21\3\1\0\32\3\5\0\113\3\3\0"+
    "\3\3\17\0\15\3\1\0\4\3\3\4\13\0\22\3\3\4\13\0"+
    "\22\3\2\4\14\0\15\3\1\0\3\3\1\0\2\4\14\0\64\3"+
    "\40\4\3\0\1\3\3\0\2\3\1\4\2\0\12\4\41\0\3\4"+
    "\2\0\12\4\6\0\130\3\10\0\51\3\1\4\1\3\5\0\106\3"+
    "\12\0\35\3\3\0\14\4\4\0\14\4\12\0\12\4\36\3\2\0"+
    "\5\3\13\0\54\3\4\0\21\4\7\3\2\4\6\0\12\4\46\0"+
    "\27\3\5\4\4\0\65\3\12\4\1\0\35\4\2\0\13\4\6\0"+
    "\12\4\15\0\1\3\130\0\5\4\57\3\21\4\7\3\4\0\12\4"+
    "\21\0\11\4\14\0\3\4\36\3\15\4\2\3\12\4\54\3\16\4"+
    "\14\0\44\3\24\4\10\0\12\4\3\0\3\3\12\4\44\3\122\0"+
    "\3\4\1\0\25\4\4\3\1\4\4\3\3\4\2\3\11\0\300\3"+
    "\47\4\25\0\4\4\u0116\3\2\0\6\3\2\0\46\3\2\0\6\3"+
    "\2\0\10\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\37\3"+
    "\2\0\65\3\1\0\7\3\1\0\1\3\3\0\3\3\1\0\7\3"+
    "\3\0\4\3\2\0\6\3\4\0\15\3\5\0\3\3\1\0\7\3"+
    "\16\0\5\4\32\0\5\4\20\0\2\3\23\0\1\3\13\0\5\4"+
    "\5\0\6\4\1\0\1\3\15\0\1\3\20\0\15\3\3\0\33\3"+
    "\25\0\15\4\4\0\1\4\3\0\14\4\21\0\1\3\4\0\1\3"+
    "\2\0\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\4\3\1\0\13\3\2\0\4\3\5\0\5\3"+
    "\4\0\1\3\21\0\51\3\u0a77\0\57\3\1\0\57\3\1\0\205\3"+
    "\6\0\4\3\3\4\2\3\14\0\46\3\1\0\1\3\5\0\1\3"+
    "\2\0\70\3\7\0\1\3\17\0\1\4\27\3\11\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0\7\3\1\0"+
    "\7\3\1\0\7\3\1\0\40\4\57\0\1\3\u01d5\0\3\3\31\0"+
    "\11\3\6\4\1\0\5\3\2\0\5\3\4\0\126\3\2\0\2\4"+
    "\2\0\3\3\1\0\132\3\1\0\4\3\5\0\51\3\3\0\136\3"+
    "\21\0\33\3\65\0\20\3\u0200\0\u19b6\3\112\0\u51cd\3\63\0\u048d\3"+
    "\103\0\56\3\2\0\u010d\3\3\0\20\3\12\4\2\3\24\0\57\3"+
    "\1\4\4\0\12\4\1\0\31\3\7\0\1\4\120\3\2\4\45\0"+
    "\11\3\2\0\147\3\2\0\4\3\1\0\4\3\14\0\13\3\115\0"+
    "\12\3\1\4\3\3\1\4\4\3\1\4\27\3\5\4\20\0\1\3"+
    "\7\0\64\3\14\0\2\4\62\3\21\4\13\0\12\4\6\0\22\4"+
    "\6\3\3\0\1\3\4\0\12\4\34\3\10\4\2\0\27\3\15\4"+
    "\14\0\35\3\3\0\4\4\57\3\16\4\16\0\1\3\12\4\46\0"+
    "\51\3\16\4\11\0\3\3\1\4\10\3\2\4\2\0\12\4\6\0"+
    "\27\3\3\0\1\3\1\4\4\0\60\3\1\4\1\3\3\4\2\3"+
    "\2\4\5\3\2\4\1\3\1\4\1\3\30\0\3\3\2\0\13\3"+
    "\5\4\2\0\3\3\2\4\12\0\6\3\2\0\6\3\2\0\6\3"+
    "\11\0\7\3\1\0\7\3\221\0\43\3\10\4\1\0\2\4\2\0"+
    "\12\4\6\0\u2ba4\3\14\0\27\3\4\0\61\3\u2104\0\u016e\3\2\0"+
    "\152\3\46\0\7\3\14\0\5\3\5\0\1\3\1\4\12\3\1\0"+
    "\15\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0"+
    "\154\3\41\0\u016b\3\22\0\100\3\2\0\66\3\50\0\15\3\3\0"+
    "\20\4\20\0\7\4\14\0\2\3\30\0\3\3\31\0\1\3\6\0"+
    "\5\3\1\0\207\3\2\0\1\4\4\0\1\3\13\0\12\4\7\0"+
    "\32\3\4\0\1\3\1\0\32\3\13\0\131\3\3\0\6\3\2\0"+
    "\6\3\2\0\6\3\2\0\3\3\3\0\2\3\3\0\2\3\22\0"+
    "\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\2\7"+
    "\1\1\3\3\1\1\3\3\1\10\1\11\4\3\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\3\35\2\4\1\36\3\7\2\0\5\3"+
    "\13\0\4\3\1\37\5\3\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\35\1\4\1\0"+
    "\1\51\3\0\5\3\16\0\3\3\1\52\6\3\1\53"+
    "\2\0\1\54\1\3\1\55\2\3\30\0\1\56\3\3"+
    "\1\57\1\3\1\60\1\3\1\61\1\0\1\3\1\62"+
    "\1\63\25\0\1\64\5\0\3\3\1\65\1\66\1\0"+
    "\1\3\33\0\1\67\2\3\1\70\31\0\1\71\1\3"+
    "\26\0\1\3\20\0\1\3\13\0\1\72\23\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\105\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\u0702\0\105\0\u0747\0\105\0\105"+
    "\0\u078c\0\u07d1\0\105\0\105\0\105\0\105\0\105\0\105"+
    "\0\105\0\105\0\105\0\105\0\u0816\0\u085b\0\u08a0\0\u08e5"+
    "\0\105\0\105\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83"+
    "\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab"+
    "\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\105\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6"+
    "\0\105\0\105\0\105\0\105\0\105\0\u10fb\0\105\0\105"+
    "\0\105\0\u1140\0\u1185\0\u11ca\0\105\0\u120f\0\u1254\0\u1299"+
    "\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1"+
    "\0\u1506\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\317\0\u18cc"+
    "\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\105\0\u1a6a\0\u1aaf"+
    "\0\317\0\u1af4\0\317\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d"+
    "\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75"+
    "\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d"+
    "\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\317\0\u223b\0\u2280"+
    "\0\u22c5\0\317\0\u230a\0\317\0\u234f\0\317\0\u2394\0\u23d9"+
    "\0\317\0\317\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577"+
    "\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f"+
    "\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7"+
    "\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef"+
    "\0\317\0\317\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d"+
    "\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5"+
    "\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153\0\u3198\0\u31dd"+
    "\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0\0\317"+
    "\0\u3405\0\u344a\0\317\0\u348f\0\u34d4\0\u3519\0\u355e\0\u35a3"+
    "\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb"+
    "\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3"+
    "\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\317\0\u3b4c\0\u3b91\0\u3bd6"+
    "\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe"+
    "\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026"+
    "\0\u406b\0\u40b0\0\u40f5\0\u413a\0\u417f\0\u41c4\0\u4209\0\u424e"+
    "\0\u4293\0\u42d8\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u4476"+
    "\0\u44bb\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614\0\u4659\0\u469e"+
    "\0\u46e3\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u4881\0\u48c6"+
    "\0\u490b\0\317\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9"+
    "\0\u4aee\0\u4b33\0\u4b78\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c\0\u4cd1"+
    "\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u4e2a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\3\4\1\6\4\4"+
    "\1\7\1\4\1\10\1\4\1\11\1\2\1\12\1\13"+
    "\1\14\1\15\1\16\2\5\1\4\1\17\1\4\1\20"+
    "\1\21\2\4\1\22\1\23\1\24\1\4\1\25\1\26"+
    "\2\4\1\27\10\4\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\106\0\2\3\105\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\6\4\1\0"+
    "\6\4\2\0\17\4\26\0\2\5\1\0\1\52\1\5"+
    "\2\0\1\53\1\54\1\55\1\56\10\0\1\53\2\5"+
    "\4\0\1\54\6\0\1\52\2\0\1\56\40\0\2\5"+
    "\1\0\1\52\1\5\1\57\1\60\1\53\1\54\1\55"+
    "\1\56\7\0\1\60\1\53\2\5\4\0\1\54\6\0"+
    "\1\52\2\0\1\56\40\0\1\55\3\0\1\55\17\0"+
    "\2\55\141\0\1\61\15\0\1\11\1\0\20\11\1\62"+
    "\1\63\61\11\1\12\1\0\20\12\1\0\1\64\1\62"+
    "\60\12\1\65\1\0\21\65\1\66\1\65\1\0\57\65"+
    "\3\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\0\3\4\1\67\2\4\2\0\17\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\0\4\4"+
    "\1\70\1\4\2\0\13\4\1\71\3\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\0\1\72"+
    "\5\4\2\0\1\4\1\73\15\4\24\0\1\74\2\0"+
    "\3\74\1\0\4\74\1\0\1\74\1\0\1\74\4\0"+
    "\1\75\1\76\1\77\2\0\1\74\1\0\1\100\1\74"+
    "\1\101\2\74\1\102\2\0\1\74\1\103\1\104\2\74"+
    "\1\105\6\74\1\106\2\74\24\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\5\4\1\107\1\0\6\4\2\0"+
    "\17\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\0\4\4\1\110\1\4\2\0\4\4\1\111"+
    "\12\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\0\1\4\1\112\4\4\2\0\17\4\64\0"+
    "\1\113\44\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\0\4\4\1\114\1\4\2\0\17\4\24\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\6\4\1\0"+
    "\6\4\2\0\1\4\1\115\13\4\1\116\1\4\24\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\6\4\1\0"+
    "\6\4\2\0\15\4\1\117\1\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\1\0\4\4\1\120"+
    "\1\4\2\0\17\4\105\0\1\121\104\0\1\122\104\0"+
    "\1\123\1\0\1\124\102\0\1\125\2\0\1\126\106\0"+
    "\1\127\107\0\1\130\105\0\1\131\14\0\2\55\2\0"+
    "\1\55\2\0\1\53\1\54\1\0\1\56\10\0\1\53"+
    "\2\55\4\0\1\54\11\0\1\56\40\0\2\132\2\0"+
    "\1\132\2\0\1\53\1\54\2\0\1\132\7\0\1\53"+
    "\2\132\4\0\1\54\32\0\1\132\17\0\3\133\1\52"+
    "\1\133\1\0\3\133\1\134\1\133\7\0\4\133\2\0"+
    "\1\133\1\0\1\133\6\0\1\52\1\133\1\0\1\133"+
    "\5\0\1\133\32\0\2\60\1\0\1\52\1\60\17\0"+
    "\2\60\13\0\1\52\47\0\1\11\10\0\2\11\1\0"+
    "\6\11\3\0\1\11\1\0\1\11\55\0\1\12\10\0"+
    "\2\12\1\0\6\12\3\0\1\12\1\0\1\12\71\0"+
    "\1\135\70\0\1\136\10\0\2\65\1\0\4\65\1\136"+
    "\1\137\1\140\2\0\1\65\1\0\1\65\47\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\5\4\1\141\1\0"+
    "\6\4\2\0\17\4\24\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\6\4\1\0\4\4\1\142\1\4\2\0"+
    "\17\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\143\5\4\1\0\6\4\2\0\17\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\0\6\4"+
    "\2\0\1\4\1\144\15\4\24\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\6\4\1\0\4\4\1\145\1\4"+
    "\2\0\17\4\24\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\6\74\1\0\6\74\1\146\1\0\17\74\24\0"+
    "\13\74\1\0\1\74\1\0\1\74\4\0\6\74\1\0"+
    "\3\74\1\147\2\74\1\146\1\0\13\74\1\150\3\74"+
    "\24\0\13\74\1\0\1\74\1\0\1\74\4\0\6\74"+
    "\1\0\4\74\1\151\1\74\1\146\1\0\17\74\24\0"+
    "\13\74\1\0\1\74\1\0\1\74\4\0\6\74\1\0"+
    "\3\74\1\152\2\74\1\146\1\0\17\74\24\0\13\74"+
    "\1\0\1\74\1\0\1\74\4\0\6\74\1\0\1\74"+
    "\1\153\4\74\1\146\1\0\17\74\24\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\6\74\1\0\3\74\1\154"+
    "\1\74\1\155\1\146\1\0\17\74\24\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\6\74\1\0\1\74\1\156"+
    "\1\157\3\74\1\146\1\0\17\74\24\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\6\74\1\0\1\160\5\74"+
    "\1\146\1\0\17\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\6\74\1\0\4\74\1\161\1\74\1\146"+
    "\1\0\17\74\24\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\1\162\5\74\1\0\6\74\1\146\1\0\17\74"+
    "\24\0\13\74\1\0\1\74\1\0\1\74\4\0\6\74"+
    "\1\0\6\74\1\146\1\0\1\74\1\163\15\74\24\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\6\4\1\0"+
    "\6\4\2\0\1\4\1\164\15\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\5\4\1\165\1\0\6\4"+
    "\2\0\17\4\24\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\2\4\1\166\3\4\1\0\6\4\2\0\17\4"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\1\167"+
    "\5\4\1\0\6\4\2\0\5\4\1\170\11\4\24\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\6\4\1\0"+
    "\1\4\1\171\4\4\2\0\17\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\1\0\1\172\5\4"+
    "\2\0\17\4\24\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\1\0\1\173\5\4\2\0\17\4\24\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\6\4\1\0"+
    "\4\4\1\174\1\4\2\0\17\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\1\0\5\4\1\175"+
    "\2\0\17\4\110\0\1\176\22\0\2\132\2\0\1\132"+
    "\2\0\1\53\1\54\12\0\1\53\2\132\4\0\1\54"+
    "\52\0\3\133\1\52\1\133\1\0\3\133\1\177\1\133"+
    "\1\0\1\56\5\0\4\133\2\0\1\133\1\0\1\133"+
    "\6\0\1\52\1\133\1\0\1\133\5\0\1\133\1\0"+
    "\1\56\30\0\3\177\1\0\1\177\1\0\3\177\1\0"+
    "\1\177\7\0\4\177\2\0\1\177\1\0\1\177\7\0"+
    "\1\177\1\0\1\177\5\0\1\177\36\0\1\137\13\0"+
    "\1\135\3\0\2\137\63\0\1\65\13\0\1\135\3\0"+
    "\2\65\57\0\1\200\1\0\1\200\1\0\1\200\1\0"+
    "\3\200\1\0\1\200\7\0\4\200\2\0\1\200\1\0"+
    "\1\200\7\0\1\200\1\0\1\200\5\0\1\200\30\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\6\4\1\0"+
    "\6\4\2\0\4\4\1\201\12\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\1\0\6\4\2\0"+
    "\1\4\1\202\15\4\24\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\6\4\1\0\6\4\2\0\4\4\1\203"+
    "\12\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\0\6\4\2\0\5\4\1\204\11\4\24\0"+
    "\13\4\1\0\1\4\1\0\1\4\4\0\6\4\1\0"+
    "\1\205\5\4\2\0\17\4\47\0\1\206\1\207\1\210"+
    "\4\0\1\211\1\0\1\212\2\0\1\213\3\0\1\214"+
    "\1\215\2\0\1\216\6\0\1\217\26\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\6\74\1\0\1\220\5\74"+
    "\1\146\1\0\17\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\6\74\1\0\6\74\1\146\1\0\14\74"+
    "\1\221\2\74\24\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\6\74\1\0\4\74\1\222\1\74\1\146\1\0"+
    "\17\74\24\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\6\74\1\0\1\223\5\74\1\146\1\0\17\74\24\0"+
    "\13\74\1\0\1\74\1\0\1\74\4\0\6\74\1\0"+
    "\5\74\1\224\1\146\1\0\17\74\24\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\6\74\1\0\1\225\5\74"+
    "\1\146\1\0\17\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\6\74\1\0\6\74\1\146\1\0\1\226"+
    "\16\74\24\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\1\227\5\74\1\0\6\74\1\146\1\0\17\74\24\0"+
    "\13\74\1\0\1\74\1\0\1\74\4\0\6\74\1\0"+
    "\6\74\1\146\1\230\17\74\24\0\13\74\1\0\1\74"+
    "\1\0\1\74\4\0\6\74\1\0\6\74\1\146\1\0"+
    "\13\74\1\231\3\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\6\74\1\0\6\74\1\146\1\0\1\74"+
    "\1\232\15\74\24\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\6\74\1\0\1\233\2\74\1\234\2\74\1\146"+
    "\1\0\17\74\24\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\5\74\1\235\1\0\6\74\1\146\1\0\17\74"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\0\6\4\2\0\1\4\1\236\15\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\4\1\237\4\4"+
    "\1\0\6\4\2\0\17\4\24\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\6\4\1\0\1\240\5\4\2\0"+
    "\17\4\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\1\241\5\4\1\0\6\4\2\0\17\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\0\6\4"+
    "\2\0\11\4\1\242\5\4\24\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\6\4\1\0\6\4\2\0\5\4"+
    "\1\243\11\4\24\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\1\0\3\4\1\244\2\4\2\0\17\4"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\0\3\4\1\245\2\4\2\0\17\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\0\2\4"+
    "\1\246\3\4\2\0\17\4\26\0\3\177\1\0\1\177"+
    "\1\0\3\177\1\0\1\177\1\0\1\56\5\0\4\177"+
    "\2\0\1\177\1\0\1\177\7\0\1\177\1\0\1\177"+
    "\5\0\1\177\1\0\1\56\30\0\1\247\1\0\1\247"+
    "\1\0\1\247\1\0\3\247\1\0\1\247\7\0\4\247"+
    "\2\0\1\247\1\0\1\247\7\0\1\247\1\0\1\247"+
    "\5\0\1\247\30\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\1\0\6\4\2\0\4\4\1\250\12\4"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\0\6\4\2\0\4\4\1\251\12\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\252\5\4\1\0"+
    "\6\4\2\0\17\4\61\0\1\253\17\0\1\254\65\0"+
    "\1\255\103\0\1\256\102\0\1\257\106\0\1\260\1\0"+
    "\1\261\100\0\1\262\1\263\102\0\1\264\110\0\1\265"+
    "\71\0\1\266\124\0\1\267\41\0\13\74\1\0\1\74"+
    "\1\0\1\74\4\0\6\74\1\0\1\74\1\270\4\74"+
    "\1\146\1\0\17\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\6\74\1\0\6\74\1\146\1\0\4\74"+
    "\1\271\12\74\24\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\6\74\1\0\6\74\1\146\1\0\1\74\1\157"+
    "\15\74\24\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\6\74\1\0\6\74\1\146\1\0\2\74\1\272\14\74"+
    "\24\0\13\74\1\0\1\74\1\0\1\74\4\0\6\74"+
    "\1\0\6\74\1\146\1\0\1\273\16\74\24\0\13\74"+
    "\1\0\1\74\1\0\1\74\4\0\6\74\1\0\6\74"+
    "\1\146\1\0\10\74\1\274\6\74\24\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\6\74\1\0\6\74\1\146"+
    "\1\0\4\74\1\275\12\74\24\0\13\74\1\0\1\74"+
    "\1\0\1\74\4\0\6\74\1\0\6\74\1\146\1\0"+
    "\4\74\1\276\5\74\1\277\4\74\24\0\1\300\2\0"+
    "\3\300\1\0\4\300\1\0\1\300\1\0\1\300\4\0"+
    "\3\300\2\0\1\300\1\0\6\300\2\0\17\300\24\0"+
    "\13\74\1\0\1\74\1\0\1\74\4\0\6\74\1\0"+
    "\4\74\1\301\1\74\1\146\1\0\17\74\24\0\13\74"+
    "\1\0\1\74\1\0\1\74\4\0\6\74\1\0\4\74"+
    "\1\302\1\74\1\146\1\0\17\74\24\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\1\303\5\74\1\0\6\74"+
    "\1\146\1\0\17\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\6\74\1\0\5\74\1\304\1\146\1\0"+
    "\17\74\24\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\6\74\1\0\3\74\1\305\2\74\1\146\1\0\17\74"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\0\6\4\2\0\1\4\1\306\15\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\5\4\1\307\1\0"+
    "\6\4\2\0\17\4\24\0\13\4\1\0\1\4\1\0"+
    "\1\4\4\0\6\4\1\0\1\310\5\4\2\0\17\4"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\0\6\4\2\0\5\4\1\311\11\4\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\1\312\5\4\1\0"+
    "\6\4\2\0\17\4\26\0\1\313\1\0\1\313\1\0"+
    "\1\313\1\0\3\313\1\0\1\313\7\0\4\313\2\0"+
    "\1\313\1\0\1\313\7\0\1\313\1\0\1\313\5\0"+
    "\1\313\30\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\0\1\314\5\4\2\0\17\4\56\0\1\315"+
    "\130\0\1\316\64\0\1\317\100\0\1\320\111\0\1\321"+
    "\77\0\1\322\114\0\1\323\65\0\1\324\122\0\1\230"+
    "\120\0\1\325\72\0\1\326\73\0\1\327\2\0\1\330"+
    "\77\0\1\331\54\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\6\74\1\0\6\74\1\146\1\0\5\74\1\332"+
    "\11\74\24\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\6\74\1\0\2\74\1\333\3\74\1\146\1\0\17\74"+
    "\24\0\13\74\1\0\1\74\1\0\1\74\4\0\1\334"+
    "\5\74\1\0\6\74\1\146\1\0\17\74\24\0\13\74"+
    "\1\0\1\74\1\0\1\74\4\0\6\74\1\0\1\335"+
    "\5\74\1\146\1\230\17\74\24\0\13\74\1\0\1\74"+
    "\1\0\1\74\4\0\6\74\1\0\1\336\5\74\1\146"+
    "\1\0\17\74\24\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\6\74\1\0\1\74\1\337\4\74\1\146\1\0"+
    "\17\74\24\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\6\74\1\0\3\74\1\340\2\74\1\146\1\0\11\74"+
    "\1\341\5\74\24\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\6\74\1\0\3\74\1\342\2\74\1\146\1\0"+
    "\17\74\24\0\13\300\1\0\1\300\1\0\1\300\4\0"+
    "\6\300\1\0\6\300\2\0\17\300\24\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\5\74\1\343\1\0\6\74"+
    "\1\146\1\0\17\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\6\74\1\0\3\74\1\344\2\74\1\146"+
    "\1\0\17\74\24\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\6\74\1\0\6\74\1\146\1\0\4\74\1\345"+
    "\12\74\24\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\6\74\1\0\1\74\1\346\4\74\1\146\1\0\17\74"+
    "\24\0\13\74\1\0\1\74\1\0\1\74\4\0\6\74"+
    "\1\0\1\347\5\74\1\146\1\0\17\74\24\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\0\6\4"+
    "\2\0\4\4\1\350\12\4\24\0\13\4\1\0\1\4"+
    "\1\0\1\4\4\0\6\4\1\0\6\4\2\0\1\4"+
    "\1\351\15\4\24\0\13\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\1\0\1\4\1\352\4\4\2\0\17\4"+
    "\26\0\1\65\1\0\1\65\1\0\1\65\1\0\3\65"+
    "\1\0\1\65\7\0\4\65\2\0\1\65\1\0\1\65"+
    "\7\0\1\65\1\0\1\65\5\0\1\65\30\0\13\4"+
    "\1\0\1\4\1\0\1\4\4\0\6\4\1\0\1\4"+
    "\1\353\4\4\2\0\17\4\57\0\1\354\117\0\1\355"+
    "\101\0\1\263\105\0\1\356\102\0\1\357\114\0\1\360"+
    "\100\0\1\361\104\0\1\362\5\0\1\363\66\0\1\364"+
    "\104\0\1\365\71\0\1\366\120\0\1\367\102\0\1\370"+
    "\47\0\13\74\1\0\1\74\1\0\1\74\4\0\6\74"+
    "\1\0\5\74\1\272\1\146\1\0\17\74\24\0\13\74"+
    "\1\0\1\74\1\0\1\74\4\0\6\74\1\0\6\74"+
    "\1\146\1\0\12\74\1\277\4\74\24\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\6\74\1\0\5\74\1\371"+
    "\1\146\1\0\17\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\1\372\5\74\1\0\6\74\1\146\1\0"+
    "\17\74\24\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\1\74\1\373\4\74\1\0\6\74\1\146\1\0\17\74"+
    "\24\0\13\74\1\0\1\74\1\0\1\74\4\0\6\74"+
    "\1\0\6\74\1\146\1\230\3\74\1\374\2\74\1\375"+
    "\10\74\24\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\6\74\1\0\6\74\1\146\1\0\14\74\1\376\2\74"+
    "\24\0\13\74\1\0\1\74\1\0\1\74\4\0\6\74"+
    "\1\0\6\74\1\146\1\0\4\74\1\377\12\74\24\0"+
    "\13\74\1\0\1\74\1\0\1\74\4\0\6\74\1\0"+
    "\3\74\1\u0100\2\74\1\146\1\0\17\74\24\0\13\74"+
    "\1\0\1\74\1\0\1\74\4\0\1\157\5\74\1\0"+
    "\6\74\1\146\1\0\17\74\24\0\13\74\1\0\1\74"+
    "\1\0\1\74\4\0\6\74\1\0\6\74\1\146\1\230"+
    "\3\74\1\u0101\13\74\24\0\5\74\1\u0102\5\74\1\0"+
    "\1\74\1\0\1\74\4\0\6\74\1\0\6\74\1\146"+
    "\1\0\17\74\24\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\6\74\1\0\6\74\1\146\1\0\11\74\1\u0103"+
    "\5\74\24\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\6\74\1\0\6\74\1\146\1\0\1\74\1\u0104\15\74"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\1\u0105"+
    "\5\4\1\0\6\4\2\0\17\4\24\0\13\4\1\0"+
    "\1\4\1\0\1\4\4\0\6\4\1\0\6\4\2\0"+
    "\2\4\1\u0106\14\4\73\0\1\u0107\71\0\1\u0108\73\0"+
    "\1\u0109\113\0\1\u010a\6\0\1\230\75\0\1\u010b\105\0"+
    "\1\u010c\106\0\1\u010d\15\0\1\u010e\66\0\1\u010f\77\0"+
    "\1\u0110\111\0\1\u0111\115\0\1\u0112\71\0\1\u0113\103\0"+
    "\1\u0114\52\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\6\74\1\0\4\74\1\u0115\1\74\1\146\1\0\17\74"+
    "\24\0\13\74\1\0\1\74\1\0\1\74\4\0\6\74"+
    "\1\0\4\74\1\377\1\74\1\146\1\0\17\74\24\0"+
    "\13\74\1\0\1\74\1\0\1\74\4\0\6\74\1\0"+
    "\6\74\1\146\1\0\1\74\1\u0116\15\74\24\0\13\74"+
    "\1\0\1\74\1\0\1\74\4\0\6\74\1\0\5\74"+
    "\1\u0117\1\146\1\0\17\74\24\0\13\74\1\0\1\74"+
    "\1\0\1\74\4\0\2\74\1\u0118\3\74\1\0\6\74"+
    "\1\146\1\0\17\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\6\74\1\0\4\74\1\u0119\1\74\1\146"+
    "\1\0\17\74\24\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\6\74\1\0\3\74\1\157\2\74\1\146\1\0"+
    "\17\74\24\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\6\74\1\0\1\u011a\5\74\1\146\1\0\17\74\24\0"+
    "\13\74\1\0\1\74\1\0\1\74\4\0\1\u011b\5\74"+
    "\1\0\6\74\1\146\1\0\17\74\24\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\6\74\1\0\5\74\1\u011c"+
    "\1\146\1\0\17\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\6\74\1\0\6\74\1\146\1\230\12\74"+
    "\1\277\4\74\24\0\13\74\1\0\1\74\1\0\1\74"+
    "\4\0\6\74\1\0\6\74\1\146\1\0\5\74\1\157"+
    "\11\74\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\0\6\4\2\0\4\4\1\u011d\12\4\63\0"+
    "\1\356\121\0\1\363\67\0\1\u011e\70\0\1\u011f\105\0"+
    "\1\u0120\121\0\1\230\3\0\1\u0121\2\0\1\u0122\112\0"+
    "\1\u0123\74\0\1\u0124\73\0\1\u0125\72\0\1\263\122\0"+
    "\1\230\3\0\1\u0126\44\0\1\u0127\152\0\1\u0128\74\0"+
    "\1\u0129\41\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\6\74\1\0\1\74\1\157\4\74\1\146\1\0\17\74"+
    "\24\0\13\74\1\0\1\74\1\0\1\74\4\0\6\74"+
    "\1\0\6\74\1\146\1\0\4\74\1\157\12\74\24\0"+
    "\13\74\1\0\1\74\1\0\1\74\4\0\6\74\1\0"+
    "\6\74\1\146\1\0\7\74\1\u0116\7\74\24\0\13\74"+
    "\1\0\1\74\1\0\1\74\4\0\2\74\1\u012a\3\74"+
    "\1\0\6\74\1\146\1\0\17\74\24\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\6\74\1\0\6\74\1\146"+
    "\1\0\1\74\1\u012b\15\74\24\0\13\74\1\0\1\74"+
    "\1\0\1\74\4\0\6\74\1\0\6\74\1\146\1\0"+
    "\13\74\1\157\3\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\6\74\1\0\1\u012c\5\74\1\146\1\0"+
    "\17\74\24\0\13\74\1\0\1\74\1\0\1\74\4\0"+
    "\6\74\1\0\6\74\1\146\1\0\5\74\1\u012d\11\74"+
    "\24\0\13\4\1\0\1\4\1\0\1\4\4\0\6\4"+
    "\1\0\4\4\1\u012e\1\4\2\0\17\4\62\0\1\u012f"+
    "\104\0\1\u0124\111\0\1\u0130\100\0\1\u0131\72\0\1\u0132"+
    "\115\0\1\u0133\103\0\1\263\101\0\1\u0134\75\0\1\u0135"+
    "\120\0\1\u0136\106\0\1\230\12\0\1\363\77\0\1\263"+
    "\35\0\13\74\1\0\1\74\1\0\1\74\4\0\6\74"+
    "\1\0\6\74\1\146\1\0\5\74\1\u0137\11\74\24\0"+
    "\13\74\1\0\1\74\1\0\1\74\4\0\6\74\1\0"+
    "\1\335\5\74\1\146\1\0\17\74\24\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\1\u0138\5\74\1\0\6\74"+
    "\1\146\1\0\17\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\1\u0139\5\74\1\0\6\74\1\146\1\0"+
    "\17\74\24\0\13\4\1\0\1\4\1\0\1\4\4\0"+
    "\2\4\1\u013a\3\4\1\0\6\4\2\0\17\4\57\0"+
    "\1\263\117\0\1\263\107\0\1\u0130\60\0\1\u013b\122\0"+
    "\1\u013c\116\0\1\263\61\0\1\u013d\121\0\1\u013e\35\0"+
    "\13\74\1\0\1\74\1\0\1\74\4\0\6\74\1\0"+
    "\6\74\1\146\1\0\4\74\1\343\12\74\24\0\13\74"+
    "\1\0\1\74\1\0\1\74\4\0\6\74\1\0\6\74"+
    "\1\146\1\0\4\74\1\u013f\12\74\24\0\13\74\1\0"+
    "\1\74\1\0\1\74\4\0\6\74\1\0\6\74\1\146"+
    "\1\0\12\74\1\u0140\4\74\73\0\1\u0141\67\0\1\u010a"+
    "\75\0\1\u0142\104\0\1\u0143\61\0\5\74\1\u0144\5\74"+
    "\1\0\1\74\1\0\1\74\4\0\6\74\1\0\6\74"+
    "\1\146\1\0\17\74\24\0\13\74\1\0\1\74\1\0"+
    "\1\74\4\0\6\74\1\0\1\74\1\u0145\4\74\1\146"+
    "\1\0\17\74\72\0\1\u0110\104\0\1\u0146\112\0\1\u0147"+
    "\30\0\13\74\1\0\1\74\1\0\1\74\4\0\6\74"+
    "\1\0\5\74\1\u0148\1\146\1\0\17\74\24\0\13\74"+
    "\1\0\1\74\1\0\1\74\4\0\6\74\1\0\5\74"+
    "\1\u0149\1\146\1\0\17\74\31\0\1\u014a\132\0\1\u014b"+
    "\51\0\13\74\1\0\1\74\1\0\1\74\4\0\6\74"+
    "\1\0\6\74\1\146\1\0\5\74\1\343\11\74\24\0"+
    "\13\74\1\0\1\74\1\0\1\74\4\0\6\74\1\0"+
    "\6\74\1\146\1\0\1\u012b\16\74\63\0\1\u014c\104\0"+
    "\1\u014d\114\0\1\u0110\77\0\1\u013c\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20079];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\1\11\10\1\1\11\1\1\2\11"+
    "\2\1\12\11\4\1\2\11\2\1\2\0\5\1\13\0"+
    "\4\1\1\11\5\1\5\11\1\1\3\11\2\1\1\0"+
    "\1\11\3\0\5\1\16\0\12\1\1\11\2\0\5\1"+
    "\30\0\11\1\1\0\3\1\25\0\1\1\5\0\5\1"+
    "\1\0\1\1\33\0\4\1\31\0\2\1\26\0\1\1"+
    "\20\0\1\1\13\0\1\1\23\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _DbLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DbLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2284) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { return LTLT;
          }
        case 59: break;
        case 23: 
          { return RPARENTH;
          }
        case 60: break;
        case 14: 
          { return TILDE;
          }
        case 61: break;
        case 12: 
          { return LT;
          }
        case 62: break;
        case 4: 
          { return INTEGER_LITERAL;
          }
        case 63: break;
        case 36: 
          { return GTEQ;
          }
        case 64: break;
        case 47: 
          { return LONG_KEYWORD;
          }
        case 65: break;
        case 27: 
          { return LONG_LITERAL;
          }
        case 66: break;
        case 11: 
          { return EXCL;
          }
        case 67: break;
        case 41: 
          { return CHARACTER_LITERAL;
          }
        case 68: break;
        case 39: 
          { return ANDAND;
          }
        case 69: break;
        case 53: 
          { return CLASS_KEYWORD;
          }
        case 70: break;
        case 20: 
          { return XOR;
          }
        case 71: break;
        case 51: 
          { return FLOAT_KEYWORD;
          }
        case 72: break;
        case 25: 
          { return RBRACKET;
          }
        case 73: break;
        case 50: 
          { return FALSE;
          }
        case 74: break;
        case 28: 
          { return FLOAT_LITERAL;
          }
        case 75: break;
        case 26: 
          { return COMMA;
          }
        case 76: break;
        case 5: 
          { return DOT;
          }
        case 77: break;
        case 54: 
          { return SHORT_KEYWORD;
          }
        case 78: break;
        case 49: 
          { return VOID_KEYWORD;
          }
        case 79: break;
        case 38: 
          { return QUESTQUEST;
          }
        case 80: break;
        case 19: 
          { return OR;
          }
        case 81: break;
        case 7: 
          { return STRING_LITERAL;
          }
        case 82: break;
        case 9: 
          { return DIV;
          }
        case 83: break;
        case 31: 
          { return COLONCOLON;
          }
        case 84: break;
        case 22: 
          { return LPARENTH;
          }
        case 85: break;
        case 8: 
          { return COLON;
          }
        case 86: break;
        case 46: 
          { return NULL;
          }
        case 87: break;
        case 32: 
          { return EQEQ;
          }
        case 88: break;
        case 18: 
          { return AND;
          }
        case 89: break;
        case 56: 
          { return BOOLEAN_KEYWORD;
          }
        case 90: break;
        case 55: 
          { return DOUBLE_KEYWORD;
          }
        case 91: break;
        case 21: 
          { return PERC;
          }
        case 92: break;
        case 30: 
          { return LAMBDA;
          }
        case 93: break;
        case 29: 
          { return DOUBLE_LITERAL;
          }
        case 94: break;
        case 40: 
          { return OROR;
          }
        case 95: break;
        case 13: 
          { return GT;
          }
        case 96: break;
        case 48: 
          { return CHAR_KEYWORD;
          }
        case 97: break;
        case 24: 
          { return LBRACKET;
          }
        case 98: break;
        case 15: 
          { return QUEST;
          }
        case 99: break;
        case 33: 
          { return NE;
          }
        case 100: break;
        case 6: 
          { return MINUS;
          }
        case 101: break;
        case 52: 
          { return RESOURCE_REFERENCE;
          }
        case 102: break;
        case 45: 
          { return BYTE_KEYWORD;
          }
        case 103: break;
        case 57: 
          { return DEFAULT_KEYWORD;
          }
        case 104: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 105: break;
        case 44: 
          { return TRUE;
          }
        case 106: break;
        case 17: 
          { return ASTERISK;
          }
        case 107: break;
        case 58: 
          { return INSTANCEOF_KEYWORD;
          }
        case 108: break;
        case 42: 
          { return INT_KEYWORD;
          }
        case 109: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 110: break;
        case 43: 
          { return GTGTGT;
          }
        case 111: break;
        case 10: 
          { return EQ;
          }
        case 112: break;
        case 16: 
          { return PLUS;
          }
        case 113: break;
        case 37: 
          { return GTGT;
          }
        case 114: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 115: break;
        case 34: 
          { return LE;
          }
        case 116: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
