/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jetbrains.android.databinding;

import com.android.ide.common.blame.Message;
import com.android.tools.idea.databinding.ModuleDataBinding;
import com.android.tools.idea.gradle.project.build.invoker.GradleInvocationResult;
import com.android.tools.idea.gradle.project.sync.GradleSyncState;
import com.android.tools.idea.res.ModuleResourceRepository;
import com.android.tools.idea.testing.AndroidGradleTestCase;
import com.intellij.ide.DataManager;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.application.Result;
import com.intellij.openapi.command.WriteCommandAction;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.fileEditor.FileDocumentManager;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.openapi.vfs.VfsUtilCore;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.refactoring.actions.RenameElementAction;
import com.intellij.testFramework.TestActionEvent;
import org.jetbrains.annotations.NotNull;
import org.junit.Ignore;

import static com.android.tools.idea.testing.TestProjectPaths.PROJECT_WITH_DATA_BINDING;

/**
 * Test of rename refactoring involving Java language elements generated by Data Binding.
 */
@Ignore("b/69246107")
public class DataBindingRenameTest extends AndroidGradleTestCase {

  private void checkAndRename(String newName) {
    RenameElementAction action = new RenameElementAction();
    AnActionEvent e = new TestActionEvent(DataManager.getInstance().getDataContext(myFixture.getEditor().getComponent()), action);
    action.update(e);
    assertTrue(e.getPresentation().isEnabled() && e.getPresentation().isVisible());
    // Note: This fails when trying to rename XML attribute values: Use myFixture.renameElementAtCaretUsingHandler() instead!
    myFixture.renameElementAtCaret(newName);
    // Save the renaming changes to disk.
    saveAllDocuments();
  }

  private void saveAllDocuments() {
    new WriteCommandAction(getProject()) {
      @Override
      protected void run(@NotNull Result result) throws Throwable {
        FileDocumentManager.getInstance().saveAllDocuments();
      }
    }.execute();
  }

  /**
   * Checks renaming of a resource IDs when a Java field generated from that resource by Data Binding is renamed.
   * @see com.android.tools.idea.databinding.DataBindingRenamer
   */
  public void testRenameFieldDerivedFromResource() throws Exception {
    loadProject(PROJECT_WITH_DATA_BINDING);
    // Temporary fix until test model can detect dependencies properly.
    GradleInvocationResult assembleDebug = invokeGradleTasks(getProject(), "assembleDebug");
    assertTrue(StringUtil.join(assembleDebug.getCompilerMessages(Message.Kind.ERROR), "\n"), assembleDebug.isBuildSuccessful());

    GradleSyncState syncState = GradleSyncState.getInstance(getProject());
    assertFalse(syncState.isSyncNeeded().toBoolean());
    assertTrue(ModuleDataBinding.isEnabled(myAndroidFacet));

    // Trigger initialization.
    ModuleResourceRepository.getOrCreateInstance(myAndroidFacet);

    VirtualFile file =
        getProject().getBaseDir().findFileByRelativePath("app/src/main/java/com/android/example/appwithdatabinding/MainActivity.java");
    myFixture.configureFromExistingVirtualFile(file);
    Editor editor = myFixture.getEditor();
    String text = editor.getDocument().getText();
    int offset = text.indexOf("regularView");
    assertTrue(offset > 0);
    editor.getCaretModel().moveToOffset(offset);
    VirtualFile layoutFile = getProject().getBaseDir().findFileByRelativePath("app/src/main/res/layout/activity_main.xml");
    String layoutText = VfsUtilCore.loadText(layoutFile);
    // Rename regularView to nameAfterRename in MainActivity.java.
    checkAndRename("nameAfterRename");
    // Check results.
    assertEquals(text.replace("regularView", "nameAfterRename"), VfsUtilCore.loadText(file));
    assertEquals(layoutText.replace("regular_view", "name_after_rename"), VfsUtilCore.loadText(layoutFile));
  }
}
