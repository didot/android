/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.android.tools.idea.testing;

import com.android.annotations.Nullable;
import org.jetbrains.android.AndroidTestBase;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import static com.android.tools.idea.testing.FileSubject.file;
import static com.google.common.truth.Truth.assertAbout;

/**
 * Generates TestProjectPaths.
 */
public class TestProjectPathsGenerator {
  public static void main(@NotNull String... args) throws IOException {
    File testDataFolderPath = new File(AndroidTestBase.getTestDataPath()).getCanonicalFile();
    assertAbout(file()).that(testDataFolderPath).isDirectory();

    File testProjectsFolderPath = new File(testDataFolderPath, "projects");
    assertAbout(file()).that(testProjectsFolderPath).isDirectory();

    File testSrcFolderPath = new File(AndroidTestBase.getAndroidPluginHome(), "testSrc").getCanonicalFile();
    assertAbout(file()).that(testSrcFolderPath).isDirectory();

    String packageName = TestProjectPathsGenerator.class.getPackage().getName();
    File parentFolderPath = new File(testSrcFolderPath, packageName.replace('.', File.separatorChar));

    String className = "TestProjectPaths";
    File javaFilePath = new File(parentFolderPath, className + ".java");

    StringBuilder contents = new StringBuilder();
    contents.append("package ").append(packageName).append(";\n\n");
    contents.append("/**\n")
            .append(" * Do not edit. This class is generated by ").append(TestProjectPathsGenerator.class.getName()).append(".\n")
            .append(" */\n");
    contents.append("public final class ").append(className).append(" {\n");

    File[] projectFolders = testProjectsFolderPath.listFiles();
    createConstants(contents, "", projectFolders);

    contents.append("}");

    System.out.println("About to write: ");
    System.out.println(contents);
    System.out.println("to " + javaFilePath.getPath());

    Files.write(Paths.get(javaFilePath.getPath()), contents.toString().getBytes("UTF-8"));
  }

  private static void createConstants(@NotNull StringBuilder contents, @NonNls @NotNull String prefix, @Nullable File[] projectFolders) {
    if (projectFolders == null) {
      return;
    }
    for (File projectFolder : projectFolders) {
      String projectName = projectFolder.getName();
      if (projectName.equals("sync")) {
        File[] subFolders = projectFolder.listFiles();
        createConstants(contents, projectName, subFolders);
      }
      else {
        String constantName = toConstantName(projectName);
        if (!prefix.isEmpty()) {
          constantName = prefix.toUpperCase() + "_" + constantName;
        }
        contents.append("  public static final String ").append(constantName).append(" = \"projects/");
        if (!prefix.isEmpty()) {
          contents.append(prefix).append("/");
        }
        contents.append(projectName).append("\";\n");
      }
    }
  }

  @NotNull
  private static String toConstantName(@NotNull String projectName) {
    StringBuilder buffer = new StringBuilder();

    char[] chars = projectName.toCharArray();
    for (char c : chars) {
      if (Character.isUpperCase(c)) {
        buffer.append("_");
      }
      buffer.append(Character.toUpperCase(c));
    }

    return buffer.toString();
  }
}
