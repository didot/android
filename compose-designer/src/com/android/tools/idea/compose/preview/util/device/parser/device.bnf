/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Defines the tokens in the device spec for the `device` parameter within the @Preview annotation.
 * The language allows to use existing devices via the 'id' or to define a new spec to be re-used in the preview. The spec
 * allows to only define a very limited set of values for the configuration.
 */
{
  parserClass='com.android.tools.idea.compose.preview.util.device.parser.DeviceSpecParser'
  parserUtilClass="com.android.tools.idea.compose.preview.util.device.parser.DeviceSpecParserUtil"

  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'

  psiClassPrefix='DeviceSpec'
  psiImplClassSuffix='Impl'
  psiPackage='com.android.tools.idea.compose.preview.util.device.parser'
  psiImplPackage='com.android.tools.idea.compose.preview.util.device.parser.impl'
  elementTypeHolderClass='com.android.tools.idea.compose.preview.util.device.parser.DeviceSpecTypes'
  elementTypeClass='com.android.tools.idea.compose.preview.util.device.parser.DeviceSpecElementType'
  tokenTypeClass='com.android.tools.idea.compose.preview.util.device.parser.DeviceSpecTokenType'

  tokens=[
    WS='regexp:\s+'  // White spaces for live preview

    // literals
    TRUE = 'true'
    FALSE = 'false'
    PX = 'px'
    DP = 'dp'
    COMMA = ','
    EQUALS = '='
    COLON = ':'

    SPEC_KEYWORD = 'spec'
    ID_KEYWORD = 'id'
    LANDSCAPE_KEYWORD = 'landscape'
    PORTRAIT_KEYWORD = 'portrait'
    SQUARE_KEYWORD = 'square'

    NAME_PARAM_KEYWORD = 'name'
    WIDTH_PARAM_KEYWORD = 'width'
    HEIGHT_PARAM_KEYWORD = 'height'
    PARENT_PARAM_KEYWORD = 'parent'
    ORIENTATION_PARAM_KEYWORD = 'orientation'
    IS_ROUND_PARAM_KEYWORD = 'isRound'
    CHIN_SIZE_PARAM_KEYWORD = 'chinSize'
    DPI_PARAM_KEYWORD = 'dpi'

    INT_T = 'regexp:\d+'
    DEVICE_ID_T = 'regexp:\p{Alpha}+\w*'
  ]
}

root ::= SPEC_KEYWORD COLON spec | ID_KEYWORD COLON DEVICE_ID_T

/* Type definition */
unit ::= (PX | DP)
size_t ::= INT_T (unit)?
orientation_t ::= LANDSCAPE_KEYWORD | PORTRAIT_KEYWORD | SQUARE_KEYWORD

/* Parameter definitions */
name_param ::= NAME_PARAM_KEYWORD EQUALS DEVICE_ID_T
width_param::= WIDTH_PARAM_KEYWORD EQUALS size_t
height_param ::= HEIGHT_PARAM_KEYWORD EQUALS size_t
parent_param::= PARENT_PARAM_KEYWORD EQUALS DEVICE_ID_T
orientation_param ::= ORIENTATION_PARAM_KEYWORD EQUALS orientation_t
is_round_param ::= IS_ROUND_PARAM_KEYWORD EQUALS boolean
chin_size_param ::= CHIN_SIZE_PARAM_KEYWORD EQUALS size_t
dpi_param ::= DPI_PARAM_KEYWORD EQUALS INT_T

/* Top level definitions */
param ::= parent_param
   | name_param
   | width_param
   | height_param
   | orientation_param
   | is_round_param
   | chin_size_param
   | dpi_param { name="param" }
spec ::= param (COMMA param)*
