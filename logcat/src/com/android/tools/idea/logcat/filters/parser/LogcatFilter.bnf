/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Defines tokens in the Logcat Filter Query Language. The language is based on the Buganizer query language specific fields can be queried
 * independently but also, a general query. For example:
 *
 *    foo bar tag: MyTag package: com.example.app
 *
 * Matches log lines that
 *
 *   TAG.contains("MyTag") && PACKAGE.contains("com.example.app") && line.contains("foo bar")
 *
 * Definitions:
 *   term: A top level entity which can either be a string value or a key-value pair
 *   key-term: A key-value term. Matches a field named by the key with the value.
 *   value-term: A top level entity representing a string. Matches the entire log line with the value.
 *
 * There are 2 types of keys. String keys can accept quoted or unquoted values while regular keys can only take an unquoted value with no
 * whitespace. String keys can also be negated and can specify a regex match:
 * String keys examples:
 *     tag: foo
 *     tag: fo\ o
 *     tag: 'foo'
 *     tag: 'fo\'o'
 *     tag: "foo"
 *     tag: "fo\"o"
 *     -tag: foo
 *     tag~: foo|bar
 *
 * Logical operations & (and), | (or) are supported as well as parenthesis.
 *
 * Implicit grouping:
 * Terms without logical operations between them are treated as an implicit AND unless they are value terms:
 *
 *   foo bar tag: MyTag -> line.contains("foo bar") && tag.contains("MyTag")
 *
 * This file is used by Grammar-Kit to generate the lexer, parser, node types and PSI classes.
 */
{
  parserClass="com.android.tools.idea.logcat.filters.parser.LogcatFilterParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="LogcatFilter"
  psiImplClassSuffix="Impl"
  psiPackage="com.android.tools.idea.logcat.filters.parser"
  psiImplPackage="com.android.tools.idea.logcat.filters.parser.impl"

  elementTypeHolderClass="com.android.tools.idea.logcat.filters.parser.LogcatFilterTypes"
  elementTypeClass="com.android.tools.idea.logcat.filters.parser.LogcatFilterElementType"
  tokenTypeClass="com.android.tools.idea.logcat.filters.parser.LogcatFilterTokenType"

  extends(".*Expression")=expression
}

// Based on https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md#24-compact-expression-parsing-with-priorities
root ::= expression *

// All branches here must end in "Expression"
expression
  ::= orExpression
  |   andExpression
  |   literalExpression
  |   parenExpression

orExpression ::= expression OR expression

andExpression ::= expression AND expression

literalExpression
  ::= KEY KVALUE
  |   VALUE

parenExpression ::= LPAREN expression RPAREN
